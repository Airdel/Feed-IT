package analizador_sintactico;

import interfaces.FeedIT;
import java_cup.runtime.Symbol;
import analizador_sintactico.Errores;
import analizador_sintactico.Objetos;
import java.util.Stack;

parser code
{:    
    private Symbol s;        

    public void syntax_error(Symbol s){
        //this.s = s;

        Errores e = new Errores("Error sintactico en la linea "+(s.right+1)+"\n\tSintaxis invalida [ " + s.value + " ]");
        FeedIT.notificar(e);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Errores e = new Errores("Error sintactico no recuperable en la Linea " + (s.right+1) + "\n\tSintaxis invalida [ " + s.value +" ]");
        FeedIT.notificar(e);
        
    }

    public void report_error(String message, Object info){ }    
    public void report_fatal_error(String message, Object info){ }

    public Symbol getS(){        
        return this.s;
    }
:};

action code
{:   
    String codObjeto = "";
    Stack pilaInicio = new Stack();       
    Stack pilaSent = new Stack();       
    Stack pilaFin = new Stack();      
    int i = 1, sentAux;
    String incAux;

    boolean statusDec, statusTipo, statusOp;
    String auxObj = "";
    String auxRec = "";
:};

//Estructurales
terminal Main,Class,Fun;

//Puntuación
terminal P_coma,Coma,Parentesis_A,Parentesis_C,Llave_A,Llave_C,Salto_Linea;

//OPERADORES
terminal Suma,Resta,Multiplicacion,Division,Potencia,
                Modulo,And,Or,Not,Asignacion,Igual,OpR,Inc,Dec,ERROR;

//Tipos de datos
terminal Int,Float,String,
                Double,Null,Boolean,
                Numero,Flotante,Texto,Identificador,Const;

//Condicionales, Bucles, ciclos y cosas así
terminal If,Else,
                 For,Do,
                GoBack,
                True,False,While,ForEach,Loop;

//Palabras reservadas
terminal Humedad,Fagua,Peso,
                Fcomer,Fpremio,Fmasaje,
                Fluz,Fjuguete,Candil,Time;

non terminal INICIO, SENTENCIA, DECLARACION,SENTENCIABOOLEANA,BOOLEAN,IF,FOR,WHILE,VARIABLESGF,VARIABLESG,ACCIONES,ASIGNAG,ASIGNACION, LOGICAS,
        CREAFUN, LLAMARFUN, SENTENCIACLASE, ERRORINICIO, ERRORDECLARACION
;

start with INICIO;

INICIO ::=
    SENTENCIACLASE | ERRORINICIO
;

SENTENCIACLASE ::= 
    Class:td Identificador:id Llave_A Llave_C :s{:
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A Llave_C");
        Objetos o = new Objetos(id,td,idright,idleft);
        System.out.println("Objeto creado");
        FeedIT.objetos.add(o);
        System.out.println("Objeto agregado");
    :}| Fun Main Parentesis_A  Parentesis_C Llave_A Llave_C :s{:
        FeedIT.Producciones.add("Gramática Correcta:\n\tFun Main Parentesis_A Parentesis_C Llave_A Llave_C");
    :}|
    Class Identificador Llave_A  Fun Main Parentesis_A  Parentesis_C Llave_A Llave_C Llave_C :s{:
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A Llave_C Llave_C");
    :}|
    Fun Main Parentesis_A  Parentesis_C Llave_A SENTENCIA Llave_C :s{:
        FeedIT.Producciones.add("Gramática Correcta:\n\tFun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C");
    :}| 
    Class Identificador Llave_A  Fun Main Parentesis_A  Parentesis_C Llave_A SENTENCIA Llave_C Llave_C :s{:
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Llave_C");
    :}|
    Class Identificador Llave_A VARIABLESGF Llave_C  :s{:
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A VARIABLESGF Llave_C");
    :}| 
    Class Identificador Llave_A CREAFUN  Llave_C :s{:
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A CREAFUN Llave_C");
    :}
;

SENTENCIA ::=
    DECLARACION |
    ERRORDECLARACION |
    IF  |
    FOR |
    WHILE |
    ACCIONES|
    ASIGNACION |
    ERRORASIGNACION |
    LLAMARFUN
;

DECLARACION ::=
    Int Identificador P_coma SENTENCIA :s{:
        FeedIT.Producciones.add("Gramática Correcta:\n\tInt Identificador P_coma SENTENCIA");
        System.out.println("Producción añadida: \n\tInt Identificador P_coma SENTENCIA");
    :}     |
    Float Identificador P_coma SENTENCIA   |
    String Identificador P_coma SENTENCIA  |
    Boolean Identificador P_coma SENTENCIA |
    Int Identificador P_coma :s{:
        FeedIT.Producciones.add("Gramática Correcta:\n\tInt Identificador P_coma");
        System.out.println("Producción añadida: \n\tInt Identificador P_coma");
    :}     |
    Float Identificador P_coma   |
    String Identificador P_coma  |
    Boolean Identificador P_coma |
    
    Int ASIGNACION     |
    Float ASIGNACION   |
    String ASIGNACION  |
    Boolean ASIGNACION 
;
ASIGNACION ::=
    Identificador Asignacion Numero P_coma SENTENCIA   |
    Identificador Asignacion Texto P_coma SENTENCIA    |
    Identificador Asignacion Flotante P_coma SENTENCIA |
    Identificador Asignacion BOOLEAN  P_coma SENTENCIA |
    Identificador Asignacion Peso Parentesis_A Parentesis_C  P_coma SENTENCIA |
    Identificador Asignacion Humedad Parentesis_A Parentesis_C  P_coma SENTENCIA |
    Identificador Asignacion Candil Parentesis_A Parentesis_C  P_coma SENTENCIA |
    Identificador Asignacion Identificador P_coma SENTENCIA |
    Identificador Asignacion Numero P_coma   |
    Identificador Asignacion Texto P_coma    |
    Identificador Asignacion Flotante P_coma |
    Identificador Asignacion BOOLEAN  P_coma |
    Identificador Asignacion Peso Parentesis_A Parentesis_C  P_coma |
    Identificador Asignacion Humedad Parentesis_A Parentesis_C  P_coma  |
    Identificador Asignacion Candil Parentesis_A Parentesis_C  P_coma  |
    Identificador Asignacion Identificador P_coma
;

SENTENCIABOOLEANA ::=
       BOOLEAN |
       Identificador OpR Identificador | 
       Identificador OpR Numero | 
       Identificador OpR Flotante |
       Numero OpR Identificador | 
       Flotante OpR Identificador |
       Identificador Igual Texto |
       Texto Igual Identificador | 
       Identificador Igual Identificador |
       Identificador Igual Numero |
       Numero Igual Identificador | 
       Identificador Igual BOOLEAN 
;
BOOLEAN ::=
    True |
    False
;
IF ::=
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A  Llave_C SENTENCIA |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A  Llave_C |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A  Llave_C Else Llave_A Llave_C   |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C  |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C SENTENCIA  |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C  |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A  Llave_C Else Llave_A SENTENCIA Llave_C  |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA |
    If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A  Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA |

    If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA |
    If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C |
    If Parentesis_A LOGICAS Parentesis_C Llave_A  Llave_C SENTENCIA |
    If Parentesis_A LOGICAS Parentesis_C Llave_A  Llave_C |
    If Parentesis_A LOGICAS Parentesis_C Llave_A  Llave_C Else Llave_A Llave_C   |
    If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C  |
    If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C SENTENCIA  |
    If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C  |
    If Parentesis_A LOGICAS Parentesis_C Llave_A  Llave_C Else Llave_A SENTENCIA Llave_C  |
    If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA |
    If Parentesis_A LOGICAS Parentesis_C Llave_A  Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
;

FOR ::=
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma  Identificador Inc Parentesis_C 
    Llave_A   SENTENCIA  Llave_C SENTENCIA |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma  Identificador Inc Parentesis_C 
    Llave_A   SENTENCIA  Llave_C  |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma  Identificador Inc Parentesis_C 
    Llave_A   Llave_C  |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma  Identificador Inc Parentesis_C 
    Llave_A   Llave_C  SENTENCIA |

     For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma  Identificador Inc Parentesis_C 
    Llave_A   SENTENCIA  Llave_C SENTENCIA |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma  Identificador Inc Parentesis_C 
    Llave_A   SENTENCIA  Llave_C  |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma  Identificador Inc Parentesis_C 
    Llave_A   Llave_C  |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma  Identificador Inc Parentesis_C 
    Llave_A   Llave_C  SENTENCIA |

    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma  Identificador Dec Parentesis_C 
    Llave_A   SENTENCIA  Llave_C SENTENCIA |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma  Identificador Dec Parentesis_C 
    Llave_A   SENTENCIA  Llave_C  |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma  Identificador Dec Parentesis_C 
    Llave_A   Llave_C  |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma  Identificador Dec Parentesis_C 
    Llave_A   Llave_C  SENTENCIA |

     For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador  P_coma  Identificador Dec Parentesis_C 
    Llave_A   SENTENCIA  Llave_C SENTENCIA |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador  P_coma  Identificador Dec Parentesis_C 
    Llave_A   SENTENCIA  Llave_C  |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador  P_coma  Identificador Dec Parentesis_C 
    Llave_A   Llave_C  |
    For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador  P_coma  Identificador Dec Parentesis_C 
    Llave_A   Llave_C  SENTENCIA 
;

WHILE ::=
    While Parentesis_A SENTENCIABOOLEANA Parentesis_C  Llave_A Llave_C  |
    While Parentesis_A SENTENCIABOOLEANA Parentesis_C  Llave_A SENTENCIA Llave_C  |
    While Parentesis_A SENTENCIABOOLEANA Parentesis_C  Llave_A Llave_C SENTENCIA |
    While Parentesis_A SENTENCIABOOLEANA Parentesis_C  Llave_A SENTENCIA Llave_C SENTENCIA 
;

VARIABLESGF ::=
    VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A Llave_C |
    VARIABLESG  Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C |
    ASIGNAG Fun Main Parentesis_A Parentesis_C Llave_A Llave_C |
    ASIGNAG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
;

VARIABLESG ::=
    Int Identificador P_coma     VARIABLESG  |
    Float Identificador P_coma   VARIABLESG  |
    String Identificador P_coma  VARIABLESG  |
    Boolean Identificador P_coma VARIABLESG  |
    Int Identificador P_coma       |
    Float Identificador P_coma     |
    String Identificador P_coma    |
    Boolean Identificador P_coma   |
    Int ASIGNAG |
    Float ASIGNAG  |
    String ASIGNAG |
    Boolean ASIGNAG 
;

ASIGNAG ::=
    Identificador Asignacion Numero   P_coma   VARIABLESG   |
    Identificador Asignacion Texto    P_coma   VARIABLESG   |
    Identificador Asignacion Flotante P_coma   VARIABLESG   |
    Identificador Asignacion BOOLEAN  P_coma   VARIABLESG   |
    Identificador Asignacion Peso Parentesis_A Parentesis_C  P_coma  VARIABLESG   |
    Identificador Asignacion Humedad Parentesis_A Parentesis_C  P_coma  VARIABLESG   |
    Identificador Asignacion Candil Parentesis_A Parentesis_C  P_coma  VARIABLESG   |
    Identificador Asignacion Numero   P_coma   ASIGNAG    |
    Identificador Asignacion Texto    P_coma   ASIGNAG   |
    Identificador Asignacion Flotante P_coma   ASIGNAG   |
    Identificador Asignacion BOOLEAN  P_coma   ASIGNAG    |
    Identificador Asignacion Peso Parentesis_A Parentesis_C  P_coma  ASIGNAG   |
    Identificador Asignacion Humedad Parentesis_A Parentesis_C  P_coma  ASIGNAG   |
    Identificador Asignacion Candil Parentesis_A Parentesis_C  P_coma  ASIGNAG   |
    Identificador Asignacion Numero   P_coma   |
    Identificador Asignacion Texto    P_coma   |
    Identificador Asignacion Flotante P_coma   |
    Identificador Asignacion BOOLEAN  P_coma   |
    Identificador Asignacion Peso Parentesis_A Parentesis_C  P_coma |
    Identificador Asignacion Humedad Parentesis_A Parentesis_C  P_coma |
    Identificador Asignacion Candil Parentesis_A Parentesis_C  P_coma
    
;

ACCIONES ::=
    Fagua Parentesis_A   BOOLEAN Parentesis_C P_coma SENTENCIA | 
    Fcomer Parentesis_A  BOOLEAN Parentesis_C P_coma SENTENCIA |
    Fluz Parentesis_A    BOOLEAN Parentesis_C P_coma SENTENCIA |
    Fjuguete Parentesis_A  BOOLEAN Parentesis_C P_coma SENTENCIA |
    Fmasaje Parentesis_A  BOOLEAN Parentesis_C P_coma SENTENCIA |
    Fpremio Parentesis_A  BOOLEAN Parentesis_C P_coma SENTENCIA |
    Time Parentesis_A Numero Parentesis_C P_coma SENTENCIA |
    Fagua Parentesis_A  BOOLEAN Parentesis_C P_coma  | 
    Fcomer Parentesis_A  BOOLEAN Parentesis_C P_coma  |
    Fluz Parentesis_A  BOOLEAN Parentesis_C P_coma  |
    Fjuguete Parentesis_A  BOOLEAN Parentesis_C P_coma  |
    Fmasaje Parentesis_A   BOOLEAN Parentesis_C P_coma  |
    Fpremio Parentesis_A   BOOLEAN Parentesis_C P_coma  |
    Time Parentesis_A Numero Parentesis_C P_coma 
;


LOGICAS ::=
    SENTENCIABOOLEANA And SENTENCIABOOLEANA |
    SENTENCIABOOLEANA Or SENTENCIABOOLEANA  |
    Not Parentesis_A SENTENCIABOOLEANA Parentesis_C
;

CREAFUN ::=
    Fun Identificador Parentesis_A Parentesis_C Llave_A Llave_C CREAFUN |
    Fun Identificador Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C CREAFUN |
    Fun Identificador Parentesis_A Parentesis_C Llave_A Llave_C  Fun Main  Parentesis_A Parentesis_C Llave_A Llave_C |
    Fun Identificador Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Fun Main  Parentesis_A Parentesis_C Llave_A Llave_C |
    Fun Identificador Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Fun Main  Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C |
    Fun Identificador Parentesis_A Parentesis_C Llave_A Llave_C  Fun Main  Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
;

LLAMARFUN ::=
    Identificador Parentesis_A Parentesis_C P_coma SENTENCIA |
    Identificador Parentesis_A Parentesis_C P_coma 
;

ERRORINICIO ::=
    Identificador Llave_A Llave_C {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador Llave_A Llave_C");
        Errores e = new Errores("Error sintactico, Se esperaba [class]");
        FeedIT.errores.add(e);
    :}  |   //Se esperaba Class
    Class Llave_A Llave_C {:
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Llave_A Llave_C");
        Errores e = new Errores("Error sintactico, Se esperaba [Identificador]");
        FeedIT.errores.add(e);
    :}             |   //Se esperaba un Identificador
    Class Identificador Llave_A {:
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Identificador Llave_A");
        Errores e = new Errores("Error sintactico, Se esperaba una llave de cierre");
        FeedIT.errores.add(e);
    :}       |   //Se esperaba un Llave_C
    Class Identificador Llave_C {:
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Identificador Llave_C");
        Errores e = new Errores("Error sintactico, Se esperaba una llave de Apertura");
        FeedIT.errores.add(e);
    :}       |   //Se esperaba un Llave_A
    Class Identificador  {:
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Identificador");
        Errores e = new Errores("Error sintactico, Se esperaba una llave de Apertura");
        FeedIT.errores.add(e);
    :}                       //Se esperaba una Llave_A
;

ERRORDECLARACION ::=
    Int P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tInt P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    :} |    //Se esperaba un identificador
    Int Identificador SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    :} |    //Se esperaba un [;]
    Identificador P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un tipo de dato");
        FeedIT.errores.add(e);
    :} | //Se esperaba un tipo de dato
    Int P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tInt P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    :} |    //Se esperaba un identificador
    Int Identificador {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    :}    //Se esperaba un [;]
;

ERRORASIGNACION ::=
    Asignacion Peso Parentesis_A Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Peso Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un identificador
    Identificador Peso Parentesis_A Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador Peso Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Operador de asignación[=]");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un [=]
    Identificador Asignacion Parentesis_A Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Valor u funcion reservada");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Peso Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Peso Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Apertura");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Peso Parentesis_A  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Peso Parentesis_A P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Cierre");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Peso Parentesis_A Parentesis_C  SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Peso Parentesis_A Parentesis_C SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    :}  |

//----------------------------------------------------------------------------------------------------------------------

Asignacion Peso Parentesis_A Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Peso Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un identificador
    Identificador Peso Parentesis_A Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador Peso Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Operador de asignación[=]");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un [=]
    Identificador Asignacion Parentesis_A Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Valor u funcion reservada");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Peso Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Peso Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Apertura");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Peso Parentesis_A  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Peso Parentesis_A P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Cierre");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Peso Parentesis_A Parentesis_C  {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Peso Parentesis_A Parentesis_C SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    :}

//----------------------------------------------------------------------------------------------------------------------

Asignacion Humedad Parentesis_A Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Humedad Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un identificador
    Identificador Humedad Parentesis_A Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador Humedad Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Operador de asignación[=]");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un [=]
    Identificador Asignacion Parentesis_A Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Valor u funcion reservada");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Humedad Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Humedad Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Apertura");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Humedad Parentesis_A  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Humedad Parentesis_A P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Cierre");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Humedad Parentesis_A Parentesis_C  SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Humedad Parentesis_A Parentesis_C SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    :}

    Asignacion Humedad Parentesis_A Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Humedad Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un identificador
    Identificador Humedad Parentesis_A Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador Humedad Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Operador de asignación[=]");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un [=]
    Identificador Asignacion Parentesis_A Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Valor u funcion reservada");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Humedad Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Humedad Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Apertura");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Humedad Parentesis_A  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Humedad Parentesis_A P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Cierre");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Humedad Parentesis_A Parentesis_C  {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Humedad Parentesis_A Parentesis_C SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    :}

//----------------------------------------------------------------------------------------------------------------------

Asignacion Candil Parentesis_A Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Candil Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un identificador
    Identificador Candil Parentesis_A Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador Candil Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Operador de asignación[=]");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un [=]
    Identificador Asignacion Parentesis_A Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Valor u funcion reservada");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Candil Parentesis_C  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Candil Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Apertura");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Candil Parentesis_A  P_coma SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Candil Parentesis_A P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Cierre");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Candil Parentesis_A Parentesis_C  SENTENCIA {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Candil Parentesis_A Parentesis_C SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    :}

    Asignacion Candil Parentesis_A Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Candil Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un identificador
    Identificador Candil Parentesis_A Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador Candil Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Operador de asignación[=]");
        FeedIT.errores.add(e);
    :}  |    //Se esperaba un [=]
    Identificador Asignacion Parentesis_A Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Parentesis_A Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Valor u funcion reservada");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Candil Parentesis_C  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Candil Parentesis_C P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Apertura");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Candil Parentesis_A  P_coma {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Candil Parentesis_A P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un Parentesis de Cierre");
        FeedIT.errores.add(e);
    :}  |
        Identificador Asignacion Candil Parentesis_A Parentesis_C  {:
        FeedIT.Producciones.add("Gramática invalida:\n\tAsignacion Candil Parentesis_A Parentesis_C SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    :}
;