
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 07 07:22:52 MST 2021
//----------------------------------------------------

package analizador_sintactico;

import interfaces.FeedIT;
import java_cup.runtime.Symbol;
import analizador_sintactico.Errores;
import analizador_sintactico.Objetos;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 07 07:22:52 MST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\257\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\022\006\000\002\022\010\000\002\022\014" +
    "\000\002\022\011\000\002\022\015\000\002\022\007\000" +
    "\002\022\007\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\005\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\016\007\000\002\016\007" +
    "\000\002\016\007\000\002\016\007\000\002\016\011\000" +
    "\002\016\011\000\002\016\011\000\002\016\007\000\002" +
    "\016\006\000\002\016\006\000\002\016\006\000\002\016" +
    "\006\000\002\016\010\000\002\016\010\000\002\016\010" +
    "\000\002\016\006\000\002\005\003\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\006\003\000\002\006\003\000\002\007\012\000" +
    "\002\007\011\000\002\007\011\000\002\007\010\000\002" +
    "\007\013\000\002\007\014\000\002\007\015\000\002\007" +
    "\015\000\002\007\014\000\002\007\016\000\002\007\015" +
    "\000\002\007\012\000\002\007\011\000\002\007\011\000" +
    "\002\007\010\000\002\007\013\000\002\007\014\000\002" +
    "\007\015\000\002\007\015\000\002\007\014\000\002\007" +
    "\016\000\002\007\015\000\002\010\024\000\002\010\023" +
    "\000\002\010\022\000\002\010\023\000\002\010\024\000" +
    "\002\010\023\000\002\010\022\000\002\010\023\000\002" +
    "\010\024\000\002\010\023\000\002\010\022\000\002\010" +
    "\023\000\002\010\024\000\002\010\023\000\002\010\022" +
    "\000\002\010\023\000\002\011\010\000\002\011\011\000" +
    "\002\011\011\000\002\011\012\000\002\012\011\000\002" +
    "\012\012\000\002\012\011\000\002\012\012\000\002\013" +
    "\006\000\002\013\006\000\002\013\006\000\002\013\006" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\004\000\002\013\004\000\002" +
    "\013\004\000\002\013\004\000\002\015\007\000\002\015" +
    "\007\000\002\015\007\000\002\015\007\000\002\015\011" +
    "\000\002\015\011\000\002\015\011\000\002\015\007\000" +
    "\002\015\007\000\002\015\007\000\002\015\007\000\002" +
    "\015\011\000\002\015\011\000\002\015\011\000\002\015" +
    "\006\000\002\015\006\000\002\015\006\000\002\015\006" +
    "\000\002\015\010\000\002\015\010\000\002\015\010\000" +
    "\002\014\010\000\002\014\010\000\002\014\010\000\002" +
    "\014\010\000\002\014\010\000\002\014\010\000\002\014" +
    "\010\000\002\014\007\000\002\014\007\000\002\014\007" +
    "\000\002\014\007\000\002\014\007\000\002\014\007\000" +
    "\002\014\007\000\002\017\005\000\002\017\005\000\002" +
    "\017\006\000\002\020\011\000\002\020\012\000\002\020" +
    "\016\000\002\020\017\000\002\020\020\000\002\020\017" +
    "\000\002\021\007\000\002\021\006\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\004\000\002\024\005\000\002\024\005\000\002\024" +
    "\005\000\002\024\004\000\002\024\004\000\002\024\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017c\000\010\005\005\006\007\046\006\001\002\000" +
    "\004\002\000\001\002\000\006\013\u0108\046\u0109\001\002" +
    "\000\004\013\u0106\001\002\000\004\004\013\001\002\000" +
    "\004\002\012\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\011\014\001\002\000\004\012" +
    "\015\001\002\000\004\013\016\001\002\000\042\014\017" +
    "\035\031\036\023\037\046\042\047\046\030\050\037\052" +
    "\020\057\043\063\033\065\041\066\040\067\044\070\034" +
    "\071\021\073\036\001\002\000\004\002\ufffd\001\002\000" +
    "\004\011\330\001\002\000\004\011\323\001\002\000\004" +
    "\014\ufff3\001\002\000\004\046\320\001\002\000\004\014" +
    "\316\001\002\000\004\014\ufff7\001\002\000\004\014\ufff2" +
    "\001\002\000\004\014\ufff6\001\002\000\010\007\311\011" +
    "\310\027\053\001\002\000\006\007\302\046\303\001\002" +
    "\000\004\014\ufff5\001\002\000\004\011\274\001\002\000" +
    "\004\011\267\001\002\000\004\014\ufff1\001\002\000\004" +
    "\011\262\001\002\000\004\011\177\001\002\000\004\011" +
    "\172\001\002\000\004\011\165\001\002\000\004\014\ufff4" +
    "\001\002\000\004\011\126\001\002\000\004\011\121\001" +
    "\002\000\004\014\ufff0\001\002\000\004\046\116\001\002" +
    "\000\004\046\051\001\002\000\004\014\uffe4\001\002\000" +
    "\006\007\052\027\053\001\002\000\042\014\uffe8\035\031" +
    "\036\023\037\046\042\047\046\030\050\037\052\020\057" +
    "\043\063\033\065\041\066\040\067\044\070\034\071\021" +
    "\073\036\001\002\000\024\043\065\044\061\045\055\046" +
    "\060\055\062\056\057\062\064\064\054\072\063\001\002" +
    "\000\004\011\110\001\002\000\004\007\106\001\002\000" +
    "\004\007\104\001\002\000\012\007\uffc6\012\uffc6\024\uffc6" +
    "\025\uffc6\001\002\000\004\007\102\001\002\000\004\007" +
    "\100\001\002\000\012\007\uffc7\012\uffc7\024\uffc7\025\uffc7" +
    "\001\002\000\004\011\074\001\002\000\004\011\070\001" +
    "\002\000\004\007\066\001\002\000\042\014\uffdb\035\031" +
    "\036\023\037\046\042\047\046\030\050\037\052\020\057" +
    "\043\063\033\065\041\066\040\067\044\070\034\071\021" +
    "\073\036\001\002\000\004\014\uffe3\001\002\000\004\012" +
    "\071\001\002\000\004\007\072\001\002\000\042\014\uffd6" +
    "\035\031\036\023\037\046\042\047\046\030\050\037\052" +
    "\020\057\043\063\033\065\041\066\040\067\044\070\034" +
    "\071\021\073\036\001\002\000\004\014\uffde\001\002\000" +
    "\004\012\075\001\002\000\004\007\076\001\002\000\042" +
    "\014\uffd5\035\031\036\023\037\046\042\047\046\030\050" +
    "\037\052\020\057\043\063\033\065\041\066\040\067\044" +
    "\070\034\071\021\073\036\001\002\000\004\014\uffdd\001" +
    "\002\000\042\014\uffd9\035\031\036\023\037\046\042\047" +
    "\046\030\050\037\052\020\057\043\063\033\065\041\066" +
    "\040\067\044\070\034\071\021\073\036\001\002\000\004" +
    "\014\uffe1\001\002\000\042\014\uffd4\035\031\036\023\037" +
    "\046\042\047\046\030\050\037\052\020\057\043\063\033" +
    "\065\041\066\040\067\044\070\034\071\021\073\036\001" +
    "\002\000\004\014\uffdc\001\002\000\042\014\uffd8\035\031" +
    "\036\023\037\046\042\047\046\030\050\037\052\020\057" +
    "\043\063\033\065\041\066\040\067\044\070\034\071\021" +
    "\073\036\001\002\000\004\014\uffe0\001\002\000\042\014" +
    "\uffda\035\031\036\023\037\046\042\047\046\030\050\037" +
    "\052\020\057\043\063\033\065\041\066\040\067\044\070" +
    "\034\071\021\073\036\001\002\000\004\014\uffe2\001\002" +
    "\000\004\012\111\001\002\000\004\007\112\001\002\000" +
    "\042\014\uffd7\035\031\036\023\037\046\042\047\046\030" +
    "\050\037\052\020\057\043\063\033\065\041\066\040\067" +
    "\044\070\034\071\021\073\036\001\002\000\004\014\uffdf" +
    "\001\002\000\004\014\uffec\001\002\000\004\014\uffe5\001" +
    "\002\000\006\007\117\027\053\001\002\000\042\014\uffe9" +
    "\035\031\036\023\037\046\042\047\046\030\050\037\052" +
    "\020\057\043\063\033\065\041\066\040\067\044\070\034" +
    "\071\021\073\036\001\002\000\004\014\uffed\001\002\000" +
    "\006\055\062\056\057\001\002\000\004\012\123\001\002" +
    "\000\004\007\124\001\002\000\042\014\uff6b\035\031\036" +
    "\023\037\046\042\047\046\030\050\037\052\020\057\043" +
    "\063\033\065\041\066\040\067\044\070\034\071\021\073" +
    "\036\001\002\000\004\014\uff72\001\002\000\016\043\130" +
    "\044\127\045\131\046\133\055\062\056\057\001\002\000" +
    "\004\031\163\001\002\000\006\030\160\031\157\001\002" +
    "\000\004\030\155\001\002\000\004\012\146\001\002\000" +
    "\006\030\136\031\135\001\002\000\010\012\uffd3\024\uffd3" +
    "\025\uffd3\001\002\000\010\043\144\044\143\046\145\001" +
    "\002\000\014\043\137\045\140\046\141\055\062\056\057" +
    "\001\002\000\010\012\uffca\024\uffca\025\uffca\001\002\000" +
    "\010\012\uffcd\024\uffcd\025\uffcd\001\002\000\010\012\uffcb" +
    "\024\uffcb\025\uffcb\001\002\000\010\012\uffc8\024\uffc8\025" +
    "\uffc8\001\002\000\010\012\uffd0\024\uffd0\025\uffd0\001\002" +
    "\000\010\012\uffd1\024\uffd1\025\uffd1\001\002\000\010\012" +
    "\uffd2\024\uffd2\025\uffd2\001\002\000\004\013\147\001\002" +
    "\000\042\014\150\035\031\036\023\037\046\042\047\046" +
    "\030\050\037\052\020\057\043\063\033\065\041\066\040" +
    "\067\044\070\034\071\021\073\036\001\002\000\042\014" +
    "\uff9f\035\031\036\023\037\046\042\047\046\030\050\037" +
    "\052\020\057\043\063\033\065\041\066\040\067\044\070" +
    "\034\071\021\073\036\001\002\000\004\014\152\001\002" +
    "\000\042\014\uff9e\035\031\036\023\037\046\042\047\046" +
    "\030\050\037\052\020\057\043\063\033\065\041\066\040" +
    "\067\044\070\034\071\021\073\036\001\002\000\004\014" +
    "\uff9c\001\002\000\004\014\uff9d\001\002\000\004\046\156" +
    "\001\002\000\010\012\uffcc\024\uffcc\025\uffcc\001\002\000" +
    "\004\046\162\001\002\000\004\046\161\001\002\000\010" +
    "\012\uffc9\024\uffc9\025\uffc9\001\002\000\010\012\uffcf\024" +
    "\uffcf\025\uffcf\001\002\000\004\046\164\001\002\000\010" +
    "\012\uffce\024\uffce\025\uffce\001\002\000\006\055\062\056" +
    "\057\001\002\000\004\012\167\001\002\000\004\007\170" +
    "\001\002\000\042\014\uff6e\035\031\036\023\037\046\042" +
    "\047\046\030\050\037\052\020\057\043\063\033\065\041" +
    "\066\040\067\044\070\034\071\021\073\036\001\002\000" +
    "\004\014\uff75\001\002\000\006\055\062\056\057\001\002" +
    "\000\004\012\174\001\002\000\004\007\175\001\002\000" +
    "\042\014\uff6a\035\031\036\023\037\046\042\047\046\030" +
    "\050\037\052\020\057\043\063\033\065\041\066\040\067" +
    "\044\070\034\071\021\073\036\001\002\000\004\014\uff71" +
    "\001\002\000\020\026\200\043\130\044\127\045\131\046" +
    "\133\055\062\056\057\001\002\000\004\011\257\001\002" +
    "\000\004\012\233\001\002\000\010\012\204\024\203\025" +
    "\205\001\002\000\016\043\130\044\127\045\131\046\133" +
    "\055\062\056\057\001\002\000\004\013\207\001\002\000" +
    "\016\043\130\044\127\045\131\046\133\055\062\056\057" +
    "\001\002\000\004\012\uff67\001\002\000\042\014\210\035" +
    "\031\036\023\037\046\042\047\046\030\050\037\052\020" +
    "\057\043\063\033\065\041\066\040\067\044\070\034\071" +
    "\021\073\036\001\002\000\044\014\uffc2\035\031\036\023" +
    "\037\046\042\047\046\030\050\037\051\223\052\020\057" +
    "\043\063\033\065\041\066\040\067\044\070\034\071\021" +
    "\073\036\001\002\000\004\014\212\001\002\000\044\014" +
    "\uffc4\035\031\036\023\037\046\042\047\046\030\050\037" +
    "\051\213\052\020\057\043\063\033\065\041\066\040\067" +
    "\044\070\034\071\021\073\036\001\002\000\004\013\215" +
    "\001\002\000\004\014\uffc5\001\002\000\042\014\216\035" +
    "\031\036\023\037\046\042\047\046\030\050\037\052\020" +
    "\057\043\063\033\065\041\066\040\067\044\070\034\071" +
    "\021\073\036\001\002\000\042\014\uffc0\035\031\036\023" +
    "\037\046\042\047\046\030\050\037\052\020\057\043\063" +
    "\033\065\041\066\040\067\044\070\034\071\021\073\036" +
    "\001\002\000\004\014\220\001\002\000\042\014\uffbe\035" +
    "\031\036\023\037\046\042\047\046\030\050\037\052\020" +
    "\057\043\063\033\065\041\066\040\067\044\070\034\071" +
    "\021\073\036\001\002\000\004\014\uffbc\001\002\000\004" +
    "\014\uffbf\001\002\000\004\013\225\001\002\000\004\014" +
    "\uffc3\001\002\000\042\014\226\035\031\036\023\037\046" +
    "\042\047\046\030\050\037\052\020\057\043\063\033\065" +
    "\041\066\040\067\044\070\034\071\021\073\036\001\002" +
    "\000\004\014\uffc1\001\002\000\004\014\230\001\002\000" +
    "\042\014\uffbd\035\031\036\023\037\046\042\047\046\030" +
    "\050\037\052\020\057\043\063\033\065\041\066\040\067" +
    "\044\070\034\071\021\073\036\001\002\000\004\014\uffbb" +
    "\001\002\000\004\012\uff68\001\002\000\004\013\234\001" +
    "\002\000\042\014\235\035\031\036\023\037\046\042\047" +
    "\046\030\050\037\052\020\057\043\063\033\065\041\066" +
    "\040\067\044\070\034\071\021\073\036\001\002\000\044" +
    "\014\uffb7\035\031\036\023\037\046\042\047\046\030\050" +
    "\037\051\250\052\020\057\043\063\033\065\041\066\040" +
    "\067\044\070\034\071\021\073\036\001\002\000\004\014" +
    "\237\001\002\000\044\014\uffb9\035\031\036\023\037\046" +
    "\042\047\046\030\050\037\051\240\052\020\057\043\063" +
    "\033\065\041\066\040\067\044\070\034\071\021\073\036" +
    "\001\002\000\004\013\242\001\002\000\004\014\uffba\001" +
    "\002\000\042\014\243\035\031\036\023\037\046\042\047" +
    "\046\030\050\037\052\020\057\043\063\033\065\041\066" +
    "\040\067\044\070\034\071\021\073\036\001\002\000\042" +
    "\014\uffb5\035\031\036\023\037\046\042\047\046\030\050" +
    "\037\052\020\057\043\063\033\065\041\066\040\067\044" +
    "\070\034\071\021\073\036\001\002\000\004\014\245\001" +
    "\002\000\042\014\uffb3\035\031\036\023\037\046\042\047" +
    "\046\030\050\037\052\020\057\043\063\033\065\041\066" +
    "\040\067\044\070\034\071\021\073\036\001\002\000\004" +
    "\014\uffb1\001\002\000\004\014\uffb4\001\002\000\004\013" +
    "\252\001\002\000\004\014\uffb8\001\002\000\042\014\253" +
    "\035\031\036\023\037\046\042\047\046\030\050\037\052" +
    "\020\057\043\063\033\065\041\066\040\067\044\070\034" +
    "\071\021\073\036\001\002\000\004\014\uffb6\001\002\000" +
    "\004\014\255\001\002\000\042\014\uffb2\035\031\036\023" +
    "\037\046\042\047\046\030\050\037\052\020\057\043\063" +
    "\033\065\041\066\040\067\044\070\034\071\021\073\036" +
    "\001\002\000\004\014\uffb0\001\002\000\016\043\130\044" +
    "\127\045\131\046\133\055\062\056\057\001\002\000\004" +
    "\012\261\001\002\000\004\012\uff66\001\002\000\004\043" +
    "\263\001\002\000\004\012\264\001\002\000\004\007\265" +
    "\001\002\000\042\014\uff69\035\031\036\023\037\046\042" +
    "\047\046\030\050\037\052\020\057\043\063\033\065\041" +
    "\066\040\067\044\070\034\071\021\073\036\001\002\000" +
    "\004\014\uff70\001\002\000\006\055\062\056\057\001\002" +
    "\000\004\012\271\001\002\000\004\007\272\001\002\000" +
    "\042\014\uff6d\035\031\036\023\037\046\042\047\046\030" +
    "\050\037\052\020\057\043\063\033\065\041\066\040\067" +
    "\044\070\034\071\021\073\036\001\002\000\004\014\uff74" +
    "\001\002\000\006\055\062\056\057\001\002\000\004\012" +
    "\276\001\002\000\004\007\277\001\002\000\042\014\uff6f" +
    "\035\031\036\023\037\046\042\047\046\030\050\037\052" +
    "\020\057\043\063\033\065\041\066\040\067\044\070\034" +
    "\071\021\073\036\001\002\000\004\014\uff76\001\002\000" +
    "\004\014\uffe7\001\002\000\042\014\uff54\035\031\036\023" +
    "\037\046\042\047\046\030\050\037\052\020\057\043\063" +
    "\033\065\041\066\040\067\044\070\034\071\021\073\036" +
    "\001\002\000\046\007\305\014\uff53\027\053\035\031\036" +
    "\023\037\046\042\047\046\030\050\037\052\020\057\043" +
    "\063\033\065\041\066\040\067\044\070\034\071\021\073" +
    "\036\001\002\000\004\014\uff56\001\002\000\042\014\uffeb" +
    "\035\031\036\023\037\046\042\047\046\030\050\037\052" +
    "\020\057\043\063\033\065\041\066\040\067\044\070\034" +
    "\071\021\073\036\001\002\000\004\014\uffef\001\002\000" +
    "\004\014\uff57\001\002\000\004\012\313\001\002\000\042" +
    "\014\uff55\035\031\036\023\037\046\042\047\046\030\050" +
    "\037\052\020\057\043\063\033\065\041\066\040\067\044" +
    "\070\034\071\021\073\036\001\002\000\004\014\uff58\001" +
    "\002\000\004\007\314\001\002\000\042\014\uff5e\035\031" +
    "\036\023\037\046\042\047\046\030\050\037\052\020\057" +
    "\043\063\033\065\041\066\040\067\044\070\034\071\021" +
    "\073\036\001\002\000\004\014\uff5f\001\002\000\004\002" +
    "\ufffb\001\002\000\004\014\uffe6\001\002\000\006\007\321" +
    "\027\053\001\002\000\042\014\uffea\035\031\036\023\037" +
    "\046\042\047\046\030\050\037\052\020\057\043\063\033" +
    "\065\041\066\040\067\044\070\034\071\021\073\036\001" +
    "\002\000\004\014\uffee\001\002\000\006\055\062\056\057" +
    "\001\002\000\004\012\325\001\002\000\004\007\326\001" +
    "\002\000\042\014\uff6c\035\031\036\023\037\046\042\047" +
    "\046\030\050\037\052\020\057\043\063\033\065\041\066" +
    "\040\067\044\070\034\071\021\073\036\001\002\000\004" +
    "\014\uff73\001\002\000\004\035\331\001\002\000\004\046" +
    "\332\001\002\000\004\027\333\001\002\000\004\043\334" +
    "\001\002\000\004\007\335\001\002\000\004\046\336\001" +
    "\002\000\004\031\337\001\002\000\006\043\340\046\341" +
    "\001\002\000\004\007\364\001\002\000\004\007\342\001" +
    "\002\000\004\046\343\001\002\000\006\032\344\033\345" +
    "\001\002\000\004\012\355\001\002\000\004\012\346\001" +
    "\002\000\004\013\347\001\002\000\042\014\350\035\031" +
    "\036\023\037\046\042\047\046\030\050\037\052\020\057" +
    "\043\063\033\065\041\066\040\067\044\070\034\071\021" +
    "\073\036\001\002\000\042\014\uffa1\035\031\036\023\037" +
    "\046\042\047\046\030\050\037\052\020\057\043\063\033" +
    "\065\041\066\040\067\044\070\034\071\021\073\036\001" +
    "\002\000\004\014\352\001\002\000\042\014\uffa2\035\031" +
    "\036\023\037\046\042\047\046\030\050\037\052\020\057" +
    "\043\063\033\065\041\066\040\067\044\070\034\071\021" +
    "\073\036\001\002\000\004\014\uffa3\001\002\000\004\014" +
    "\uffa0\001\002\000\004\013\356\001\002\000\042\014\357" +
    "\035\031\036\023\037\046\042\047\046\030\050\037\052" +
    "\020\057\043\063\033\065\041\066\040\067\044\070\034" +
    "\071\021\073\036\001\002\000\042\014\uffa9\035\031\036" +
    "\023\037\046\042\047\046\030\050\037\052\020\057\043" +
    "\063\033\065\041\066\040\067\044\070\034\071\021\073" +
    "\036\001\002\000\004\014\361\001\002\000\042\014\uffaa" +
    "\035\031\036\023\037\046\042\047\046\030\050\037\052" +
    "\020\057\043\063\033\065\041\066\040\067\044\070\034" +
    "\071\021\073\036\001\002\000\004\014\uffab\001\002\000" +
    "\004\014\uffa8\001\002\000\004\046\365\001\002\000\006" +
    "\032\366\033\367\001\002\000\004\012\377\001\002\000" +
    "\004\012\370\001\002\000\004\013\371\001\002\000\042" +
    "\014\372\035\031\036\023\037\046\042\047\046\030\050" +
    "\037\052\020\057\043\063\033\065\041\066\040\067\044" +
    "\070\034\071\021\073\036\001\002\000\042\014\uffa5\035" +
    "\031\036\023\037\046\042\047\046\030\050\037\052\020" +
    "\057\043\063\033\065\041\066\040\067\044\070\034\071" +
    "\021\073\036\001\002\000\004\014\374\001\002\000\042" +
    "\014\uffa6\035\031\036\023\037\046\042\047\046\030\050" +
    "\037\052\020\057\043\063\033\065\041\066\040\067\044" +
    "\070\034\071\021\073\036\001\002\000\004\014\uffa7\001" +
    "\002\000\004\014\uffa4\001\002\000\004\013\u0100\001\002" +
    "\000\042\014\u0101\035\031\036\023\037\046\042\047\046" +
    "\030\050\037\052\020\057\043\063\033\065\041\066\040" +
    "\067\044\070\034\071\021\073\036\001\002\000\042\014" +
    "\uffad\035\031\036\023\037\046\042\047\046\030\050\037" +
    "\052\020\057\043\063\033\065\041\066\040\067\044\070" +
    "\034\071\021\073\036\001\002\000\004\014\u0103\001\002" +
    "\000\042\014\uffae\035\031\036\023\037\046\042\047\046" +
    "\030\050\037\052\020\057\043\063\033\065\041\066\040" +
    "\067\044\070\034\071\021\073\036\001\002\000\004\014" +
    "\uffaf\001\002\000\004\014\uffac\001\002\000\004\014\u0107" +
    "\001\002\000\004\002\uff5d\001\002\000\004\014\u017e\001" +
    "\002\000\010\002\uff59\013\u010a\014\u010b\001\002\000\022" +
    "\002\uff5b\006\u0113\014\u010c\035\u0110\036\u010d\037\u0114\042" +
    "\u010f\046\u0112\001\002\000\004\002\uff5a\001\002\000\004" +
    "\002\ufffe\001\002\000\004\046\u017b\001\002\000\004\006" +
    "\u0172\001\002\000\004\046\u016f\001\002\000\004\046\u016a" +
    "\001\002\000\004\014\u0169\001\002\000\004\027\u0123\001" +
    "\002\000\006\004\u0148\046\u0147\001\002\000\004\046\u0121" +
    "\001\002\000\004\014\u011f\001\002\000\004\006\u0117\001" +
    "\002\000\004\004\u0118\001\002\000\004\011\u0119\001\002" +
    "\000\004\012\u011a\001\002\000\004\013\u011b\001\002\000" +
    "\042\014\u011c\035\031\036\023\037\046\042\047\046\030" +
    "\050\037\052\020\057\043\063\033\065\041\066\040\067" +
    "\044\070\034\071\021\073\036\001\002\000\004\014\uff9b" +
    "\001\002\000\004\014\u011e\001\002\000\004\014\uff9a\001" +
    "\002\000\004\002\ufff9\001\002\000\004\006\uff8d\001\002" +
    "\000\006\007\u0122\027\u0123\001\002\000\014\006\uff91\035" +
    "\u0110\036\u010d\037\u0114\042\u010f\001\002\000\022\043\u012a" +
    "\044\u0127\045\u0124\055\062\056\057\062\u0129\064\u0125\072" +
    "\u0128\001\002\000\004\007\u0143\001\002\000\004\011\u013e" +
    "\001\002\000\004\007\u013b\001\002\000\004\007\u0138\001" +
    "\002\000\004\011\u0133\001\002\000\004\011\u012e\001\002" +
    "\000\004\007\u012b\001\002\000\016\006\uff7d\035\u0110\036" +
    "\u010d\037\u0114\042\u010f\046\u0112\001\002\000\004\006\uff8b" +
    "\001\002\000\004\006\uff84\001\002\000\004\012\u012f\001" +
    "\002\000\004\007\u0130\001\002\000\016\006\uff78\035\u0110" +
    "\036\u010d\037\u0114\042\u010f\046\u0112\001\002\000\004\006" +
    "\uff86\001\002\000\004\006\uff7f\001\002\000\004\012\u0134" +
    "\001\002\000\004\007\u0135\001\002\000\016\006\uff77\035" +
    "\u0110\036\u010d\037\u0114\042\u010f\046\u0112\001\002\000\004" +
    "\006\uff85\001\002\000\004\006\uff7e\001\002\000\016\006" +
    "\uff7b\035\u0110\036\u010d\037\u0114\042\u010f\046\u0112\001\002" +
    "\000\004\006\uff89\001\002\000\004\006\uff82\001\002\000" +
    "\016\006\uff7a\035\u0110\036\u010d\037\u0114\042\u010f\046\u0112" +
    "\001\002\000\004\006\uff88\001\002\000\004\006\uff81\001" +
    "\002\000\004\012\u013f\001\002\000\004\007\u0140\001\002" +
    "\000\016\006\uff79\035\u0110\036\u010d\037\u0114\042\u010f\046" +
    "\u0112\001\002\000\004\006\uff87\001\002\000\004\006\uff80" +
    "\001\002\000\016\006\uff7c\035\u0110\036\u010d\037\u0114\042" +
    "\u010f\046\u0112\001\002\000\004\006\uff8a\001\002\000\004" +
    "\006\uff83\001\002\000\004\006\uff95\001\002\000\004\011" +
    "\u0151\001\002\000\004\011\u0149\001\002\000\004\012\u014a" +
    "\001\002\000\004\013\u014b\001\002\000\042\014\u014c\035" +
    "\031\036\023\037\046\042\047\046\030\050\037\052\020" +
    "\057\043\063\033\065\041\066\040\067\044\070\034\071" +
    "\021\073\036\001\002\000\004\014\u0150\001\002\000\004" +
    "\014\u014e\001\002\000\004\014\u014f\001\002\000\004\002" +
    "\ufffa\001\002\000\004\002\ufffc\001\002\000\004\012\u0152" +
    "\001\002\000\004\013\u0153\001\002\000\042\014\u0154\035" +
    "\031\036\023\037\046\042\047\046\030\050\037\052\020" +
    "\057\043\063\033\065\041\066\040\067\044\070\034\071" +
    "\021\073\036\001\002\000\004\006\u0161\001\002\000\004" +
    "\014\u0156\001\002\000\004\006\u0158\001\002\000\004\014" +
    "\uff64\001\002\000\006\004\u0159\046\u0147\001\002\000\004" +
    "\011\u015a\001\002\000\004\012\u015b\001\002\000\004\013" +
    "\u015c\001\002\000\042\014\u015d\035\031\036\023\037\046" +
    "\042\047\046\030\050\037\052\020\057\043\063\033\065" +
    "\041\066\040\067\044\070\034\071\021\073\036\001\002" +
    "\000\004\014\uff62\001\002\000\004\014\u015f\001\002\000" +
    "\004\014\uff61\001\002\000\004\014\uff65\001\002\000\006" +
    "\004\u0162\046\u0147\001\002\000\004\011\u0163\001\002\000" +
    "\004\012\u0164\001\002\000\004\013\u0165\001\002\000\042" +
    "\014\u0166\035\031\036\023\037\046\042\047\046\030\050" +
    "\037\052\020\057\043\063\033\065\041\066\040\067\044" +
    "\070\034\071\021\073\036\001\002\000\004\014\uff63\001" +
    "\002\000\004\014\u0168\001\002\000\004\014\uff60\001\002" +
    "\000\004\002\ufff8\001\002\000\006\007\u016c\027\u0123\001" +
    "\002\000\004\006\uff8f\001\002\000\014\006\uff93\035\u0110" +
    "\036\u010d\037\u0114\042\u010f\001\002\000\004\006\uff97\001" +
    "\002\000\004\006\uff8c\001\002\000\006\007\u0170\027\u0123" +
    "\001\002\000\014\006\uff90\035\u0110\036\u010d\037\u0114\042" +
    "\u010f\001\002\000\004\006\uff94\001\002\000\004\004\u0173" +
    "\001\002\000\004\011\u0174\001\002\000\004\012\u0175\001" +
    "\002\000\004\013\u0176\001\002\000\042\014\u0177\035\031" +
    "\036\023\037\046\042\047\046\030\050\037\052\020\057" +
    "\043\063\033\065\041\066\040\067\044\070\034\071\021" +
    "\073\036\001\002\000\004\014\uff99\001\002\000\004\014" +
    "\u0179\001\002\000\004\014\uff98\001\002\000\004\006\uff8e" +
    "\001\002\000\006\007\u017c\027\u0123\001\002\000\014\006" +
    "\uff92\035\u0110\036\u010d\037\u0114\042\u010f\001\002\000\004" +
    "\006\uff96\001\002\000\004\002\uff5c\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017c\000\010\002\007\022\003\023\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\023\004\024\007\031\010\041\011\021\014" +
    "\025\016\034\021\044\024\026\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\316\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\300\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\114\001\001\000\004\016\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\113\004" +
    "\024\007\031\010\041\011\021\014\025\016\034\021\044" +
    "\024\026\001\001\000\004\006\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\066\004\024\007\031\010\041\011\021\014\025\016" +
    "\034\021\044\024\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\072\004\024\007" +
    "\031\010\041\011\021\014\025\016\034\021\044\024\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\076\004\024\007\031\010\041\011\021" +
    "\014\025\016\034\021\044\024\026\001\001\000\002\001" +
    "\001\000\024\003\100\004\024\007\031\010\041\011\021" +
    "\014\025\016\034\021\044\024\026\001\001\000\002\001" +
    "\001\000\024\003\102\004\024\007\031\010\041\011\021" +
    "\014\025\016\034\021\044\024\026\001\001\000\002\001" +
    "\001\000\024\003\104\004\024\007\031\010\041\011\021" +
    "\014\025\016\034\021\044\024\026\001\001\000\002\001" +
    "\001\000\024\003\106\004\024\007\031\010\041\011\021" +
    "\014\025\016\034\021\044\024\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\112" +
    "\004\024\007\031\010\041\011\021\014\025\016\034\021" +
    "\044\024\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\117\004" +
    "\024\007\031\010\041\011\021\014\025\016\034\021\044" +
    "\024\026\001\001\000\002\001\001\000\004\006\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\124" +
    "\004\024\007\031\010\041\011\021\014\025\016\034\021" +
    "\044\024\026\001\001\000\002\001\001\000\006\005\131" +
    "\006\133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\006\141\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\150\004\024\007\031" +
    "\010\041\011\021\014\025\016\034\021\044\024\026\001" +
    "\001\000\024\003\153\004\024\007\031\010\041\011\021" +
    "\014\025\016\034\021\044\024\026\001\001\000\002\001" +
    "\001\000\024\003\152\004\024\007\031\010\041\011\021" +
    "\014\025\016\034\021\044\024\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\170\004\024\007\031\010\041\011\021\014\025" +
    "\016\034\021\044\024\026\001\001\000\002\001\001\000" +
    "\004\006\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\175\004\024\007\031\010\041\011\021\014" +
    "\025\016\034\021\044\024\026\001\001\000\002\001\001" +
    "\000\010\005\201\006\133\017\200\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\231" +
    "\006\133\001\001\000\002\001\001\000\006\005\205\006" +
    "\133\001\001\000\002\001\001\000\024\003\210\004\024" +
    "\007\031\010\041\011\021\014\025\016\034\021\044\024" +
    "\026\001\001\000\024\003\223\004\024\007\031\010\041" +
    "\011\021\014\025\016\034\021\044\024\026\001\001\000" +
    "\002\001\001\000\024\003\213\004\024\007\031\010\041" +
    "\011\021\014\025\016\034\021\044\024\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\003\216\004\024" +
    "\007\031\010\041\011\021\014\025\016\034\021\044\024" +
    "\026\001\001\000\024\003\221\004\024\007\031\010\041" +
    "\011\021\014\025\016\034\021\044\024\026\001\001\000" +
    "\002\001\001\000\024\003\220\004\024\007\031\010\041" +
    "\011\021\014\025\016\034\021\044\024\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\226\004\024\007\031\010\041\011" +
    "\021\014\025\016\034\021\044\024\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\230\004\024\007" +
    "\031\010\041\011\021\014\025\016\034\021\044\024\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\235\004\024\007\031\010\041\011\021" +
    "\014\025\016\034\021\044\024\026\001\001\000\024\003" +
    "\250\004\024\007\031\010\041\011\021\014\025\016\034" +
    "\021\044\024\026\001\001\000\002\001\001\000\024\003" +
    "\240\004\024\007\031\010\041\011\021\014\025\016\034" +
    "\021\044\024\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\003\243\004\024\007\031\010\041\011\021" +
    "\014\025\016\034\021\044\024\026\001\001\000\024\003" +
    "\246\004\024\007\031\010\041\011\021\014\025\016\034" +
    "\021\044\024\026\001\001\000\002\001\001\000\024\003" +
    "\245\004\024\007\031\010\041\011\021\014\025\016\034" +
    "\021\044\024\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\253" +
    "\004\024\007\031\010\041\011\021\014\025\016\034\021" +
    "\044\024\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\255\004\024\007\031\010\041\011\021\014" +
    "\025\016\034\021\044\024\026\001\001\000\002\001\001" +
    "\000\006\005\257\006\133\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\265\004\024\007\031\010\041\011" +
    "\021\014\025\016\034\021\044\024\026\001\001\000\002" +
    "\001\001\000\004\006\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\272\004\024\007\031\010\041" +
    "\011\021\014\025\016\034\021\044\024\026\001\001\000" +
    "\002\001\001\000\004\006\274\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\277\004\024\007\031\010" +
    "\041\011\021\014\025\016\034\021\044\024\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\306\004" +
    "\024\007\031\010\041\011\021\014\025\016\034\021\044" +
    "\024\026\001\001\000\024\003\303\004\024\007\031\010" +
    "\041\011\021\014\025\016\034\021\044\024\026\001\001" +
    "\000\002\001\001\000\024\003\305\004\024\007\031\010" +
    "\041\011\021\014\025\016\034\021\044\024\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\003\311\004\024\007\031\010\041\011\021\014\025" +
    "\016\034\021\044\024\026\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\314\004\024\007\031\010\041" +
    "\011\021\014\025\016\034\021\044\024\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\321\004\024\007\031\010\041\011" +
    "\021\014\025\016\034\021\044\024\026\001\001\000\002" +
    "\001\001\000\004\006\323\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\326\004\024\007\031\010\041" +
    "\011\021\014\025\016\034\021\044\024\026\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\003\350\004\024\007\031\010\041\011\021\014\025\016" +
    "\034\021\044\024\026\001\001\000\024\003\353\004\024" +
    "\007\031\010\041\011\021\014\025\016\034\021\044\024" +
    "\026\001\001\000\002\001\001\000\024\003\352\004\024" +
    "\007\031\010\041\011\021\014\025\016\034\021\044\024" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\357\004\024\007\031\010\041\011" +
    "\021\014\025\016\034\021\044\024\026\001\001\000\024" +
    "\003\362\004\024\007\031\010\041\011\021\014\025\016" +
    "\034\021\044\024\026\001\001\000\002\001\001\000\024" +
    "\003\361\004\024\007\031\010\041\011\021\014\025\016" +
    "\034\021\044\024\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\372" +
    "\004\024\007\031\010\041\011\021\014\025\016\034\021" +
    "\044\024\026\001\001\000\024\003\375\004\024\007\031" +
    "\010\041\011\021\014\025\016\034\021\044\024\026\001" +
    "\001\000\002\001\001\000\024\003\374\004\024\007\031" +
    "\010\041\011\021\014\025\016\034\021\044\024\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\024\003\u0101\004\024\007\031\010\041\011\021\014" +
    "\025\016\034\021\044\024\026\001\001\000\024\003\u0104" +
    "\004\024\007\031\010\041\011\021\014\025\016\034\021" +
    "\044\024\026\001\001\000\002\001\001\000\024\003\u0103" +
    "\004\024\007\031\010\041\011\021\014\025\016\034\021" +
    "\044\024\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\012\u0114\013\u0115\015\u010d\020\u0110" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\u0179\001\001\000\002\001\001\000\004\015\u016d\001\001" +
    "\000\004\015\u016a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\u011f\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\u011c" +
    "\004\024\007\031\010\041\011\021\014\025\016\034\021" +
    "\044\024\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0145\001\001\000\004\006\u0125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u012b\015\u012c\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\u0130\015\u0131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u0135\015\u0136\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\u0138\015\u0139\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\u013b\015\u013c\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\u0140\015\u0141\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\u0143\015\u0144" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\u014c\004\024\007\031\010" +
    "\041\011\021\014\025\016\034\021\044\024\026\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\u0154\004\024\007\031\010\041\011" +
    "\021\014\025\016\034\021\044\024\026\001\001\000\004" +
    "\020\u015f\001\001\000\002\001\001\000\004\020\u0156\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\003\u015d\004" +
    "\024\007\031\010\041\011\021\014\025\016\034\021\044" +
    "\024\026\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\u0166\004\024\007\031\010\041\011\021\014\025\016\034" +
    "\021\044\024\026\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u016c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\u0170" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\003\u0177" +
    "\004\024\007\031\010\041\011\021\014\025\016\034\021" +
    "\044\024\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u017c\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
    private Symbol s;        

    public void syntax_error(Symbol s){
        //this.s = s;

        Errores e = new Errores("Error sintactico en la linea "+(s.right+1)+"\n\tSintaxis invalida [ " + s.value + " ]");
        FeedIT.notificar(e);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Errores e = new Errores("Error sintactico no recuperable en la Linea " + (s.right+1) + "\n\tSintaxis invalida [ " + s.value +" ]");
        FeedIT.notificar(e);
        
    }

    public void report_error(String message, Object info){ }    
    public void report_fatal_error(String message, Object info){ }

    public Symbol getS(){        
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {

   
    String codObjeto = "";
    Stack pilaInicio = new Stack();       
    Stack pilaSent = new Stack();       
    Stack pilaFin = new Stack();      
    int i = 1, sentAux;
    String incAux;

    boolean statusDec, statusTipo, statusOp;
    String auxObj = "";
    String auxRec = "";

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ERRORDECLARACION ::= Int Identificador 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ERRORDECLARACION ::= Int P_coma 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tInt P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ERRORDECLARACION ::= Identificador P_coma 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un tipo de dato");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ERRORDECLARACION ::= Int Identificador SENTENCIA 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ERRORDECLARACION ::= Int P_coma SENTENCIA 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tInt P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ERRORDECLARACION ::= Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un tipo de dato");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ERRORINICIO ::= Class Identificador 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Identificador");
        Errores e = new Errores("Error sintactico, Se esperaba una llave de Apertura");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ERRORINICIO ::= Class Identificador Llave_C 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Identificador Llave_C");
        Errores e = new Errores("Error sintactico, Se esperaba una llave de Apertura");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ERRORINICIO ::= Class Identificador Llave_A 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Identificador Llave_A");
        Errores e = new Errores("Error sintactico, Se esperaba una llave de cierre");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ERRORINICIO ::= Class Llave_A Llave_C 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Llave_A Llave_C");
        Errores e = new Errores("Error sintactico, Se esperaba [Identificador]");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ERRORINICIO ::= Identificador Llave_A Llave_C 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador Llave_A Llave_C");
        Errores e = new Errores("Error sintactico, Se esperaba [class]");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // LLAMARFUN ::= Identificador Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMARFUN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // LLAMARFUN ::= Identificador Parentesis_A Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMARFUN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A Llave_C Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A Llave_C Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C CREAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A Llave_C CREAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LOGICAS ::= Not Parentesis_A SENTENCIABOOLEANA Parentesis_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // LOGICAS ::= SENTENCIABOOLEANA Or SENTENCIABOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // LOGICAS ::= SENTENCIABOOLEANA And SENTENCIABOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ACCIONES ::= Time Parentesis_A Numero Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ACCIONES ::= Fpremio Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ACCIONES ::= Fmasaje Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ACCIONES ::= Fjuguete Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ACCIONES ::= Fluz Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ACCIONES ::= Fcomer Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ACCIONES ::= Fagua Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ACCIONES ::= Time Parentesis_A Numero Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ACCIONES ::= Fpremio Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ACCIONES ::= Fmasaje Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ACCIONES ::= Fjuguete Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ACCIONES ::= Fluz Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ACCIONES ::= Fcomer Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ACCIONES ::= Fagua Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ASIGNAG ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ASIGNAG ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ASIGNAG ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIGNAG ::= Identificador Asignacion BOOLEAN P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIGNAG ::= Identificador Asignacion Flotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNAG ::= Identificador Asignacion Texto P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNAG ::= Identificador Asignacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGNAG ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ASIGNAG ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ASIGNAG ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ASIGNAG ::= Identificador Asignacion BOOLEAN P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ASIGNAG ::= Identificador Asignacion Flotante P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ASIGNAG ::= Identificador Asignacion Texto P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ASIGNAG ::= Identificador Asignacion Numero P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ASIGNAG ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ASIGNAG ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNAG ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ASIGNAG ::= Identificador Asignacion BOOLEAN P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNAG ::= Identificador Asignacion Flotante P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ASIGNAG ::= Identificador Asignacion Texto P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ASIGNAG ::= Identificador Asignacion Numero P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VARIABLESG ::= Boolean ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VARIABLESG ::= String ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VARIABLESG ::= Float ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VARIABLESG ::= Int ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VARIABLESG ::= Boolean Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VARIABLESG ::= String Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VARIABLESG ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VARIABLESG ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VARIABLESG ::= Boolean Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VARIABLESG ::= String Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VARIABLESG ::= Float Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VARIABLESG ::= Int Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VARIABLESGF ::= ASIGNAG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VARIABLESGF ::= ASIGNAG Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VARIABLESGF ::= VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VARIABLESGF ::= VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BOOLEAN ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // BOOLEAN ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIABOOLEANA ::= Identificador Igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIABOOLEANA ::= Numero Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIABOOLEANA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIABOOLEANA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIABOOLEANA ::= Texto Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIABOOLEANA ::= Identificador Igual Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIABOOLEANA ::= Flotante OpR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIABOOLEANA ::= Numero OpR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIABOOLEANA ::= Identificador OpR Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIABOOLEANA ::= Identificador OpR Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIABOOLEANA ::= Identificador OpR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIABOOLEANA ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= Identificador Asignacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= Identificador Asignacion BOOLEAN P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= Identificador Asignacion Flotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= Identificador Asignacion Texto P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= Identificador Asignacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= Identificador Asignacion Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= Identificador Asignacion BOOLEAN P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= Identificador Asignacion Flotante P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION ::= Identificador Asignacion Texto P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ASIGNACION ::= Identificador Asignacion Numero P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Boolean ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= String ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Float ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Int ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Boolean Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= String Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tInt Identificador P_coma");
        System.out.println("Producción añadida: \n\tInt Identificador P_coma");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Boolean Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= String Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Float Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= Int Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tInt Identificador P_coma SENTENCIA");
        System.out.println("Producción añadida: \n\tInt Identificador P_coma SENTENCIA");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= LLAMARFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= ACCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ERRORDECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIACLASE ::= Class Identificador Llave_A CREAFUN Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A CREAFUN Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIACLASE ::= Class Identificador Llave_A VARIABLESGF Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A VARIABLESGF Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIACLASE ::= Class Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIACLASE ::= Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tFun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIACLASE ::= Class Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A Llave_C Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A Llave_C Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIACLASE ::= Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tFun Main Parentesis_A Parentesis_C Llave_A Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIACLASE ::= Class Identificador Llave_A Llave_C 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A Llave_C");
        Objetos o = new Objetos(id,td,idright,idleft);
        System.out.println("Objeto creado");
        FeedIT.objetos.add(o);
        System.out.println("Objeto agregado");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= ERRORINICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIACLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

