
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Dec 06 09:51:39 MST 2021
//----------------------------------------------------

package analizador_sintactico;

import interfaces.FeedIT;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Dec 06 09:51:39 MST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\006\000\002\002" +
    "\010\000\002\002\014\000\002\002\011\000\002\002\015" +
    "\000\002\002\007\000\002\003\003\000\002\003\003\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\005\000\002\004\005\000\002\004\005" +
    "\000\002\004\005\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\005\003\000\002\005\003" +
    "\000\002\005\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\006\012\000\002\006\011\000" +
    "\002\006\011\000\002\006\010\000\002\006\013\000\002" +
    "\006\014\000\002\006\015\000\002\006\015\000\002\006" +
    "\014\000\002\006\016\000\002\006\015\000\002\007\024" +
    "\000\002\007\023\000\002\007\022\000\002\007\023\000" +
    "\002\007\024\000\002\007\023\000\002\007\022\000\002" +
    "\007\023\000\002\007\024\000\002\007\023\000\002\007" +
    "\022\000\002\007\023\000\002\007\024\000\002\007\023" +
    "\000\002\007\022\000\002\007\023\000\002\010\010\000" +
    "\002\010\011\000\002\010\011\000\002\010\012\000\002" +
    "\011\015\000\002\011\014\000\002\011\013\000\002\011" +
    "\015\000\002\011\013\000\002\011\015\000\002\011\013" +
    "\000\002\011\015\000\002\011\013\000\002\011\017\000" +
    "\002\011\016\000\002\011\015\000\002\011\016\000\002" +
    "\011\017\000\002\011\015\000\002\011\017\000\002\011" +
    "\015\000\002\011\017\000\002\011\015\000\002\011\017" +
    "\000\002\011\015\000\002\012\006\000\002\012\006\000" +
    "\002\012\006\000\002\012\006\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\010\000\002\012\010\000\002\012\010\000\002\012\010" +
    "\000\002\012\010\000\002\012\007\000\002\012\007\000" +
    "\002\012\007\000\002\012\007\000\002\012\007\000\002" +
    "\013\010\000\002\013\010\000\002\013\010\000\002\013" +
    "\010\000\002\013\010\000\002\013\010\000\002\013\010" +
    "\000\002\013\010\000\002\013\010\000\002\013\010\000" +
    "\002\013\010\000\002\013\010\000\002\013\010\000\002" +
    "\013\007\000\002\013\007\000\002\013\007\000\002\013" +
    "\007\000\002\013\007\000\002\013\007\000\002\013\007" +
    "\000\002\013\007\000\002\013\007\000\002\013\007\000" +
    "\002\013\007\000\002\013\007\000\002\013\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u01b0\000\006\005\004\006\005\001\002\000\004\046" +
    "\345\001\002\000\004\004\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\011\011\001" +
    "\002\000\004\012\012\001\002\000\004\013\013\001\002" +
    "\000\040\014\014\035\025\036\020\037\037\042\040\050" +
    "\031\052\015\057\035\063\026\065\033\066\032\067\036" +
    "\070\027\071\016\073\030\001\002\000\004\002\uffff\001" +
    "\002\000\004\011\267\001\002\000\004\011\256\001\002" +
    "\000\004\014\ufff7\001\002\000\004\046\247\001\002\000" +
    "\004\014\ufffa\001\002\000\004\014\246\001\002\000\004" +
    "\014\ufff6\001\002\000\004\014\ufff9\001\002\000\004\046" +
    "\237\001\002\000\004\011\226\001\002\000\004\011\215" +
    "\001\002\000\004\011\210\001\002\000\004\011\162\001" +
    "\002\000\004\011\151\001\002\000\004\011\140\001\002" +
    "\000\004\014\ufff8\001\002\000\004\011\073\001\002\000" +
    "\004\011\062\001\002\000\004\046\053\001\002\000\004" +
    "\046\041\001\002\000\006\007\042\027\043\001\002\000" +
    "\040\014\uffee\035\025\036\020\037\037\042\040\050\031" +
    "\052\015\057\035\063\026\065\033\066\032\067\036\070" +
    "\027\071\016\073\030\001\002\000\006\055\045\056\044" +
    "\001\002\000\004\007\050\001\002\000\004\007\046\001" +
    "\002\000\040\014\uffe5\035\025\036\020\037\037\042\040" +
    "\050\031\052\015\057\035\063\026\065\033\066\032\067" +
    "\036\070\027\071\016\073\030\001\002\000\004\014\uffea" +
    "\001\002\000\040\014\uffe4\035\025\036\020\037\037\042" +
    "\040\050\031\052\015\057\035\063\026\065\033\066\032" +
    "\067\036\070\027\071\016\073\030\001\002\000\004\014" +
    "\uffe9\001\002\000\004\014\ufff2\001\002\000\006\007\054" +
    "\027\055\001\002\000\040\014\uffef\035\025\036\020\037" +
    "\037\042\040\050\031\052\015\057\035\063\026\065\033" +
    "\066\032\067\036\070\027\071\016\073\030\001\002\000" +
    "\004\045\056\001\002\000\004\007\057\001\002\000\040" +
    "\014\uffe6\035\025\036\020\037\037\042\040\050\031\052" +
    "\015\057\035\063\026\065\033\066\032\067\036\070\027" +
    "\071\016\073\030\001\002\000\004\014\uffeb\001\002\000" +
    "\004\014\ufff3\001\002\000\006\055\064\056\063\001\002" +
    "\000\004\012\070\001\002\000\004\012\065\001\002\000" +
    "\004\007\066\001\002\000\040\014\uff78\035\025\036\020" +
    "\037\037\042\040\050\031\052\015\057\035\063\026\065" +
    "\033\066\032\067\036\070\027\071\016\073\030\001\002" +
    "\000\004\014\uff85\001\002\000\004\007\071\001\002\000" +
    "\040\014\uff77\035\025\036\020\037\037\042\040\050\031" +
    "\052\015\057\035\063\026\065\033\066\032\067\036\070" +
    "\027\071\016\073\030\001\002\000\004\014\uff84\001\002" +
    "\000\016\043\075\044\074\045\077\046\102\055\101\056" +
    "\076\001\002\000\004\031\136\001\002\000\006\030\133" +
    "\031\132\001\002\000\006\012\uffe2\030\130\001\002\000" +
    "\004\030\126\001\002\000\004\012\117\001\002\000\006" +
    "\012\uffe3\030\115\001\002\000\006\030\104\031\103\001" +
    "\002\000\010\043\112\044\113\046\114\001\002\000\014" +
    "\043\105\045\107\046\111\055\110\056\106\001\002\000" +
    "\004\012\uffd9\001\002\000\004\012\uffd6\001\002\000\004" +
    "\012\uffdc\001\002\000\004\012\uffd7\001\002\000\004\012" +
    "\uffda\001\002\000\004\012\uffe0\001\002\000\004\012\uffdf" +
    "\001\002\000\004\012\uffe1\001\002\000\004\046\116\001" +
    "\002\000\004\012\uffd5\001\002\000\004\013\120\001\002" +
    "\000\040\014\121\035\025\036\020\037\037\042\040\050" +
    "\031\052\015\057\035\063\026\065\033\066\032\067\036" +
    "\070\027\071\016\073\030\001\002\000\040\014\uffb8\035" +
    "\025\036\020\037\037\042\040\050\031\052\015\057\035" +
    "\063\026\065\033\066\032\067\036\070\027\071\016\073" +
    "\030\001\002\000\004\014\123\001\002\000\040\014\uffb7" +
    "\035\025\036\020\037\037\042\040\050\031\052\015\057" +
    "\035\063\026\065\033\066\032\067\036\070\027\071\016" +
    "\073\030\001\002\000\004\014\uffb5\001\002\000\004\014" +
    "\uffb6\001\002\000\004\046\127\001\002\000\004\012\uffdb" +
    "\001\002\000\004\046\131\001\002\000\004\012\uffd4\001" +
    "\002\000\004\046\135\001\002\000\004\046\134\001\002" +
    "\000\004\012\uffd8\001\002\000\004\012\uffde\001\002\000" +
    "\004\046\137\001\002\000\004\012\uffdd\001\002\000\006" +
    "\055\142\056\141\001\002\000\004\012\146\001\002\000" +
    "\004\012\143\001\002\000\004\007\144\001\002\000\040" +
    "\014\uff7e\035\025\036\020\037\037\042\040\050\031\052" +
    "\015\057\035\063\026\065\033\066\032\067\036\070\027" +
    "\071\016\073\030\001\002\000\004\014\uff8b\001\002\000" +
    "\004\007\147\001\002\000\040\014\uff7d\035\025\036\020" +
    "\037\037\042\040\050\031\052\015\057\035\063\026\065" +
    "\033\066\032\067\036\070\027\071\016\073\030\001\002" +
    "\000\004\014\uff8a\001\002\000\006\055\153\056\152\001" +
    "\002\000\004\012\157\001\002\000\004\012\154\001\002" +
    "\000\004\007\155\001\002\000\040\014\uff76\035\025\036" +
    "\020\037\037\042\040\050\031\052\015\057\035\063\026" +
    "\065\033\066\032\067\036\070\027\071\016\073\030\001" +
    "\002\000\004\014\uff83\001\002\000\004\007\160\001\002" +
    "\000\040\014\uff75\035\025\036\020\037\037\042\040\050" +
    "\031\052\015\057\035\063\026\065\033\066\032\067\036" +
    "\070\027\071\016\073\030\001\002\000\004\014\uff82\001" +
    "\002\000\016\043\075\044\074\045\077\046\102\055\101" +
    "\056\076\001\002\000\004\012\164\001\002\000\004\013" +
    "\165\001\002\000\040\014\166\035\025\036\020\037\037" +
    "\042\040\050\031\052\015\057\035\063\026\065\033\066" +
    "\032\067\036\070\027\071\016\073\030\001\002\000\042" +
    "\014\uffd0\035\025\036\020\037\037\042\040\050\031\051" +
    "\201\052\015\057\035\063\026\065\033\066\032\067\036" +
    "\070\027\071\016\073\030\001\002\000\004\014\170\001" +
    "\002\000\042\014\uffd2\035\025\036\020\037\037\042\040" +
    "\050\031\051\171\052\015\057\035\063\026\065\033\066" +
    "\032\067\036\070\027\071\016\073\030\001\002\000\004" +
    "\013\173\001\002\000\004\014\uffd3\001\002\000\040\014" +
    "\174\035\025\036\020\037\037\042\040\050\031\052\015" +
    "\057\035\063\026\065\033\066\032\067\036\070\027\071" +
    "\016\073\030\001\002\000\040\014\uffce\035\025\036\020" +
    "\037\037\042\040\050\031\052\015\057\035\063\026\065" +
    "\033\066\032\067\036\070\027\071\016\073\030\001\002" +
    "\000\004\014\176\001\002\000\040\014\uffcc\035\025\036" +
    "\020\037\037\042\040\050\031\052\015\057\035\063\026" +
    "\065\033\066\032\067\036\070\027\071\016\073\030\001" +
    "\002\000\004\014\uffca\001\002\000\004\014\uffcd\001\002" +
    "\000\004\013\203\001\002\000\004\014\uffd1\001\002\000" +
    "\040\014\204\035\025\036\020\037\037\042\040\050\031" +
    "\052\015\057\035\063\026\065\033\066\032\067\036\070" +
    "\027\071\016\073\030\001\002\000\004\014\uffcf\001\002" +
    "\000\004\014\206\001\002\000\040\014\uffcb\035\025\036" +
    "\020\037\037\042\040\050\031\052\015\057\035\063\026" +
    "\065\033\066\032\067\036\070\027\071\016\073\030\001" +
    "\002\000\004\014\uffc9\001\002\000\004\043\211\001\002" +
    "\000\004\012\212\001\002\000\004\007\213\001\002\000" +
    "\040\014\uff74\035\025\036\020\037\037\042\040\050\031" +
    "\052\015\057\035\063\026\065\033\066\032\067\036\070" +
    "\027\071\016\073\030\001\002\000\004\014\uff81\001\002" +
    "\000\006\055\217\056\216\001\002\000\004\012\223\001" +
    "\002\000\004\012\220\001\002\000\004\007\221\001\002" +
    "\000\040\014\uff7c\035\025\036\020\037\037\042\040\050" +
    "\031\052\015\057\035\063\026\065\033\066\032\067\036" +
    "\070\027\071\016\073\030\001\002\000\004\014\uff89\001" +
    "\002\000\004\007\224\001\002\000\040\014\uff7b\035\025" +
    "\036\020\037\037\042\040\050\031\052\015\057\035\063" +
    "\026\065\033\066\032\067\036\070\027\071\016\073\030" +
    "\001\002\000\004\014\uff88\001\002\000\006\055\230\056" +
    "\227\001\002\000\004\012\234\001\002\000\004\012\231" +
    "\001\002\000\004\007\232\001\002\000\040\014\uff80\035" +
    "\025\036\020\037\037\042\040\050\031\052\015\057\035" +
    "\063\026\065\033\066\032\067\036\070\027\071\016\073" +
    "\030\001\002\000\004\014\uff8d\001\002\000\004\007\235" +
    "\001\002\000\040\014\uff7f\035\025\036\020\037\037\042" +
    "\040\050\031\052\015\057\035\063\026\065\033\066\032" +
    "\067\036\070\027\071\016\073\030\001\002\000\004\014" +
    "\uff8c\001\002\000\006\007\240\027\241\001\002\000\040" +
    "\014\ufff1\035\025\036\020\037\037\042\040\050\031\052" +
    "\015\057\035\063\026\065\033\066\032\067\036\070\027" +
    "\071\016\073\030\001\002\000\004\043\242\001\002\000" +
    "\004\007\243\001\002\000\040\014\uffe8\035\025\036\020" +
    "\037\037\042\040\050\031\052\015\057\035\063\026\065" +
    "\033\066\032\067\036\070\027\071\016\073\030\001\002" +
    "\000\004\014\uffed\001\002\000\004\014\ufff5\001\002\000" +
    "\004\002\ufffd\001\002\000\006\007\250\027\251\001\002" +
    "\000\040\014\ufff0\035\025\036\020\037\037\042\040\050" +
    "\031\052\015\057\035\063\026\065\033\066\032\067\036" +
    "\070\027\071\016\073\030\001\002\000\004\044\252\001" +
    "\002\000\004\007\253\001\002\000\040\014\uffe7\035\025" +
    "\036\020\037\037\042\040\050\031\052\015\057\035\063" +
    "\026\065\033\066\032\067\036\070\027\071\016\073\030" +
    "\001\002\000\004\014\uffec\001\002\000\004\014\ufff4\001" +
    "\002\000\006\055\260\056\257\001\002\000\004\012\264" +
    "\001\002\000\004\012\261\001\002\000\004\007\262\001" +
    "\002\000\040\014\uff7a\035\025\036\020\037\037\042\040" +
    "\050\031\052\015\057\035\063\026\065\033\066\032\067" +
    "\036\070\027\071\016\073\030\001\002\000\004\014\uff87" +
    "\001\002\000\004\007\265\001\002\000\040\014\uff79\035" +
    "\025\036\020\037\037\042\040\050\031\052\015\057\035" +
    "\063\026\065\033\066\032\067\036\070\027\071\016\073" +
    "\030\001\002\000\004\014\uff86\001\002\000\004\035\270" +
    "\001\002\000\004\046\271\001\002\000\004\027\272\001" +
    "\002\000\004\043\273\001\002\000\004\007\274\001\002" +
    "\000\004\046\275\001\002\000\004\031\276\001\002\000" +
    "\006\043\277\046\300\001\002\000\004\007\323\001\002" +
    "\000\004\007\301\001\002\000\004\046\302\001\002\000" +
    "\006\032\303\033\304\001\002\000\004\012\314\001\002" +
    "\000\004\012\305\001\002\000\004\013\306\001\002\000" +
    "\040\014\307\035\025\036\020\037\037\042\040\050\031" +
    "\052\015\057\035\063\026\065\033\066\032\067\036\070" +
    "\027\071\016\073\030\001\002\000\040\014\uffba\035\025" +
    "\036\020\037\037\042\040\050\031\052\015\057\035\063" +
    "\026\065\033\066\032\067\036\070\027\071\016\073\030" +
    "\001\002\000\004\014\311\001\002\000\040\014\uffbb\035" +
    "\025\036\020\037\037\042\040\050\031\052\015\057\035" +
    "\063\026\065\033\066\032\067\036\070\027\071\016\073" +
    "\030\001\002\000\004\014\uffbc\001\002\000\004\014\uffb9" +
    "\001\002\000\004\013\315\001\002\000\040\014\316\035" +
    "\025\036\020\037\037\042\040\050\031\052\015\057\035" +
    "\063\026\065\033\066\032\067\036\070\027\071\016\073" +
    "\030\001\002\000\040\014\uffc2\035\025\036\020\037\037" +
    "\042\040\050\031\052\015\057\035\063\026\065\033\066" +
    "\032\067\036\070\027\071\016\073\030\001\002\000\004" +
    "\014\320\001\002\000\040\014\uffc3\035\025\036\020\037" +
    "\037\042\040\050\031\052\015\057\035\063\026\065\033" +
    "\066\032\067\036\070\027\071\016\073\030\001\002\000" +
    "\004\014\uffc4\001\002\000\004\014\uffc1\001\002\000\004" +
    "\046\324\001\002\000\006\032\325\033\326\001\002\000" +
    "\004\012\336\001\002\000\004\012\327\001\002\000\004" +
    "\013\330\001\002\000\040\014\331\035\025\036\020\037" +
    "\037\042\040\050\031\052\015\057\035\063\026\065\033" +
    "\066\032\067\036\070\027\071\016\073\030\001\002\000" +
    "\040\014\uffbe\035\025\036\020\037\037\042\040\050\031" +
    "\052\015\057\035\063\026\065\033\066\032\067\036\070" +
    "\027\071\016\073\030\001\002\000\004\014\333\001\002" +
    "\000\040\014\uffbf\035\025\036\020\037\037\042\040\050" +
    "\031\052\015\057\035\063\026\065\033\066\032\067\036" +
    "\070\027\071\016\073\030\001\002\000\004\014\uffc0\001" +
    "\002\000\004\014\uffbd\001\002\000\004\013\337\001\002" +
    "\000\040\014\340\035\025\036\020\037\037\042\040\050" +
    "\031\052\015\057\035\063\026\065\033\066\032\067\036" +
    "\070\027\071\016\073\030\001\002\000\040\014\uffc6\035" +
    "\025\036\020\037\037\042\040\050\031\052\015\057\035" +
    "\063\026\065\033\066\032\067\036\070\027\071\016\073" +
    "\030\001\002\000\004\014\342\001\002\000\040\014\uffc7" +
    "\035\025\036\020\037\037\042\040\050\031\052\015\057" +
    "\035\063\026\065\033\066\032\067\036\070\027\071\016" +
    "\073\030\001\002\000\004\014\uffc8\001\002\000\004\014" +
    "\uffc5\001\002\000\004\013\346\001\002\000\016\006\352" +
    "\014\354\035\353\036\351\037\350\042\355\001\002\000" +
    "\004\014\u01b2\001\002\000\004\046\u0191\001\002\000\004" +
    "\046\u0170\001\002\000\004\004\u0167\001\002\000\004\046" +
    "\u0142\001\002\000\004\002\000\001\002\000\004\046\356" +
    "\001\002\000\006\007\357\027\360\001\002\000\014\006" +
    "\u0135\035\370\036\366\037\364\042\371\001\002\000\006" +
    "\055\362\056\361\001\002\000\004\007\u0125\001\002\000" +
    "\004\007\363\001\002\000\014\006\367\035\370\036\366" +
    "\037\364\042\371\001\002\000\004\046\u011e\001\002\000" +
    "\004\006\u0117\001\002\000\004\046\u0110\001\002\000\004" +
    "\004\u010b\001\002\000\004\046\u0104\001\002\000\004\046" +
    "\372\001\002\000\006\007\373\027\374\001\002\000\014" +
    "\006\uff98\035\370\036\366\037\364\042\371\001\002\000" +
    "\006\055\376\056\375\001\002\000\004\007\u0101\001\002" +
    "\000\004\007\377\001\002\000\014\006\uff8f\035\370\036" +
    "\366\037\364\042\371\001\002\000\004\006\uff94\001\002" +
    "\000\014\006\uff8e\035\370\036\366\037\364\042\371\001" +
    "\002\000\004\006\uff93\001\002\000\004\006\uff9c\001\002" +
    "\000\006\007\u0105\027\u0106\001\002\000\014\006\uff9b\035" +
    "\370\036\366\037\364\042\371\001\002\000\004\043\u0107" +
    "\001\002\000\004\007\u0108\001\002\000\014\006\uff92\035" +
    "\370\036\366\037\364\042\371\001\002\000\004\006\uff97" +
    "\001\002\000\004\006\uff9f\001\002\000\004\011\u010c\001" +
    "\002\000\004\012\u010d\001\002\000\004\013\u010e\001\002" +
    "\000\004\014\u010f\001\002\000\004\014\uffa2\001\002\000" +
    "\006\007\u0111\027\u0112\001\002\000\014\006\uff9a\035\370" +
    "\036\366\037\364\042\371\001\002\000\004\044\u0113\001" +
    "\002\000\004\007\u0114\001\002\000\014\006\uff91\035\370" +
    "\036\366\037\364\042\371\001\002\000\004\006\uff96\001" +
    "\002\000\004\006\uff9e\001\002\000\004\004\u0118\001\002" +
    "\000\004\011\u0119\001\002\000\004\012\u011a\001\002\000" +
    "\004\013\u011b\001\002\000\036\035\025\036\020\037\037" +
    "\042\040\050\031\052\015\057\035\063\026\065\033\066" +
    "\032\067\036\070\027\071\016\073\030\001\002\000\004" +
    "\014\u011d\001\002\000\004\014\uffa3\001\002\000\006\007" +
    "\u011f\027\u0120\001\002\000\014\006\uff99\035\370\036\366" +
    "\037\364\042\371\001\002\000\004\045\u0121\001\002\000" +
    "\004\007\u0122\001\002\000\014\006\uff90\035\370\036\366" +
    "\037\364\042\371\001\002\000\004\006\uff95\001\002\000" +
    "\004\006\uff9d\001\002\000\014\006\u0127\035\370\036\366" +
    "\037\364\042\371\001\002\000\004\006\u012d\001\002\000" +
    "\004\004\u0128\001\002\000\004\011\u0129\001\002\000\004" +
    "\012\u012a\001\002\000\004\013\u012b\001\002\000\004\014" +
    "\u012c\001\002\000\004\014\uffa0\001\002\000\004\004\u012e" +
    "\001\002\000\004\011\u012f\001\002\000\004\012\u0130\001" +
    "\002\000\004\013\u0131\001\002\000\036\035\025\036\020" +
    "\037\037\042\040\050\031\052\015\057\035\063\026\065" +
    "\033\066\032\067\036\070\027\071\016\073\030\001\002" +
    "\000\004\014\u0133\001\002\000\004\014\uffa1\001\002\000" +
    "\004\006\u013b\001\002\000\004\004\u0136\001\002\000\004" +
    "\011\u0137\001\002\000\004\012\u0138\001\002\000\004\013" +
    "\u0139\001\002\000\004\014\u013a\001\002\000\004\014\uffac" +
    "\001\002\000\004\004\u013c\001\002\000\004\011\u013d\001" +
    "\002\000\004\012\u013e\001\002\000\004\013\u013f\001\002" +
    "\000\036\035\025\036\020\037\037\042\040\050\031\052" +
    "\015\057\035\063\026\065\033\066\032\067\036\070\027" +
    "\071\016\073\030\001\002\000\004\014\u0141\001\002\000" +
    "\004\014\uffad\001\002\000\006\007\u0143\027\u0144\001\002" +
    "\000\014\006\u0159\035\370\036\366\037\364\042\371\001" +
    "\002\000\004\043\u0145\001\002\000\004\007\u0146\001\002" +
    "\000\014\006\u0148\035\370\036\366\037\364\042\371\001" +
    "\002\000\004\006\u0150\001\002\000\004\004\u0149\001\002" +
    "\000\004\011\u014a\001\002\000\004\012\u014b\001\002\000" +
    "\004\013\u014c\001\002\000\040\014\u014d\035\025\036\020" +
    "\037\037\042\040\050\031\052\015\057\035\063\026\065" +
    "\033\066\032\067\036\070\027\071\016\073\030\001\002" +
    "\000\004\014\uffa9\001\002\000\004\014\u014f\001\002\000" +
    "\004\014\uffa8\001\002\000\004\004\u0151\001\002\000\004" +
    "\011\u0152\001\002\000\004\012\u0153\001\002\000\004\013" +
    "\u0154\001\002\000\040\014\u0155\035\025\036\020\037\037" +
    "\042\040\050\031\052\015\057\035\063\026\065\033\066" +
    "\032\067\036\070\027\071\016\073\030\001\002\000\004" +
    "\014\uffaa\001\002\000\004\014\u0157\001\002\000\004\014" +
    "\uffab\001\002\000\004\006\u015f\001\002\000\004\004\u015a" +
    "\001\002\000\004\011\u015b\001\002\000\004\012\u015c\001" +
    "\002\000\004\013\u015d\001\002\000\004\014\u015e\001\002" +
    "\000\004\014\uffb2\001\002\000\004\004\u0160\001\002\000" +
    "\004\011\u0161\001\002\000\004\012\u0162\001\002\000\004" +
    "\013\u0163\001\002\000\040\014\u0164\035\025\036\020\037" +
    "\037\042\040\050\031\052\015\057\035\063\026\065\033" +
    "\066\032\067\036\070\027\071\016\073\030\001\002\000" +
    "\004\014\uffb3\001\002\000\004\014\u0166\001\002\000\004" +
    "\014\uffb4\001\002\000\004\011\u0168\001\002\000\004\012" +
    "\u0169\001\002\000\004\013\u016a\001\002\000\040\014\u016b" +
    "\035\025\036\020\037\037\042\040\050\031\052\015\057" +
    "\035\063\026\065\033\066\032\067\036\070\027\071\016" +
    "\073\030\001\002\000\004\014\u016f\001\002\000\004\014" +
    "\u016d\001\002\000\004\014\u016e\001\002\000\004\002\ufffc" +
    "\001\002\000\004\002\ufffe\001\002\000\006\007\u0171\027" +
    "\u0172\001\002\000\014\006\u0184\035\370\036\366\037\364" +
    "\042\371\001\002\000\004\044\u0173\001\002\000\004\007" +
    "\u0174\001\002\000\014\006\u0176\035\370\036\366\037\364" +
    "\042\371\001\002\000\004\006\u017c\001\002\000\004\004" +
    "\u0177\001\002\000\004\011\u0178\001\002\000\004\012\u0179" +
    "\001\002\000\004\013\u017a\001\002\000\004\014\u017b\001" +
    "\002\000\004\014\uffa6\001\002\000\004\004\u017d\001\002" +
    "\000\004\011\u017e\001\002\000\004\012\u017f\001\002\000" +
    "\004\013\u0180\001\002\000\036\035\025\036\020\037\037" +
    "\042\040\050\031\052\015\057\035\063\026\065\033\066" +
    "\032\067\036\070\027\071\016\073\030\001\002\000\004" +
    "\014\u0182\001\002\000\004\014\uffa7\001\002\000\004\006" +
    "\u018a\001\002\000\004\004\u0185\001\002\000\004\011\u0186" +
    "\001\002\000\004\012\u0187\001\002\000\004\013\u0188\001" +
    "\002\000\004\014\u0189\001\002\000\004\014\uffb0\001\002" +
    "\000\004\004\u018b\001\002\000\004\011\u018c\001\002\000" +
    "\004\012\u018d\001\002\000\004\013\u018e\001\002\000\036" +
    "\035\025\036\020\037\037\042\040\050\031\052\015\057" +
    "\035\063\026\065\033\066\032\067\036\070\027\071\016" +
    "\073\030\001\002\000\004\014\u0190\001\002\000\004\014" +
    "\uffb1\001\002\000\006\007\u0192\027\u0193\001\002\000\014" +
    "\006\u01a5\035\370\036\366\037\364\042\371\001\002\000" +
    "\004\045\u0194\001\002\000\004\007\u0195\001\002\000\014" +
    "\006\u0197\035\370\036\366\037\364\042\371\001\002\000" +
    "\004\006\u019d\001\002\000\004\004\u0198\001\002\000\004" +
    "\011\u0199\001\002\000\004\012\u019a\001\002\000\004\013" +
    "\u019b\001\002\000\004\014\u019c\001\002\000\004\014\uffa4" +
    "\001\002\000\004\004\u019e\001\002\000\004\011\u019f\001" +
    "\002\000\004\012\u01a0\001\002\000\004\013\u01a1\001\002" +
    "\000\036\035\025\036\020\037\037\042\040\050\031\052" +
    "\015\057\035\063\026\065\033\066\032\067\036\070\027" +
    "\071\016\073\030\001\002\000\004\014\u01a3\001\002\000" +
    "\004\014\uffa5\001\002\000\004\006\u01ab\001\002\000\004" +
    "\004\u01a6\001\002\000\004\011\u01a7\001\002\000\004\012" +
    "\u01a8\001\002\000\004\013\u01a9\001\002\000\004\014\u01aa" +
    "\001\002\000\004\014\uffae\001\002\000\004\004\u01ac\001" +
    "\002\000\004\011\u01ad\001\002\000\004\012\u01ae\001\002" +
    "\000\004\013\u01af\001\002\000\036\035\025\036\020\037" +
    "\037\042\040\050\031\052\015\057\035\063\026\065\033" +
    "\066\032\067\036\070\027\071\016\073\030\001\002\000" +
    "\004\014\u01b1\001\002\000\004\014\uffaf\001\002\000\004" +
    "\002\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u01b0\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\021\004\020\006\023\007\033\010\016\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\051\004\020\006\023\007\033\010\016\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\046\004\020\006\023\007\033\010\016\013\022" +
    "\001\001\000\002\001\001\000\016\003\050\004\020\006" +
    "\023\007\033\010\016\013\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\060\004" +
    "\020\006\023\007\033\010\016\013\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\057\004\020\006" +
    "\023\007\033\010\016\013\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\066\004\020" +
    "\006\023\007\033\010\016\013\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\071\004\020\006\023" +
    "\007\033\010\016\013\022\001\001\000\002\001\001\000" +
    "\004\005\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\121\004\020" +
    "\006\023\007\033\010\016\013\022\001\001\000\016\003" +
    "\124\004\020\006\023\007\033\010\016\013\022\001\001" +
    "\000\002\001\001\000\016\003\123\004\020\006\023\007" +
    "\033\010\016\013\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\144\004\020\006" +
    "\023\007\033\010\016\013\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\147\004\020\006\023\007" +
    "\033\010\016\013\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\155\004\020\006\023\007\033\010\016" +
    "\013\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\160\004\020\006\023\007\033\010\016\013\022" +
    "\001\001\000\002\001\001\000\004\005\162\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\003\166\004\020" +
    "\006\023\007\033\010\016\013\022\001\001\000\016\003" +
    "\201\004\020\006\023\007\033\010\016\013\022\001\001" +
    "\000\002\001\001\000\016\003\171\004\020\006\023\007" +
    "\033\010\016\013\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\174\004\020\006\023\007\033\010" +
    "\016\013\022\001\001\000\016\003\177\004\020\006\023" +
    "\007\033\010\016\013\022\001\001\000\002\001\001\000" +
    "\016\003\176\004\020\006\023\007\033\010\016\013\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\204\004\020\006\023" +
    "\007\033\010\016\013\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\003\206\004\020\006\023\007\033" +
    "\010\016\013\022\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\213" +
    "\004\020\006\023\007\033\010\016\013\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\003\221\004\020\006" +
    "\023\007\033\010\016\013\022\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\224\004\020\006\023\007" +
    "\033\010\016\013\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\232\004\020\006\023\007\033\010\016" +
    "\013\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\235\004\020\006\023\007\033\010\016\013\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\244\004\020\006\023\007\033\010\016\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\243\004" +
    "\020\006\023\007\033\010\016\013\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\254\004\020\006\023\007\033\010\016" +
    "\013\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\253\004\020\006\023\007\033\010\016\013\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\262\004\020\006\023\007\033\010\016\013" +
    "\022\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\003\265\004\020\006\023\007\033\010\016\013\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\307\004\020\006\023\007\033\010\016\013" +
    "\022\001\001\000\016\003\312\004\020\006\023\007\033" +
    "\010\016\013\022\001\001\000\002\001\001\000\016\003" +
    "\311\004\020\006\023\007\033\010\016\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\316\004\020\006\023\007\033\010\016\013\022" +
    "\001\001\000\016\003\321\004\020\006\023\007\033\010" +
    "\016\013\022\001\001\000\002\001\001\000\016\003\320" +
    "\004\020\006\023\007\033\010\016\013\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\003\331\004\020\006\023\007\033\010\016" +
    "\013\022\001\001\000\016\003\334\004\020\006\023\007" +
    "\033\010\016\013\022\001\001\000\002\001\001\000\016" +
    "\003\333\004\020\006\023\007\033\010\016\013\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\003\340\004\020\006\023\007\033\010\016\013" +
    "\022\001\001\000\016\003\343\004\020\006\023\007\033" +
    "\010\016\013\022\001\001\000\002\001\001\000\016\003" +
    "\342\004\020\006\023\007\033\010\016\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\346\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0133\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\364\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0102\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\377\001\001\000\002\001\001" +
    "\000\004\012\u0101\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0109\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0108\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0115\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0114\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\u011b\004\020\006\023\007\033\010\016\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\u0123\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\u0122\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\u0131\004\020\006\023\007\033\010\016\013\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\u013f\004\020\006\023\007\033\010" +
    "\016\013\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\u0157\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\u0146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\u014d\004\020\006\023" +
    "\007\033\010\016\013\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\u0155\004\020\006\023\007\033\010\016\013\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\003\u0164\004\020\006\023\007" +
    "\033\010\016\013\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\u016b\004\020\006\023" +
    "\007\033\010\016\013\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\u0182\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\u0174\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\003\u0180\004\020\006\023" +
    "\007\033\010\016\013\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\003\u018e\004" +
    "\020\006\023\007\033\010\016\013\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\u01a3\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\u0195\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\003\u01a1" +
    "\004\020\006\023\007\033\010\016\013\022\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\003\u01af\004\020\006\023\007\033\010\016\013\022" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
    private Symbol s;        

    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){        
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ACCIONES ::= Time Parentesis_A Numero Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ACCIONES ::= Fpremio Parentesis_A False Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ACCIONES ::= Fpremio Parentesis_A True Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ACCIONES ::= Fmasaje Parentesis_A False Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ACCIONES ::= Fmasaje Parentesis_A True Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ACCIONES ::= Fjuguete Parentesis_A False Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ACCIONES ::= Fjuguete Parentesis_A True Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ACCIONES ::= Fluz Parentesis_A False Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ACCIONES ::= Fluz Parentesis_A True Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ACCIONES ::= Fcomer Parentesis_A False Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ACCIONES ::= Fcomer Parentesis_A True Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ACCIONES ::= Fagua Parentesis_A False Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ACCIONES ::= Fagua Parentesis_A True Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ACCIONES ::= Time Parentesis_A Numero Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ACCIONES ::= Fpremio Parentesis_A False Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ACCIONES ::= Fpremio Parentesis_A True Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ACCIONES ::= Fmasaje Parentesis_A False Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ACCIONES ::= Fmasaje Parentesis_A True Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ACCIONES ::= Fjuguete Parentesis_A False Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ACCIONES ::= Fjuguete Parentesis_A True Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ACCIONES ::= Fluz Parentesis_A False Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ACCIONES ::= Fluz Parentesis_A True Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ACCIONES ::= Fcomer Parentesis_A False Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ACCIONES ::= Fcomer Parentesis_A True Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // ACCIONES ::= Fagua Parentesis_A False Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ACCIONES ::= Fagua Parentesis_A True Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VARIABLESG ::= Boolean Identificador Asignacion False P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VARIABLESG ::= Boolean Identificador Asignacion True P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VARIABLESG ::= String Identificador Asignacion Texto P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VARIABLESG ::= Float Identificador Asignacion Flotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VARIABLESG ::= Int Identificador Asignacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VARIABLESG ::= Boolean Identificador Asignacion False P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VARIABLESG ::= Boolean Identificador Asignacion True P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VARIABLESG ::= String Identificador Asignacion Texto P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VARIABLESG ::= Float Identificador Asignacion Flotante P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VARIABLESG ::= Int Identificador Asignacion Numero P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VARIABLESG ::= Boolean Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VARIABLESG ::= String Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VARIABLESG ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VARIABLESG ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VARIABLESG ::= Boolean Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VARIABLESG ::= String Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VARIABLESG ::= Float Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VARIABLESG ::= Int Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // VARIABLESGF ::= Boolean Identificador Asignacion False P_coma Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // VARIABLESGF ::= Boolean Identificador Asignacion False P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // VARIABLESGF ::= Boolean Identificador Asignacion True P_coma Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // VARIABLESGF ::= Boolean Identificador Asignacion True P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // VARIABLESGF ::= String Identificador Asignacion Texto P_coma Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // VARIABLESGF ::= String Identificador Asignacion Texto P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // VARIABLESGF ::= Float Identificador Asignacion Flotante P_coma Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // VARIABLESGF ::= Float Identificador Asignacion Flotante P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // VARIABLESGF ::= Int Identificador Asignacion Numero P_coma Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // VARIABLESGF ::= Int Identificador Asignacion Numero P_coma Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // VARIABLESGF ::= Int Identificador Asignacion Numero P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // VARIABLESGF ::= Int Identificador Asignacion Numero P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // VARIABLESGF ::= Boolean Identificador P_coma Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // VARIABLESGF ::= Boolean Identificador P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // VARIABLESGF ::= String Identificador P_coma Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // VARIABLESGF ::= String Identificador P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // VARIABLESGF ::= Float Identificador P_coma Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // VARIABLESGF ::= Float Identificador P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // VARIABLESGF ::= Int Identificador P_coma Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // VARIABLESGF ::= Int Identificador P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // VARIABLESGF ::= Int Identificador P_coma VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIABOOLEANA ::= False Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIABOOLEANA ::= True Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIABOOLEANA ::= Identificador Igual False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIABOOLEANA ::= Identificador Igual True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIABOOLEANA ::= Numero Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIABOOLEANA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIABOOLEANA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIABOOLEANA ::= Texto Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIABOOLEANA ::= Identificador Igual Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIABOOLEANA ::= Flotante OpR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIABOOLEANA ::= Numero OpR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIABOOLEANA ::= Identificador OpR Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIABOOLEANA ::= Identificador OpR Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIABOOLEANA ::= Identificador OpR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIABOOLEANA ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIABOOLEANA ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= Boolean Identificador Asignacion False P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Boolean Identificador Asignacion True P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= String Identificador Asignacion Texto P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Float Identificador Asignacion Flotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= Int Identificador Asignacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Boolean Identificador Asignacion False P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Boolean Identificador Asignacion True P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= String Identificador Asignacion Texto P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= Float Identificador Asignacion Flotante P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Int Identificador Asignacion Numero P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Boolean Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= String Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION ::= Boolean Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION ::= String Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION ::= Float Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION ::= Int Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ACCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= Class Identificador Llave_A VARIABLESGF Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= Class Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= Class Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A Llave_C Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Class Identificador Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

