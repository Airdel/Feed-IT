
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Dec 07 15:19:09 MST 2021
//----------------------------------------------------

package analizador_sintactico;

import interfaces.FeedIT;
import java_cup.runtime.Symbol;
import analizador_sintactico.Errores;
import analizador_sintactico.Objetos;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Dec 07 15:19:09 MST 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\260\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\022\006\000\002\022\010\000\002\022\014" +
    "\000\002\022\011\000\002\022\015\000\002\022\007\000" +
    "\002\022\007\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\005\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\006" +
    "\000\002\016\007\000\002\016\007\000\002\016\007\000" +
    "\002\016\007\000\002\016\011\000\002\016\011\000\002" +
    "\016\011\000\002\016\007\000\002\016\006\000\002\016" +
    "\006\000\002\016\006\000\002\016\006\000\002\016\010" +
    "\000\002\016\010\000\002\016\010\000\002\016\006\000" +
    "\002\005\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\005\000\002\006\003\000" +
    "\002\006\003\000\002\007\012\000\002\007\011\000\002" +
    "\007\011\000\002\007\010\000\002\007\013\000\002\007" +
    "\014\000\002\007\015\000\002\007\015\000\002\007\014" +
    "\000\002\007\016\000\002\007\015\000\002\007\012\000" +
    "\002\007\011\000\002\007\011\000\002\007\010\000\002" +
    "\007\013\000\002\007\014\000\002\007\015\000\002\007" +
    "\015\000\002\007\014\000\002\007\016\000\002\007\015" +
    "\000\002\010\024\000\002\010\023\000\002\010\022\000" +
    "\002\010\023\000\002\010\024\000\002\010\023\000\002" +
    "\010\022\000\002\010\023\000\002\010\024\000\002\010" +
    "\023\000\002\010\022\000\002\010\023\000\002\010\024" +
    "\000\002\010\023\000\002\010\022\000\002\010\023\000" +
    "\002\011\010\000\002\011\011\000\002\011\011\000\002" +
    "\011\012\000\002\012\011\000\002\012\012\000\002\012" +
    "\011\000\002\012\012\000\002\013\006\000\002\013\006" +
    "\000\002\013\006\000\002\013\006\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\004\000\002\013\004\000\002\013\004\000\002\013" +
    "\004\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\015\007\000\002\015\011\000\002\015\011\000" +
    "\002\015\011\000\002\015\007\000\002\015\007\000\002" +
    "\015\007\000\002\015\007\000\002\015\011\000\002\015" +
    "\011\000\002\015\011\000\002\015\006\000\002\015\006" +
    "\000\002\015\006\000\002\015\006\000\002\015\010\000" +
    "\002\015\010\000\002\015\010\000\002\014\010\000\002" +
    "\014\010\000\002\014\010\000\002\014\010\000\002\014" +
    "\010\000\002\014\010\000\002\014\010\000\002\014\007" +
    "\000\002\014\007\000\002\014\007\000\002\014\007\000" +
    "\002\014\007\000\002\014\007\000\002\014\007\000\002" +
    "\017\005\000\002\017\005\000\002\017\006\000\002\020" +
    "\011\000\002\020\012\000\002\020\016\000\002\020\017" +
    "\000\002\020\020\000\002\020\017\000\002\021\007\000" +
    "\002\021\006\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\004\000\002\024" +
    "\005\000\002\024\005\000\002\024\004\000\002\024\004" +
    "\000\002\024\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\010\005\005\006\006\046\007\001\002\000" +
    "\004\002\000\001\002\000\006\013\u010a\046\u010b\001\002" +
    "\000\004\004\015\001\002\000\004\013\013\001\002\000" +
    "\004\002\012\001\002\000\004\002\uffff\001\002\000\004" +
    "\002\001\001\002\000\004\014\014\001\002\000\004\002" +
    "\uff5b\001\002\000\004\011\016\001\002\000\004\012\017" +
    "\001\002\000\004\013\020\001\002\000\042\014\021\035" +
    "\033\036\025\037\047\042\052\046\032\050\041\052\022" +
    "\057\044\063\035\065\043\066\042\067\046\070\036\071" +
    "\023\073\040\001\002\000\004\002\ufffd\001\002\000\004" +
    "\011\334\001\002\000\004\011\327\001\002\000\004\014" +
    "\ufff3\001\002\000\004\046\324\001\002\000\004\014\322" +
    "\001\002\000\004\014\ufff7\001\002\000\004\014\ufff2\001" +
    "\002\000\004\014\ufff6\001\002\000\010\007\316\011\315" +
    "\027\056\001\002\000\006\007\305\046\306\001\002\000" +
    "\004\014\ufff5\001\002\000\004\011\277\001\002\000\004" +
    "\011\272\001\002\000\004\014\ufff1\001\002\000\004\011" +
    "\265\001\002\000\004\011\202\001\002\000\004\011\175" +
    "\001\002\000\004\011\170\001\002\000\004\011\131\001" +
    "\002\000\004\014\ufff4\001\002\000\004\011\124\001\002" +
    "\000\004\046\121\001\002\000\004\014\uffef\001\002\000" +
    "\004\014\ufff0\001\002\000\004\046\054\001\002\000\004" +
    "\014\uffe3\001\002\000\006\007\055\027\056\001\002\000" +
    "\042\014\uffe7\035\033\036\025\037\047\042\052\046\032" +
    "\050\041\052\022\057\044\063\035\065\043\066\042\067" +
    "\046\070\036\071\023\073\040\001\002\000\024\043\070" +
    "\044\064\045\057\046\062\055\065\056\063\062\067\064" +
    "\060\072\066\001\002\000\004\007\115\001\002\000\004" +
    "\011\111\001\002\000\004\007\107\001\002\000\004\007" +
    "\105\001\002\000\012\007\uffc4\012\uffc4\024\uffc4\025\uffc4" +
    "\001\002\000\004\007\103\001\002\000\012\007\uffc5\012" +
    "\uffc5\024\uffc5\025\uffc5\001\002\000\004\011\077\001\002" +
    "\000\004\011\073\001\002\000\004\007\071\001\002\000" +
    "\042\014\uffd9\035\033\036\025\037\047\042\052\046\032" +
    "\050\041\052\022\057\044\063\035\065\043\066\042\067" +
    "\046\070\036\071\023\073\040\001\002\000\004\014\uffe1" +
    "\001\002\000\004\012\074\001\002\000\004\007\075\001" +
    "\002\000\042\014\uffd4\035\033\036\025\037\047\042\052" +
    "\046\032\050\041\052\022\057\044\063\035\065\043\066" +
    "\042\067\046\070\036\071\023\073\040\001\002\000\004" +
    "\014\uffdc\001\002\000\004\012\100\001\002\000\004\007" +
    "\101\001\002\000\042\014\uffd3\035\033\036\025\037\047" +
    "\042\052\046\032\050\041\052\022\057\044\063\035\065" +
    "\043\066\042\067\046\070\036\071\023\073\040\001\002" +
    "\000\004\014\uffdb\001\002\000\042\014\uffd7\035\033\036" +
    "\025\037\047\042\052\046\032\050\041\052\022\057\044" +
    "\063\035\065\043\066\042\067\046\070\036\071\023\073" +
    "\040\001\002\000\004\014\uffdf\001\002\000\042\014\uffd2" +
    "\035\033\036\025\037\047\042\052\046\032\050\041\052" +
    "\022\057\044\063\035\065\043\066\042\067\046\070\036" +
    "\071\023\073\040\001\002\000\004\014\uffda\001\002\000" +
    "\042\014\uffd6\035\033\036\025\037\047\042\052\046\032" +
    "\050\041\052\022\057\044\063\035\065\043\066\042\067" +
    "\046\070\036\071\023\073\040\001\002\000\004\014\uffde" +
    "\001\002\000\004\012\112\001\002\000\004\007\113\001" +
    "\002\000\042\014\uffd5\035\033\036\025\037\047\042\052" +
    "\046\032\050\041\052\022\057\044\063\035\065\043\066" +
    "\042\067\046\070\036\071\023\073\040\001\002\000\004" +
    "\014\uffdd\001\002\000\042\014\uffd8\035\033\036\025\037" +
    "\047\042\052\046\032\050\041\052\022\057\044\063\035" +
    "\065\043\066\042\067\046\070\036\071\023\073\040\001" +
    "\002\000\004\014\uffe0\001\002\000\004\014\uffeb\001\002" +
    "\000\004\014\uffe4\001\002\000\006\007\122\027\056\001" +
    "\002\000\042\014\uffe8\035\033\036\025\037\047\042\052" +
    "\046\032\050\041\052\022\057\044\063\035\065\043\066" +
    "\042\067\046\070\036\071\023\073\040\001\002\000\004" +
    "\014\uffec\001\002\000\006\055\065\056\063\001\002\000" +
    "\004\012\126\001\002\000\004\007\127\001\002\000\042" +
    "\014\uff69\035\033\036\025\037\047\042\052\046\032\050" +
    "\041\052\022\057\044\063\035\065\043\066\042\067\046" +
    "\070\036\071\023\073\040\001\002\000\004\014\uff70\001" +
    "\002\000\016\043\133\044\132\045\134\046\136\055\065" +
    "\056\063\001\002\000\004\031\166\001\002\000\006\030" +
    "\163\031\162\001\002\000\004\030\160\001\002\000\004" +
    "\012\151\001\002\000\006\030\141\031\140\001\002\000" +
    "\010\012\uffd1\024\uffd1\025\uffd1\001\002\000\010\043\146" +
    "\044\147\046\150\001\002\000\014\043\142\045\143\046" +
    "\144\055\065\056\063\001\002\000\010\012\uffc8\024\uffc8" +
    "\025\uffc8\001\002\000\010\012\uffcb\024\uffcb\025\uffcb\001" +
    "\002\000\010\012\uffc9\024\uffc9\025\uffc9\001\002\000\010" +
    "\012\uffc6\024\uffc6\025\uffc6\001\002\000\010\012\uffcf\024" +
    "\uffcf\025\uffcf\001\002\000\010\012\uffce\024\uffce\025\uffce" +
    "\001\002\000\010\012\uffd0\024\uffd0\025\uffd0\001\002\000" +
    "\004\013\152\001\002\000\042\014\153\035\033\036\025" +
    "\037\047\042\052\046\032\050\041\052\022\057\044\063" +
    "\035\065\043\066\042\067\046\070\036\071\023\073\040" +
    "\001\002\000\042\014\uff9d\035\033\036\025\037\047\042" +
    "\052\046\032\050\041\052\022\057\044\063\035\065\043" +
    "\066\042\067\046\070\036\071\023\073\040\001\002\000" +
    "\004\014\155\001\002\000\042\014\uff9c\035\033\036\025" +
    "\037\047\042\052\046\032\050\041\052\022\057\044\063" +
    "\035\065\043\066\042\067\046\070\036\071\023\073\040" +
    "\001\002\000\004\014\uff9a\001\002\000\004\014\uff9b\001" +
    "\002\000\004\046\161\001\002\000\010\012\uffca\024\uffca" +
    "\025\uffca\001\002\000\004\046\165\001\002\000\004\046" +
    "\164\001\002\000\010\012\uffc7\024\uffc7\025\uffc7\001\002" +
    "\000\010\012\uffcd\024\uffcd\025\uffcd\001\002\000\004\046" +
    "\167\001\002\000\010\012\uffcc\024\uffcc\025\uffcc\001\002" +
    "\000\006\055\065\056\063\001\002\000\004\012\172\001" +
    "\002\000\004\007\173\001\002\000\042\014\uff6c\035\033" +
    "\036\025\037\047\042\052\046\032\050\041\052\022\057" +
    "\044\063\035\065\043\066\042\067\046\070\036\071\023" +
    "\073\040\001\002\000\004\014\uff73\001\002\000\006\055" +
    "\065\056\063\001\002\000\004\012\177\001\002\000\004" +
    "\007\200\001\002\000\042\014\uff68\035\033\036\025\037" +
    "\047\042\052\046\032\050\041\052\022\057\044\063\035" +
    "\065\043\066\042\067\046\070\036\071\023\073\040\001" +
    "\002\000\004\014\uff6f\001\002\000\020\026\203\043\133" +
    "\044\132\045\134\046\136\055\065\056\063\001\002\000" +
    "\004\011\262\001\002\000\004\012\236\001\002\000\010" +
    "\012\207\024\206\025\210\001\002\000\016\043\133\044" +
    "\132\045\134\046\136\055\065\056\063\001\002\000\004" +
    "\013\212\001\002\000\016\043\133\044\132\045\134\046" +
    "\136\055\065\056\063\001\002\000\004\012\uff65\001\002" +
    "\000\042\014\213\035\033\036\025\037\047\042\052\046" +
    "\032\050\041\052\022\057\044\063\035\065\043\066\042" +
    "\067\046\070\036\071\023\073\040\001\002\000\044\014" +
    "\uffc0\035\033\036\025\037\047\042\052\046\032\050\041" +
    "\051\226\052\022\057\044\063\035\065\043\066\042\067" +
    "\046\070\036\071\023\073\040\001\002\000\004\014\215" +
    "\001\002\000\044\014\uffc2\035\033\036\025\037\047\042" +
    "\052\046\032\050\041\051\216\052\022\057\044\063\035" +
    "\065\043\066\042\067\046\070\036\071\023\073\040\001" +
    "\002\000\004\013\220\001\002\000\004\014\uffc3\001\002" +
    "\000\042\014\221\035\033\036\025\037\047\042\052\046" +
    "\032\050\041\052\022\057\044\063\035\065\043\066\042" +
    "\067\046\070\036\071\023\073\040\001\002\000\042\014" +
    "\uffbe\035\033\036\025\037\047\042\052\046\032\050\041" +
    "\052\022\057\044\063\035\065\043\066\042\067\046\070" +
    "\036\071\023\073\040\001\002\000\004\014\223\001\002" +
    "\000\042\014\uffbc\035\033\036\025\037\047\042\052\046" +
    "\032\050\041\052\022\057\044\063\035\065\043\066\042" +
    "\067\046\070\036\071\023\073\040\001\002\000\004\014" +
    "\uffba\001\002\000\004\014\uffbd\001\002\000\004\013\230" +
    "\001\002\000\004\014\uffc1\001\002\000\042\014\231\035" +
    "\033\036\025\037\047\042\052\046\032\050\041\052\022" +
    "\057\044\063\035\065\043\066\042\067\046\070\036\071" +
    "\023\073\040\001\002\000\004\014\uffbf\001\002\000\004" +
    "\014\233\001\002\000\042\014\uffbb\035\033\036\025\037" +
    "\047\042\052\046\032\050\041\052\022\057\044\063\035" +
    "\065\043\066\042\067\046\070\036\071\023\073\040\001" +
    "\002\000\004\014\uffb9\001\002\000\004\012\uff66\001\002" +
    "\000\004\013\237\001\002\000\042\014\240\035\033\036" +
    "\025\037\047\042\052\046\032\050\041\052\022\057\044" +
    "\063\035\065\043\066\042\067\046\070\036\071\023\073" +
    "\040\001\002\000\044\014\uffb5\035\033\036\025\037\047" +
    "\042\052\046\032\050\041\051\253\052\022\057\044\063" +
    "\035\065\043\066\042\067\046\070\036\071\023\073\040" +
    "\001\002\000\004\014\242\001\002\000\044\014\uffb7\035" +
    "\033\036\025\037\047\042\052\046\032\050\041\051\243" +
    "\052\022\057\044\063\035\065\043\066\042\067\046\070" +
    "\036\071\023\073\040\001\002\000\004\013\245\001\002" +
    "\000\004\014\uffb8\001\002\000\042\014\246\035\033\036" +
    "\025\037\047\042\052\046\032\050\041\052\022\057\044" +
    "\063\035\065\043\066\042\067\046\070\036\071\023\073" +
    "\040\001\002\000\042\014\uffb3\035\033\036\025\037\047" +
    "\042\052\046\032\050\041\052\022\057\044\063\035\065" +
    "\043\066\042\067\046\070\036\071\023\073\040\001\002" +
    "\000\004\014\250\001\002\000\042\014\uffb1\035\033\036" +
    "\025\037\047\042\052\046\032\050\041\052\022\057\044" +
    "\063\035\065\043\066\042\067\046\070\036\071\023\073" +
    "\040\001\002\000\004\014\uffaf\001\002\000\004\014\uffb2" +
    "\001\002\000\004\013\255\001\002\000\004\014\uffb6\001" +
    "\002\000\042\014\256\035\033\036\025\037\047\042\052" +
    "\046\032\050\041\052\022\057\044\063\035\065\043\066" +
    "\042\067\046\070\036\071\023\073\040\001\002\000\004" +
    "\014\uffb4\001\002\000\004\014\260\001\002\000\042\014" +
    "\uffb0\035\033\036\025\037\047\042\052\046\032\050\041" +
    "\052\022\057\044\063\035\065\043\066\042\067\046\070" +
    "\036\071\023\073\040\001\002\000\004\014\uffae\001\002" +
    "\000\016\043\133\044\132\045\134\046\136\055\065\056" +
    "\063\001\002\000\004\012\264\001\002\000\004\012\uff64" +
    "\001\002\000\004\043\266\001\002\000\004\012\267\001" +
    "\002\000\004\007\270\001\002\000\042\014\uff67\035\033" +
    "\036\025\037\047\042\052\046\032\050\041\052\022\057" +
    "\044\063\035\065\043\066\042\067\046\070\036\071\023" +
    "\073\040\001\002\000\004\014\uff6e\001\002\000\006\055" +
    "\065\056\063\001\002\000\004\012\274\001\002\000\004" +
    "\007\275\001\002\000\042\014\uff6b\035\033\036\025\037" +
    "\047\042\052\046\032\050\041\052\022\057\044\063\035" +
    "\065\043\066\042\067\046\070\036\071\023\073\040\001" +
    "\002\000\004\014\uff72\001\002\000\006\055\065\056\063" +
    "\001\002\000\004\012\301\001\002\000\004\007\302\001" +
    "\002\000\042\014\uff6d\035\033\036\025\037\047\042\052" +
    "\046\032\050\041\052\022\057\044\063\035\065\043\066" +
    "\042\067\046\070\036\071\023\073\040\001\002\000\004" +
    "\014\uff74\001\002\000\004\014\uffe6\001\002\000\042\014" +
    "\uff53\035\033\036\025\037\047\042\052\046\032\050\041" +
    "\052\022\057\044\063\035\065\043\066\042\067\046\070" +
    "\036\071\023\073\040\001\002\000\050\007\311\014\uff52" +
    "\027\056\035\033\036\025\037\047\042\052\045\310\046" +
    "\032\050\041\052\022\057\044\063\035\065\043\066\042" +
    "\067\046\070\036\071\023\073\040\001\002\000\004\014" +
    "\uff55\001\002\000\004\007\313\001\002\000\042\014\uffea" +
    "\035\033\036\025\037\047\042\052\046\032\050\041\052" +
    "\022\057\044\063\035\065\043\066\042\067\046\070\036" +
    "\071\023\073\040\001\002\000\004\014\uffee\001\002\000" +
    "\004\014\uffe2\001\002\000\004\014\uff56\001\002\000\004" +
    "\012\317\001\002\000\004\014\uff54\001\002\000\004\007" +
    "\320\001\002\000\042\014\uff5c\035\033\036\025\037\047" +
    "\042\052\046\032\050\041\052\022\057\044\063\035\065" +
    "\043\066\042\067\046\070\036\071\023\073\040\001\002" +
    "\000\004\014\uff5d\001\002\000\004\002\ufffb\001\002\000" +
    "\004\014\uffe5\001\002\000\006\007\325\027\056\001\002" +
    "\000\042\014\uffe9\035\033\036\025\037\047\042\052\046" +
    "\032\050\041\052\022\057\044\063\035\065\043\066\042" +
    "\067\046\070\036\071\023\073\040\001\002\000\004\014" +
    "\uffed\001\002\000\006\055\065\056\063\001\002\000\004" +
    "\012\331\001\002\000\004\007\332\001\002\000\042\014" +
    "\uff6a\035\033\036\025\037\047\042\052\046\032\050\041" +
    "\052\022\057\044\063\035\065\043\066\042\067\046\070" +
    "\036\071\023\073\040\001\002\000\004\014\uff71\001\002" +
    "\000\004\035\335\001\002\000\004\046\336\001\002\000" +
    "\004\027\337\001\002\000\004\043\340\001\002\000\004" +
    "\007\341\001\002\000\004\046\342\001\002\000\004\031" +
    "\343\001\002\000\006\043\344\046\345\001\002\000\004" +
    "\007\370\001\002\000\004\007\346\001\002\000\004\046" +
    "\347\001\002\000\006\032\350\033\351\001\002\000\004" +
    "\012\361\001\002\000\004\012\352\001\002\000\004\013" +
    "\353\001\002\000\042\014\354\035\033\036\025\037\047" +
    "\042\052\046\032\050\041\052\022\057\044\063\035\065" +
    "\043\066\042\067\046\070\036\071\023\073\040\001\002" +
    "\000\042\014\uff9f\035\033\036\025\037\047\042\052\046" +
    "\032\050\041\052\022\057\044\063\035\065\043\066\042" +
    "\067\046\070\036\071\023\073\040\001\002\000\004\014" +
    "\356\001\002\000\042\014\uffa0\035\033\036\025\037\047" +
    "\042\052\046\032\050\041\052\022\057\044\063\035\065" +
    "\043\066\042\067\046\070\036\071\023\073\040\001\002" +
    "\000\004\014\uffa1\001\002\000\004\014\uff9e\001\002\000" +
    "\004\013\362\001\002\000\042\014\363\035\033\036\025" +
    "\037\047\042\052\046\032\050\041\052\022\057\044\063" +
    "\035\065\043\066\042\067\046\070\036\071\023\073\040" +
    "\001\002\000\042\014\uffa7\035\033\036\025\037\047\042" +
    "\052\046\032\050\041\052\022\057\044\063\035\065\043" +
    "\066\042\067\046\070\036\071\023\073\040\001\002\000" +
    "\004\014\365\001\002\000\042\014\uffa8\035\033\036\025" +
    "\037\047\042\052\046\032\050\041\052\022\057\044\063" +
    "\035\065\043\066\042\067\046\070\036\071\023\073\040" +
    "\001\002\000\004\014\uffa9\001\002\000\004\014\uffa6\001" +
    "\002\000\004\046\371\001\002\000\006\032\372\033\373" +
    "\001\002\000\004\012\u0103\001\002\000\004\012\374\001" +
    "\002\000\004\013\375\001\002\000\042\014\376\035\033" +
    "\036\025\037\047\042\052\046\032\050\041\052\022\057" +
    "\044\063\035\065\043\066\042\067\046\070\036\071\023" +
    "\073\040\001\002\000\042\014\uffa3\035\033\036\025\037" +
    "\047\042\052\046\032\050\041\052\022\057\044\063\035" +
    "\065\043\066\042\067\046\070\036\071\023\073\040\001" +
    "\002\000\004\014\u0100\001\002\000\042\014\uffa4\035\033" +
    "\036\025\037\047\042\052\046\032\050\041\052\022\057" +
    "\044\063\035\065\043\066\042\067\046\070\036\071\023" +
    "\073\040\001\002\000\004\014\uffa5\001\002\000\004\014" +
    "\uffa2\001\002\000\004\013\u0104\001\002\000\042\014\u0105" +
    "\035\033\036\025\037\047\042\052\046\032\050\041\052" +
    "\022\057\044\063\035\065\043\066\042\067\046\070\036" +
    "\071\023\073\040\001\002\000\042\014\uffab\035\033\036" +
    "\025\037\047\042\052\046\032\050\041\052\022\057\044" +
    "\063\035\065\043\066\042\067\046\070\036\071\023\073" +
    "\040\001\002\000\004\014\u0107\001\002\000\042\014\uffac" +
    "\035\033\036\025\037\047\042\052\046\032\050\041\052" +
    "\022\057\044\063\035\065\043\066\042\067\046\070\036" +
    "\071\023\073\040\001\002\000\004\014\uffad\001\002\000" +
    "\004\014\uffaa\001\002\000\004\014\u0180\001\002\000\010" +
    "\002\uff57\013\u010c\014\u010d\001\002\000\022\002\uff59\006" +
    "\u0115\014\u010e\035\u0112\036\u010f\037\u0116\042\u0111\046\u0114" +
    "\001\002\000\004\002\uff58\001\002\000\004\002\ufffe\001" +
    "\002\000\004\046\u017d\001\002\000\004\006\u0174\001\002" +
    "\000\004\046\u0170\001\002\000\004\046\u016d\001\002\000" +
    "\004\014\u016b\001\002\000\004\027\u0125\001\002\000\006" +
    "\004\u014a\046\u0149\001\002\000\004\046\u0123\001\002\000" +
    "\004\014\u0121\001\002\000\004\006\u0119\001\002\000\004" +
    "\004\u011a\001\002\000\004\011\u011b\001\002\000\004\012" +
    "\u011c\001\002\000\004\013\u011d\001\002\000\042\014\u011e" +
    "\035\033\036\025\037\047\042\052\046\032\050\041\052" +
    "\022\057\044\063\035\065\043\066\042\067\046\070\036" +
    "\071\023\073\040\001\002\000\004\014\uff99\001\002\000" +
    "\004\014\u0120\001\002\000\004\014\uff98\001\002\000\004" +
    "\002\ufff9\001\002\000\004\006\uff8b\001\002\000\006\007" +
    "\u0124\027\u0125\001\002\000\014\006\uff8f\035\u0112\036\u010f" +
    "\037\u0116\042\u0111\001\002\000\022\043\u012c\044\u0129\045" +
    "\u0126\055\065\056\063\062\u012b\064\u0127\072\u012a\001\002" +
    "\000\004\007\u0145\001\002\000\004\011\u0140\001\002\000" +
    "\004\007\u013d\001\002\000\004\007\u013a\001\002\000\004" +
    "\011\u0135\001\002\000\004\011\u0130\001\002\000\004\007" +
    "\u012d\001\002\000\016\006\uff7b\035\u0112\036\u010f\037\u0116" +
    "\042\u0111\046\u0114\001\002\000\004\006\uff89\001\002\000" +
    "\004\006\uff82\001\002\000\004\012\u0131\001\002\000\004" +
    "\007\u0132\001\002\000\016\006\uff76\035\u0112\036\u010f\037" +
    "\u0116\042\u0111\046\u0114\001\002\000\004\006\uff84\001\002" +
    "\000\004\006\uff7d\001\002\000\004\012\u0136\001\002\000" +
    "\004\007\u0137\001\002\000\016\006\uff75\035\u0112\036\u010f" +
    "\037\u0116\042\u0111\046\u0114\001\002\000\004\006\uff83\001" +
    "\002\000\004\006\uff7c\001\002\000\016\006\uff79\035\u0112" +
    "\036\u010f\037\u0116\042\u0111\046\u0114\001\002\000\004\006" +
    "\uff87\001\002\000\004\006\uff80\001\002\000\016\006\uff78" +
    "\035\u0112\036\u010f\037\u0116\042\u0111\046\u0114\001\002\000" +
    "\004\006\uff86\001\002\000\004\006\uff7f\001\002\000\004" +
    "\012\u0141\001\002\000\004\007\u0142\001\002\000\016\006" +
    "\uff77\035\u0112\036\u010f\037\u0116\042\u0111\046\u0114\001\002" +
    "\000\004\006\uff85\001\002\000\004\006\uff7e\001\002\000" +
    "\016\006\uff7a\035\u0112\036\u010f\037\u0116\042\u0111\046\u0114" +
    "\001\002\000\004\006\uff88\001\002\000\004\006\uff81\001" +
    "\002\000\004\006\uff93\001\002\000\004\011\u0153\001\002" +
    "\000\004\011\u014b\001\002\000\004\012\u014c\001\002\000" +
    "\004\013\u014d\001\002\000\042\014\u014e\035\033\036\025" +
    "\037\047\042\052\046\032\050\041\052\022\057\044\063" +
    "\035\065\043\066\042\067\046\070\036\071\023\073\040" +
    "\001\002\000\004\014\u0152\001\002\000\004\014\u0150\001" +
    "\002\000\004\014\u0151\001\002\000\004\002\ufffa\001\002" +
    "\000\004\002\ufffc\001\002\000\004\012\u0154\001\002\000" +
    "\004\013\u0155\001\002\000\042\014\u0156\035\033\036\025" +
    "\037\047\042\052\046\032\050\041\052\022\057\044\063" +
    "\035\065\043\066\042\067\046\070\036\071\023\073\040" +
    "\001\002\000\004\006\u0163\001\002\000\004\014\u0158\001" +
    "\002\000\004\006\u015a\001\002\000\004\014\uff62\001\002" +
    "\000\006\004\u015b\046\u0149\001\002\000\004\011\u015c\001" +
    "\002\000\004\012\u015d\001\002\000\004\013\u015e\001\002" +
    "\000\042\014\u015f\035\033\036\025\037\047\042\052\046" +
    "\032\050\041\052\022\057\044\063\035\065\043\066\042" +
    "\067\046\070\036\071\023\073\040\001\002\000\004\014" +
    "\uff60\001\002\000\004\014\u0161\001\002\000\004\014\uff5f" +
    "\001\002\000\004\014\uff63\001\002\000\006\004\u0164\046" +
    "\u0149\001\002\000\004\011\u0165\001\002\000\004\012\u0166" +
    "\001\002\000\004\013\u0167\001\002\000\042\014\u0168\035" +
    "\033\036\025\037\047\042\052\046\032\050\041\052\022" +
    "\057\044\063\035\065\043\066\042\067\046\070\036\071" +
    "\023\073\040\001\002\000\004\014\uff61\001\002\000\004" +
    "\014\u016a\001\002\000\004\014\uff5e\001\002\000\004\002" +
    "\ufff8\001\002\000\004\006\uff8d\001\002\000\006\007\u016e" +
    "\027\u0125\001\002\000\014\006\uff91\035\u0112\036\u010f\037" +
    "\u0116\042\u0111\001\002\000\004\006\uff95\001\002\000\006" +
    "\007\u0172\027\u0125\001\002\000\004\006\uff8a\001\002\000" +
    "\014\006\uff8e\035\u0112\036\u010f\037\u0116\042\u0111\001\002" +
    "\000\004\006\uff92\001\002\000\004\004\u0175\001\002\000" +
    "\004\011\u0176\001\002\000\004\012\u0177\001\002\000\004" +
    "\013\u0178\001\002\000\042\014\u0179\035\033\036\025\037" +
    "\047\042\052\046\032\050\041\052\022\057\044\063\035" +
    "\065\043\066\042\067\046\070\036\071\023\073\040\001" +
    "\002\000\004\014\uff97\001\002\000\004\014\u017b\001\002" +
    "\000\004\014\uff96\001\002\000\004\006\uff8c\001\002\000" +
    "\006\007\u017e\027\u0125\001\002\000\014\006\uff90\035\u0112" +
    "\036\u010f\037\u0116\042\u0111\001\002\000\004\006\uff94\001" +
    "\002\000\004\002\uff5a\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u017e\000\010\002\007\022\003\023\010\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\025\004" +
    "\026\007\033\010\044\011\023\014\027\016\036\021\047" +
    "\024\030\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\322" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\303" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\016\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\116" +
    "\004\026\007\033\010\044\011\023\014\027\016\036\021" +
    "\047\024\030\025\050\001\001\000\004\006\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\071\004\026\007\033\010\044\011\023" +
    "\014\027\016\036\021\047\024\030\025\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\075\004\026\007\033\010\044\011\023\014\027\016" +
    "\036\021\047\024\030\025\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\101\004" +
    "\026\007\033\010\044\011\023\014\027\016\036\021\047" +
    "\024\030\025\050\001\001\000\002\001\001\000\026\003" +
    "\103\004\026\007\033\010\044\011\023\014\027\016\036" +
    "\021\047\024\030\025\050\001\001\000\002\001\001\000" +
    "\026\003\105\004\026\007\033\010\044\011\023\014\027" +
    "\016\036\021\047\024\030\025\050\001\001\000\002\001" +
    "\001\000\026\003\107\004\026\007\033\010\044\011\023" +
    "\014\027\016\036\021\047\024\030\025\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\113\004\026\007\033\010\044\011\023\014\027\016" +
    "\036\021\047\024\030\025\050\001\001\000\002\001\001" +
    "\000\026\003\115\004\026\007\033\010\044\011\023\014" +
    "\027\016\036\021\047\024\030\025\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\122\004\026\007\033\010\044\011\023" +
    "\014\027\016\036\021\047\024\030\025\050\001\001\000" +
    "\002\001\001\000\004\006\124\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\127\004\026\007\033\010" +
    "\044\011\023\014\027\016\036\021\047\024\030\025\050" +
    "\001\001\000\002\001\001\000\006\005\134\006\136\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\144\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\153\004\026\007\033\010\044\011" +
    "\023\014\027\016\036\021\047\024\030\025\050\001\001" +
    "\000\026\003\156\004\026\007\033\010\044\011\023\014" +
    "\027\016\036\021\047\024\030\025\050\001\001\000\002" +
    "\001\001\000\026\003\155\004\026\007\033\010\044\011" +
    "\023\014\027\016\036\021\047\024\030\025\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\170\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\173\004\026\007\033\010\044\011" +
    "\023\014\027\016\036\021\047\024\030\025\050\001\001" +
    "\000\002\001\001\000\004\006\175\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\200\004\026\007\033" +
    "\010\044\011\023\014\027\016\036\021\047\024\030\025" +
    "\050\001\001\000\002\001\001\000\010\005\204\006\136" +
    "\017\203\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\234\006\136\001\001\000\002" +
    "\001\001\000\006\005\210\006\136\001\001\000\002\001" +
    "\001\000\026\003\213\004\026\007\033\010\044\011\023" +
    "\014\027\016\036\021\047\024\030\025\050\001\001\000" +
    "\026\003\226\004\026\007\033\010\044\011\023\014\027" +
    "\016\036\021\047\024\030\025\050\001\001\000\002\001" +
    "\001\000\026\003\216\004\026\007\033\010\044\011\023" +
    "\014\027\016\036\021\047\024\030\025\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\003\221\004\026" +
    "\007\033\010\044\011\023\014\027\016\036\021\047\024" +
    "\030\025\050\001\001\000\026\003\224\004\026\007\033" +
    "\010\044\011\023\014\027\016\036\021\047\024\030\025" +
    "\050\001\001\000\002\001\001\000\026\003\223\004\026" +
    "\007\033\010\044\011\023\014\027\016\036\021\047\024" +
    "\030\025\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\231\004" +
    "\026\007\033\010\044\011\023\014\027\016\036\021\047" +
    "\024\030\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\233\004\026\007\033\010\044\011\023" +
    "\014\027\016\036\021\047\024\030\025\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\240\004\026\007\033\010\044\011\023\014\027\016" +
    "\036\021\047\024\030\025\050\001\001\000\026\003\253" +
    "\004\026\007\033\010\044\011\023\014\027\016\036\021" +
    "\047\024\030\025\050\001\001\000\002\001\001\000\026" +
    "\003\243\004\026\007\033\010\044\011\023\014\027\016" +
    "\036\021\047\024\030\025\050\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\246\004\026\007\033\010" +
    "\044\011\023\014\027\016\036\021\047\024\030\025\050" +
    "\001\001\000\026\003\251\004\026\007\033\010\044\011" +
    "\023\014\027\016\036\021\047\024\030\025\050\001\001" +
    "\000\002\001\001\000\026\003\250\004\026\007\033\010" +
    "\044\011\023\014\027\016\036\021\047\024\030\025\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\256\004\026\007\033" +
    "\010\044\011\023\014\027\016\036\021\047\024\030\025" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\003\260\004\026\007\033\010\044\011\023\014\027\016" +
    "\036\021\047\024\030\025\050\001\001\000\002\001\001" +
    "\000\006\005\262\006\136\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\270\004\026\007\033\010\044\011" +
    "\023\014\027\016\036\021\047\024\030\025\050\001\001" +
    "\000\002\001\001\000\004\006\272\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\275\004\026\007\033" +
    "\010\044\011\023\014\027\016\036\021\047\024\030\025" +
    "\050\001\001\000\002\001\001\000\004\006\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\302\004" +
    "\026\007\033\010\044\011\023\014\027\016\036\021\047" +
    "\024\030\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\313\004\026\007\033\010\044\011\023" +
    "\014\027\016\036\021\047\024\030\025\050\001\001\000" +
    "\026\003\306\004\026\007\033\010\044\011\023\014\027" +
    "\016\036\021\047\024\030\025\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\311\004\026\007\033" +
    "\010\044\011\023\014\027\016\036\021\047\024\030\025" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\320\004\026\007\033\010\044\011\023" +
    "\014\027\016\036\021\047\024\030\025\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\325\004\026\007\033\010\044\011" +
    "\023\014\027\016\036\021\047\024\030\025\050\001\001" +
    "\000\002\001\001\000\004\006\327\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\003\332\004\026\007\033" +
    "\010\044\011\023\014\027\016\036\021\047\024\030\025" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\003\354\004\026\007\033\010\044\011" +
    "\023\014\027\016\036\021\047\024\030\025\050\001\001" +
    "\000\026\003\357\004\026\007\033\010\044\011\023\014" +
    "\027\016\036\021\047\024\030\025\050\001\001\000\002" +
    "\001\001\000\026\003\356\004\026\007\033\010\044\011" +
    "\023\014\027\016\036\021\047\024\030\025\050\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\363\004\026\007\033\010\044\011\023\014\027" +
    "\016\036\021\047\024\030\025\050\001\001\000\026\003" +
    "\366\004\026\007\033\010\044\011\023\014\027\016\036" +
    "\021\047\024\030\025\050\001\001\000\002\001\001\000" +
    "\026\003\365\004\026\007\033\010\044\011\023\014\027" +
    "\016\036\021\047\024\030\025\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\376\004\026\007\033\010\044\011\023\014\027" +
    "\016\036\021\047\024\030\025\050\001\001\000\026\003" +
    "\u0101\004\026\007\033\010\044\011\023\014\027\016\036" +
    "\021\047\024\030\025\050\001\001\000\002\001\001\000" +
    "\026\003\u0100\004\026\007\033\010\044\011\023\014\027" +
    "\016\036\021\047\024\030\025\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\u0105" +
    "\004\026\007\033\010\044\011\023\014\027\016\036\021" +
    "\047\024\030\025\050\001\001\000\026\003\u0108\004\026" +
    "\007\033\010\044\011\023\014\027\016\036\021\047\024" +
    "\030\025\050\001\001\000\002\001\001\000\026\003\u0107" +
    "\004\026\007\033\010\044\011\023\014\027\016\036\021" +
    "\047\024\030\025\050\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\012" +
    "\u0116\013\u0117\015\u010f\020\u0112\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u017b\001\001\000\002\001" +
    "\001\000\004\015\u0170\001\001\000\004\015\u016b\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\003\u011e\004\026\007\033\010\044" +
    "\011\023\014\027\016\036\021\047\024\030\025\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\u0147\001\001\000\004\006\u0127\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u012d\015\u012e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\013\u0132\015\u0133\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\013\u0137" +
    "\015\u0138\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\u013a\015\u013b\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\u013d\015\u013e\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\013\u0142\015\u0143\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\u0145\015\u0146\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\u014e\004\026\007\033\010\044\011\023\014" +
    "\027\016\036\021\047\024\030\025\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\u0156\004\026\007\033\010\044\011\023\014" +
    "\027\016\036\021\047\024\030\025\050\001\001\000\004" +
    "\020\u0161\001\001\000\002\001\001\000\004\020\u0158\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\003\u015f\004" +
    "\026\007\033\010\044\011\023\014\027\016\036\021\047" +
    "\024\030\025\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\u0168\004\026\007\033\010\044\011\023\014\027" +
    "\016\036\021\047\024\030\025\050\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\u016e\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0172\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\u0179\004\026\007\033\010\044\011\023\014" +
    "\027\016\036\021\047\024\030\025\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\u017e\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


    
    private Symbol s;        

    public void syntax_error(Symbol s){
        //this.s = s;

        Errores e = new Errores("Error sintactico en la linea "+(s.right+1)+"\n\tSintaxis invalida [ " + s.value + " ]");
        FeedIT.notificar(e);
        
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        Errores e = new Errores("Error sintactico no recuperable en la Linea " + (s.right+1) + "\n\tSintaxis invalida [ " + s.value +" ]");
        FeedIT.notificar(e);
        
    }

    public void report_error(String message, Object info){ }    
    public void report_fatal_error(String message, Object info){ }

    public Symbol getS(){        
        return this.s;
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {

   
    String codObjeto = "";
    Stack pilaInicio = new Stack();       
    Stack pilaSent = new Stack();       
    Stack pilaFin = new Stack();      
    int i = 1, sentAux;
    String incAux;

    boolean statusDec, statusTipo, statusOp;
    String auxObj = "";
    String auxRec = "";

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // ERRORDECLARACION ::= Int Identificador 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // ERRORDECLARACION ::= Int P_coma 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tInt P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // ERRORDECLARACION ::= Identificador P_coma 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un tipo de dato");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ERRORDECLARACION ::= Int Identificador SENTENCIA 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un [;]");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ERRORDECLARACION ::= Int P_coma SENTENCIA 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tInt P_coma SENTENCIA");
        Errores e = new Errores("Error sintactico, Se esperaba un identificador");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORDECLARACION",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ERRORINICIO ::= Class Identificador 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Identificador");
        Errores e = new Errores("Error sintactico, Se esperaba una llave de Apertura");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ERRORINICIO ::= Class Identificador Llave_C 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Identificador Llave_C");
        Errores e = new Errores("Error sintactico, Se esperaba una llave de Apertura");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ERRORINICIO ::= Class Identificador Llave_A 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Identificador Llave_A");
        Errores e = new Errores("Error sintactico, Se esperaba una llave de cierre");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ERRORINICIO ::= Class Llave_A Llave_C 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tClass Llave_A Llave_C");
        Errores e = new Errores("Error sintactico, Se esperaba [Identificador]");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ERRORINICIO ::= Identificador Llave_A Llave_C 
            {
              Object RESULT =null;
		
        FeedIT.Producciones.add("Gramática invalida:\n\tIdentificador Llave_A Llave_C");
        Errores e = new Errores("Error sintactico, Se esperaba [class]");
        FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORINICIO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // LLAMARFUN ::= Identificador Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMARFUN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // LLAMARFUN ::= Identificador Parentesis_A Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMARFUN",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A Llave_C Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A Llave_C Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C CREAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // CREAFUN ::= Fun Identificador Parentesis_A Parentesis_C Llave_A Llave_C CREAFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CREAFUN",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // LOGICAS ::= Not Parentesis_A SENTENCIABOOLEANA Parentesis_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // LOGICAS ::= SENTENCIABOOLEANA Or SENTENCIABOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // LOGICAS ::= SENTENCIABOOLEANA And SENTENCIABOOLEANA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LOGICAS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // ACCIONES ::= Time Parentesis_A Numero Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // ACCIONES ::= Fpremio Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // ACCIONES ::= Fmasaje Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // ACCIONES ::= Fjuguete Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // ACCIONES ::= Fluz Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // ACCIONES ::= Fcomer Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // ACCIONES ::= Fagua Parentesis_A BOOLEAN Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ACCIONES ::= Time Parentesis_A Numero Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ACCIONES ::= Fpremio Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ACCIONES ::= Fmasaje Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // ACCIONES ::= Fjuguete Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // ACCIONES ::= Fluz Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // ACCIONES ::= Fcomer Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // ACCIONES ::= Fagua Parentesis_A BOOLEAN Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ACCIONES",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // ASIGNAG ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // ASIGNAG ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // ASIGNAG ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // ASIGNAG ::= Identificador Asignacion BOOLEAN P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // ASIGNAG ::= Identificador Asignacion Flotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // ASIGNAG ::= Identificador Asignacion Texto P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // ASIGNAG ::= Identificador Asignacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // ASIGNAG ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // ASIGNAG ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ASIGNAG ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ASIGNAG ::= Identificador Asignacion BOOLEAN P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ASIGNAG ::= Identificador Asignacion Flotante P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ASIGNAG ::= Identificador Asignacion Texto P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ASIGNAG ::= Identificador Asignacion Numero P_coma ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ASIGNAG ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // ASIGNAG ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // ASIGNAG ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // ASIGNAG ::= Identificador Asignacion BOOLEAN P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ASIGNAG ::= Identificador Asignacion Flotante P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ASIGNAG ::= Identificador Asignacion Texto P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ASIGNAG ::= Identificador Asignacion Numero P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNAG",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // VARIABLESG ::= Boolean ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VARIABLESG ::= String ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VARIABLESG ::= Float ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VARIABLESG ::= Int ASIGNAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VARIABLESG ::= Boolean Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VARIABLESG ::= String Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // VARIABLESG ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // VARIABLESG ::= Int Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // VARIABLESG ::= Boolean Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // VARIABLESG ::= String Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // VARIABLESG ::= Float Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // VARIABLESG ::= Int Identificador P_coma VARIABLESG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESG",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // VARIABLESGF ::= ASIGNAG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // VARIABLESGF ::= ASIGNAG Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // VARIABLESGF ::= VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // VARIABLESGF ::= VARIABLESG Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VARIABLESGF",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // WHILE ::= While Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Dec Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Identificador P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // FOR ::= For Parentesis_A Int Identificador Asignacion Numero P_coma Identificador OpR Numero P_coma Identificador Inc Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-17)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // IF ::= If Parentesis_A LOGICAS Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C Else Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF ::= If Parentesis_A SENTENCIABOOLEANA Parentesis_C Llave_A SENTENCIA Llave_C SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BOOLEAN ::= False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BOOLEAN ::= True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIABOOLEANA ::= Identificador Igual BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIABOOLEANA ::= Numero Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIABOOLEANA ::= Identificador Igual Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIABOOLEANA ::= Identificador Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIABOOLEANA ::= Texto Igual Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIABOOLEANA ::= Identificador Igual Texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIABOOLEANA ::= Flotante OpR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIABOOLEANA ::= Numero OpR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIABOOLEANA ::= Identificador OpR Flotante 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIABOOLEANA ::= Identificador OpR Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIABOOLEANA ::= Identificador OpR Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIABOOLEANA ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIABOOLEANA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ASIGNACION ::= Identificador Asignacion Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ASIGNACION ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ASIGNACION ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ASIGNACION ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ASIGNACION ::= Identificador Asignacion BOOLEAN P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ASIGNACION ::= Identificador Asignacion Flotante P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASIGNACION ::= Identificador Asignacion Texto P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASIGNACION ::= Identificador Asignacion Numero P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASIGNACION ::= Identificador Asignacion Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= Identificador Asignacion Candil Parentesis_A Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= Identificador Asignacion Humedad Parentesis_A Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ASIGNACION ::= Identificador Asignacion Peso Parentesis_A Parentesis_C P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASIGNACION ::= Identificador Asignacion BOOLEAN P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASIGNACION ::= Identificador Asignacion Flotante P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASIGNACION ::= Identificador Asignacion Texto P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION ::= Identificador Asignacion Numero P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION ::= Int Identificador Texto P_coma 
            {
              Object RESULT =null;
		
    FeedIT.Producciones.add("Gramatica invalida:\n\tInt Identificador Texto P_coma");
    Errores e = new Errores("Error Semantico, tipo de dato incompatible, no se puede asignar [Texto] a un entero");
    FeedIT.errores.add(e);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION ::= Boolean ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION ::= String ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= Float ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= Int ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= Boolean Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION ::= String Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION ::= Float Identificador P_coma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION ::= Int Identificador P_coma 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tInt Identificador P_coma");
        System.out.println("Producción añadida: \n\tInt Identificador P_coma");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION ::= Boolean Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION ::= String Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION ::= Float Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION ::= Int Identificador P_coma SENTENCIA 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tInt Identificador P_coma SENTENCIA");
        System.out.println("Producción añadida: \n\tInt Identificador P_coma SENTENCIA");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= LLAMARFUN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= ERRORASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SENTENCIA ::= ACCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= ERRORDECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIACLASE ::= Class Identificador Llave_A CREAFUN Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A CREAFUN Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIACLASE ::= Class Identificador Llave_A VARIABLESGF Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A VARIABLESGF Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIACLASE ::= Class Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIACLASE ::= Fun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tFun Main Parentesis_A Parentesis_C Llave_A SENTENCIA Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIACLASE ::= Class Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A Llave_C Llave_C 
            {
              Object RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A Fun Main Parentesis_A Parentesis_C Llave_A Llave_C Llave_C");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIACLASE ::= Fun Main Parentesis_A Parentesis_C Llave_A Llave_C 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tFun Main Parentesis_A Parentesis_C Llave_A Llave_C");
        Objetos o = new Objetos(id,td,idright,idleft);
        System.out.println("Objeto creado");
        FeedIT.objetos.add(o);
        System.out.println("Objeto agregado");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIACLASE ::= Class Identificador Llave_A Llave_C 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object td = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        FeedIT.Producciones.add("Gramática Correcta:\n\tClass Identificador Llave_A Llave_C");
        Objetos o = new Objetos(id,td,idright,idleft);
        System.out.println("Objeto creado");
        FeedIT.objetos.add(o);
        System.out.println("Objeto agregado");
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIACLASE",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= ERRORINICIO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= SENTENCIACLASE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

