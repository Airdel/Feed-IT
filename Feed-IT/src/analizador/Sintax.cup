package analizador;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;

action code
    {:
        Hashtable table = new Hashtable();
    :};
parser code
{:
    static TablaSymbolos tablaSymbolos = new TablaSymbolos();
    static int verificarTipo = 0;
    static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
		new Sintax(new LexerCup(System.in)).parse();
	}
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        Editor.erroresSintacticos +=("Error de sintaxis. Linea: " + (s.right + 1) +
		". Texto: \"" + s.value + "\" \n");
    }

    public Symbol getS(){
        return this.s;
    }   
:};
   
terminal String IDENTIFICADOR;
terminal Integer NUMERO;
terminal Double NUMERO_DECIMAL, NUMERO_EXPONENTE;
terminal String CADENA_TEXTO;
terminal String RESERVADA_BOOLEANO,RESERVADA_CADENA,RESERVADA_CORTO, RESERVADA_ENTERO, RESERVADA_DECIMAL;
terminal String RESERVADA_VERDADERO,RESERVADA_FALSO;
terminal ASIGNACION,
        COMA,
        DOS_PUNTOS,    
        ESPECIALES_SOLAS,
        ESPECIALES_ID,
        ESPECIALES_CT,
        ESPECIALES_DOS,
        ESPECIALES_PARAMETRO,
        ESPECIALES_RUTA,
        ERROR,
        OP_ARITMETICO2,
        OP_LOGICO,
        OP_RELACIONAL,
        OP_MAS,
        OP_MENOS,
        PARENTESIS_DER,
        PARENTESIS_IZQ,
        PUNTO_COMA,         
        RESERVADA_CICLO,
        RESERVADA_DECLARACION,  
        RESERVADA_FIN,   
        RESERVADA_FUNCION,                    
        RESERVADA_HAZ,               
        RESERVADA_INICIAR,    
        RESERVADA_LLAMAR,
        RESERVADA_MIENTRAS,
        RESERVADA_NO,
        RESERVADA_PRINCIPAL,
        RESERVADA_RETORNO,
        RESERVADA_SI;   

non terminal asignacion, ciclo, inicio, declaracion ,parte_declaracion, declaracion_ciclo,  
    expresion, exp_bol, factor,  mientras, llamar_funcion, haz, reservada_esp, sentencia,
    sentencia_prima, si, si_no, parte_principal,expresion_booleana, parametros, 
    parte_funciones, ruta, termino, tipo_retorno, retorno,  termino_bool;

start with inicio;

inicio ::= 
    RESERVADA_INICIAR IDENTIFICADOR:nombre DOS_PUNTOS 
        RESERVADA_DECLARACION DOS_PUNTOS 
            parte_declaracion 
        RESERVADA_FIN
        RESERVADA_PRINCIPAL DOS_PUNTOS 
            parte_principal
        RESERVADA_FIN
        parte_funciones
    RESERVADA_FIN 
    {:
        try{
            TablaSymbolos.crear(nombre, "--","Nombre");
            TablaSymbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS 
        RESERVADA_PRINCIPAL DOS_PUNTOS 
            parte_principal
        RESERVADA_FIN
        parte_funciones
    RESERVADA_FIN
    | error RESERVADA_FIN
    | error DOS_PUNTOS
    
;

parte_declaracion ::=
    parte_declaracion declaracion |
    declaracion 
;
declaracion ::=
    RESERVADA_BOOLEANO:tipo IDENTIFICADOR:nombre ASIGNACION RESERVADA_FALSO:valor PUNTO_COMA:coma 
   {:
       try{
            TablaSymbolos.crear(nombre, tipo,"Variable");
            TablaSymbolos.insertar(nombre, String.valueOf(valor));
            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);        
       
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_BOOLEANO:tipo IDENTIFICADOR:nombre ASIGNACION RESERVADA_VERDADERO:valor PUNTO_COMA 
    {:
        try{
            if(String.valueOf(valor).equals("verdadero")){
                TablaSymbolos.crear(nombre, tipo,"variable");
                String cad = String.valueOf(valor);
                TablaSymbolos.insertar(nombre, cad);
                //Crear relacion ciclo PARA con su variable asociada
                TablaSymbolos.lista.push(nombre);
            }
            else{                
                TablaSymbolos.logErrores("Valor incompatible con variable 'booleana', linea:"+tipoleft);
            }

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :} 
    | 
    RESERVADA_CADENA:tipo   IDENTIFICADOR:nombre ASIGNACION CADENA_TEXTO:valor        PUNTO_COMA 
    {:
        try{
            TablaSymbolos.crear(nombre, tipo,"Variable");
            String cad = String.valueOf(valor);
            String s = cad.replace("'","");
            TablaSymbolos.insertar(nombre, s);

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);           
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_CORTO:tipo    IDENTIFICADOR:nombre ASIGNACION NUMERO:valor              PUNTO_COMA 
    {:
        try{
            TablaSymbolos.crear(nombre, tipo,"Variable");
            TablaSymbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);           
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_DECIMAL:tipo  IDENTIFICADOR:nombre ASIGNACION NUMERO:valor              PUNTO_COMA 
    {:
        try{
            TablaSymbolos.crear(nombre, tipo,"Variable");
            TablaSymbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_DECIMAL:tipo  IDENTIFICADOR:nombre ASIGNACION NUMERO_DECIMAL:valor      PUNTO_COMA 
    {:
        try{
            TablaSymbolos.crear(nombre, tipo,"Variable");
            TablaSymbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);        
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_DECIMAL:tipo  IDENTIFICADOR:nombre ASIGNACION NUMERO_EXPONENTE:valor    PUNTO_COMA 
    {:
        try{
            TablaSymbolos.crear(nombre, tipo,"variable");
            TablaSymbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_ENTERO:tipo IDENTIFICADOR:nombre ASIGNACION NUMERO:valor PUNTO_COMA 
    {:
        try{
            TablaSymbolos.crear(nombre, tipo,"Variable");
            TablaSymbolos.insertar(nombre, valor);
            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    | error PUNTO_COMA
    | error ASIGNACION

;

declaracion_ciclo ::=  
    RESERVADA_CORTO:tipo    IDENTIFICADOR:nombre ASIGNACION NUMERO:valor              PUNTO_COMA 
    {:
        try{
            TablaSymbolos.crear(nombre, tipo,"Variable en ciclo");
            TablaSymbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_ENTERO:tipo   IDENTIFICADOR:nombre ASIGNACION NUMERO:valor              PUNTO_COMA 
    {:
        try{
            TablaSymbolos.crear(nombre, tipo,"Variable en ciclo");
            TablaSymbolos.insertar(nombre, valor);

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(nombre);        
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    | error PUNTO_COMA
    
;

parte_principal ::=
    parte_principal si |
    si |
    parte_principal si_no |
    si_no |
    parte_principal mientras |
    mientras | 
    parte_principal reservada_esp |
    reservada_esp |
    parte_principal asignacion |
    asignacion  |
    parte_principal ciclo |
    ciclo | 
    parte_principal haz |
    haz   |
    parte_principal llamar_funcion |
    llamar_funcion
    | error DOS_PUNTOS
    | error PARENTESIS_IZQ
    | error PARENTESIS_DER
;    

parte_funciones ::=
    parte_funciones  RESERVADA_FUNCION IDENTIFICADOR:id PARENTESIS_IZQ parametros PARENTESIS_DER tipo_retorno:tr DOS_PUNTOS  
        parte_principal
        RESERVADA_RETORNO retorno:r PUNTO_COMA
    RESERVADA_FIN   
    {:
        try{
            TablaSymbolos.crear(id, (String) tr,"Función");
            TablaSymbolos.insertar(id, String.valueOf(r));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(id);       
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
    |
    RESERVADA_FUNCION IDENTIFICADOR:id PARENTESIS_IZQ parametros PARENTESIS_DER tipo_retorno:tr DOS_PUNTOS  
        parte_principal
        RESERVADA_RETORNO retorno:r PUNTO_COMA
    RESERVADA_FIN   
    {:
        try{
            TablaSymbolos.crear(id, (String) tr,"funcion");
            TablaSymbolos.insertar(id, String.valueOf(r));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(id);       
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}|
    RESERVADA_FUNCION IDENTIFICADOR:id PARENTESIS_IZQ  PARENTESIS_DER tipo_retorno:tr DOS_PUNTOS  
        parte_principal
        RESERVADA_RETORNO retorno:r PUNTO_COMA
    RESERVADA_FIN   
    {:
        try{
            TablaSymbolos.crear(id, (String) tr,"Función");
            TablaSymbolos.insertar(id, String.valueOf(r));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSymbolos.lista.push(id);           
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSymbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    :}
;
parametros ::=
    parametros RESERVADA_ENTERO:td IDENTIFICADOR:id COMA {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} |
    RESERVADA_ENTERO:td IDENTIFICADOR:id {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} |
    parametros RESERVADA_BOOLEANO:td IDENTIFICADOR:id COMA {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} |
    RESERVADA_BOOLEANO:td IDENTIFICADOR:id {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} |
    parametros RESERVADA_CADENA:td IDENTIFICADOR:id COMA {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} |
    RESERVADA_CADENA:td IDENTIFICADOR:id {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} |
    parametros RESERVADA_DECIMAL:td IDENTIFICADOR:id COMA {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} |
    RESERVADA_DECIMAL:td IDENTIFICADOR:id {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} |
    parametros RESERVADA_CORTO:td IDENTIFICADOR:id COMA {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} |
    RESERVADA_CORTO:td IDENTIFICADOR:id {:
        TablaSymbolos.crear(id, (String) td,"Variabe en función");
        :} 
;
tipo_retorno ::=
    RESERVADA_CADENA {: RESULT = "cadena"; :} 
    | RESERVADA_ENTERO  {: RESULT = "entero"; :} 
    | RESERVADA_CORTO  {: RESULT = "corto"; :} 
    | RESERVADA_DECIMAL {: RESULT = "decimal"; :} 
    | RESERVADA_BOOLEANO {: RESULT = "booleano"; :} 
;
retorno ::=
   
    IDENTIFICADOR:identificador
    {:
        //Buscar variable en la tabla de symbolos
        Symbolo sym = TablaSymbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sym == null){
            Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador 
            +"' no existe.\n";
        }
        else{                    
            RESULT = sym.valor;
        }
    :} |
    CADENA_TEXTO:r {:RESULT = r;:} | 
    NUMERO:r {:RESULT = r;:} | 
    NUMERO_DECIMAL:r {:RESULT = r;:} | 
    NUMERO_EXPONENTE:r {:RESULT = r;:} | 
    RESERVADA_VERDADERO:r {:RESULT = r;:} | 
    RESERVADA_FALSO:r {:RESULT = r;:} 
;

llamar_funcion ::=
    RESERVADA_LLAMAR IDENTIFICADOR PUNTO_COMA
;

reservada_esp ::=
    ESPECIALES_SOLAS PUNTO_COMA |
    ESPECIALES_CT CADENA_TEXTO PUNTO_COMA |
    ESPECIALES_CT IDENTIFICADOR: identificador PUNTO_COMA
    {:
        //Buscar variable en la tabla de symbolos
        Symbolo sym = TablaSymbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sym == null){
            Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador 
            +"' no existe.\n";
        }
        else{                    
            RESULT = sym.valor;
        }
    :}   |
    ESPECIALES_ID IDENTIFICADOR PUNTO_COMA |
    ESPECIALES_ID NUMERO PUNTO_COMA |
    ESPECIALES_DOS ESPECIALES_PARAMETRO PUNTO_COMA |
    ESPECIALES_DOS ESPECIALES_PARAMETRO IDENTIFICADOR PUNTO_COMA |
    ESPECIALES_DOS ESPECIALES_PARAMETRO NUMERO PUNTO_COMA |
    ESPECIALES_RUTA PARENTESIS_IZQ NUMERO COMA NUMERO PARENTESIS_DER PUNTO_COMA |
    ESPECIALES_RUTA PARENTESIS_IZQ NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_DER PUNTO_COMA |
    ESPECIALES_RUTA PARENTESIS_IZQ NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_DER PUNTO_COMA 
;

mientras ::=
    RESERVADA_MIENTRAS PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS 
        parte_principal
    RESERVADA_FIN
;
haz ::=
    RESERVADA_HAZ DOS_PUNTOS 
        parte_principal
        RESERVADA_MIENTRAS PARENTESIS_IZQ expresion_booleana PARENTESIS_DER PUNTO_COMA
    RESERVADA_FIN
;
si ::=    
    RESERVADA_SI PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS 
        parte_principal
    RESERVADA_FIN
;
si_no ::=    
    RESERVADA_SI PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS 
        parte_principal
    RESERVADA_SI RESERVADA_NO DOS_PUNTOS
        parte_principal
    RESERVADA_FIN
;
ciclo ::=
        RESERVADA_CICLO PARENTESIS_IZQ declaracion_ciclo expresion_booleana PUNTO_COMA IDENTIFICADOR OP_MAS OP_MAS PARENTESIS_DER DOS_PUNTOS
            parte_principal
        RESERVADA_FIN
;
asignacion ::= /* Epsilon */
   // asignacion IDENTIFICADOR ASIGNACION expresion PUNTO_COMA   |
    IDENTIFICADOR:id ASIGNACION expresion:exp PUNTO_COMA    {:
        Symbolo sym = TablaSymbolos.buscar(id);
        String s;
        //Si es nulo, devuelvo un error
        if (sym == null){
            Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+id +"' no existe.\n";
            RESULT = 0;
        }else{
            s = exp.toString().replace("'","");
            TablaSymbolos.insertar(id, s); 
        }
    :}
;
expresion ::=
    termino:f1 OP_MAS expresion:f2 
   {:     
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                //String s = f2.toString().replace("'","");
                String s = f2.toString();
                s = f1.toString() + s ;
                RESULT = s;
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                tmp = tmp + Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Integer tmp = Integer.parseInt(f1.toString());
                tmp = tmp +  Integer.parseInt(f2.toString());
                RESULT = tmp;
            }               
        }
        if (f1 instanceof Double){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+
                " y '"+f2.toString()+"' no compatibles\n");
            }else{
                if (f2 instanceof Double){
                    Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                    tmp = tmp + Double.parseDouble(f2.toString());
                    RESULT = tmp;                
                }else{
                    if (f2 instanceof Integer){
                        Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                        tmp = tmp + Double.parseDouble(f2.toString());
                        RESULT = tmp;
                    }
                }
            }
        }
        if (f1 instanceof String){
            if(f2 instanceof String){
                RESULT = f1.toString() + f2.toString();          
            }else{
                if (f2 instanceof Double){
                    Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+
                    " y '"+f2.toString()+"' no compatibles\n");             
                }else{
                    if (f2 instanceof Integer)
                        RESULT = f1.toString() + f2.toString(); 
                }    
            }
        }
     :}
    |   
    termino:f1 OP_MENOS expresion:f2  
     {:     
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                tmp = tmp - Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Integer tmp = Integer.parseInt(f1.toString());
                tmp = tmp -  Integer.parseInt(f2.toString());
                RESULT = tmp;
            }
        }
        if (f1 instanceof Double){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                tmp = tmp - Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                tmp = tmp - Double.parseDouble(f2.toString());
                RESULT = tmp;
            }
        }
        if (f1 instanceof String | f2 instanceof String) {
            Editor.erroresSintacticos += ("Error sintáctico: las cadenas no se pueden restar\n");     
        }
     :}
    |
    termino:t{:RESULT = t;:}

;

termino ::=
    factor:f1 OP_ARITMETICO2:op factor:f2 
    {:
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                if(op.toString().equals("*"))
                    tmp = tmp * Double.parseDouble(f2.toString());
                else                    
                    tmp = tmp / Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Integer tmp = Integer.parseInt(f1.toString());
                if(op.toString().equals("*"))
                    tmp = tmp * Integer.parseInt(f2.toString());
                else                   
                if(op.toString().equals("&"))
                    tmp = tmp & Integer.parseInt(f2.toString());
                else                    
                    tmp = tmp /  Integer.parseInt(f2.toString());
                RESULT = tmp;
            }
        }
        if (f1 instanceof String){
            if(f2 instanceof String){
                if(op.toString().equals("*"))
                    Editor.erroresSintacticos += ("Error sintáctico: Dos cadenas no se pueden multiplicar\n");
                else
                    Editor.erroresSintacticos += ("Error sintáctico: Dos cadenas no se pueden dividir\n");                    
            }
            if (f2 instanceof Double){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");             
            }
            if (f2 instanceof Integer){
                Double tmp = Double.parseDouble(f1.toString());
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
        }
        if (f1 instanceof Double){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                if(op.toString().equals("*"))
                    tmp = tmp * Double.parseDouble(f2.toString());
                else                    
                    tmp = tmp / Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Double tmp = Double.parseDouble(f1.toString());
                if(op.toString().equals("*"))
                    tmp = tmp * Double.parseDouble(f2.toString());
                else                    
                    tmp = tmp /  Double.parseDouble(f2.toString());
                RESULT = tmp;
            }
        }
    :} 
    | 
    factor:f {: RESULT = f; :} | 
    PARENTESIS_IZQ  factor:f PARENTESIS_DER {: RESULT = f; :} 
;

factor ::=
    IDENTIFICADOR:identificador
            {:
                //Buscar variable en la tabla de simbolos
                Simbolo sym = TablaSimbolos.buscar(identificador);
                //Si es nulo, devuelvo un error
                if (sym == null){
                    Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador 
                    +"' no existe.\n";
                    RESULT = 0;
                }
                else{                    
                    RESULT = sym.valor;
                }
            :} | 
    NUMERO:num  {:RESULT = num; :}  |
    NUMERO_DECIMAL:dml {: RESULT = dml; :}  |
    NUMERO_EXPONENTE:ne {: RESULT = ne; :}  |
    CADENA_TEXTO:ct {: RESULT = ct; :}      
;

expresion_booleana ::=
    expresion_booleana OP_LOGICO exp_bol |
    exp_bol
;

exp_bol::=
    termino_bool OP_RELACIONAL termino_bool |
    termino_bool
;

termino_bool::=
    IDENTIFICADOR:identificador
    {:
        //Buscar variable en la tabla de symbolos
        Symbolo sym = TablaSymbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sym == null) {
            Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
            RESULT = 0;
        }
        else{
            RESULT = sym.valor;
        }
    :}  |
    NUMERO |
    RESERVADA_FALSO |
    RESERVADA_VERDADERO
;
