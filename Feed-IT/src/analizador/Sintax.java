
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Jun 24 08:32:42 MDT 2021
//----------------------------------------------------

package analizador;

import java.util.*;
import java.io.*;
import java_cup.runtime.Symbol;
import java.util.logging.Level;
import java.util.Stack;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Jun 24 08:32:42 MDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\004\017\000\002\004" +
    "\013\000\002\004\004\000\002\004\004\000\002\006\004" +
    "\000\002\006\003\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\005\007\000\002" +
    "\005\007\000\002\005\007\000\002\005\007\000\002\005" +
    "\004\000\002\005\004\000\002\007\007\000\002\007\007" +
    "\000\002\007\004\000\002\023\004\000\002\023\003\000" +
    "\002\023\004\000\002\023\003\000\002\023\004\000\002" +
    "\023\003\000\002\023\004\000\002\023\003\000\002\023" +
    "\004\000\002\023\003\000\002\023\004\000\002\023\003" +
    "\000\002\023\004\000\002\023\003\000\002\023\004\000" +
    "\002\023\003\000\002\023\004\000\002\023\004\000\002" +
    "\023\004\000\002\026\017\000\002\026\016\000\002\026" +
    "\015\000\002\025\006\000\002\025\004\000\002\025\006" +
    "\000\002\025\004\000\002\025\006\000\002\025\004\000" +
    "\002\025\006\000\002\025\004\000\002\025\006\000\002" +
    "\025\004\000\002\031\003\000\002\031\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\032\003\000" +
    "\002\032\003\000\002\032\003\000\002\032\003\000\002" +
    "\014\005\000\002\016\004\000\002\016\005\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\006\000\002\016\006\000\002\016\011\000" +
    "\002\016\015\000\002\016\021\000\002\013\011\000\002" +
    "\015\013\000\002\021\011\000\002\022\015\000\002\003" +
    "\016\000\002\002\006\000\002\010\005\000\002\010\005" +
    "\000\002\010\003\000\002\030\005\000\002\030\003\000" +
    "\002\030\005\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\024" +
    "\005\000\002\024\003\000\002\011\005\000\002\011\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\006\003\004\047\005\001\002\000\006\022" +
    "\u0113\044\u0112\001\002\000\004\004\010\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\022" +
    "\011\001\002\000\006\043\012\053\013\001\002\000\004" +
    "\022\345\001\002\000\004\022\014\001\002\000\032\003" +
    "\032\004\033\023\024\024\026\025\016\026\020\030\023" +
    "\042\037\046\030\050\031\051\022\055\015\001\002\000" +
    "\004\040\332\001\002\000\006\004\327\010\326\001\002" +
    "\000\034\004\uffea\023\uffea\024\uffea\025\uffea\026\uffea\030" +
    "\uffea\042\uffea\044\uffea\046\uffea\050\uffea\051\uffea\054\uffea" +
    "\055\uffea\001\002\000\004\027\320\001\002\000\034\004" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\030\uffe8\042\uffe8" +
    "\044\uffe8\046\uffe8\050\uffe8\051\uffe8\054\uffe8\055\uffe8\001" +
    "\002\000\004\040\315\001\002\000\004\040\273\001\002" +
    "\000\004\041\272\001\002\000\034\004\uffe4\023\uffe4\024" +
    "\uffe4\025\uffe4\026\uffe4\030\uffe4\042\uffe4\044\uffe4\046\uffe4" +
    "\050\uffe4\051\uffe4\054\uffe4\055\uffe4\001\002\000\006\004" +
    "\267\005\266\001\002\000\032\004\033\023\024\024\026" +
    "\025\016\026\020\030\023\042\037\044\156\046\030\050" +
    "\031\051\022\055\015\001\002\000\004\022\143\001\002" +
    "\000\004\004\141\001\002\000\010\022\140\037\136\040" +
    "\137\001\002\000\004\020\113\001\002\000\034\004\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\026\uffe6\030\uffe6\042\uffe6\044" +
    "\uffe6\046\uffe6\050\uffe6\051\uffe6\054\uffe6\055\uffe6\001\002" +
    "\000\034\004\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\030" +
    "\uffe2\042\uffe2\044\uffe2\046\uffe2\050\uffe2\051\uffe2\054\uffe2" +
    "\055\uffe2\001\002\000\034\004\uffde\023\uffde\024\uffde\025" +
    "\uffde\026\uffde\030\uffde\042\uffde\044\uffde\046\uffde\050\uffde" +
    "\051\uffde\054\uffde\055\uffde\001\002\000\004\040\042\001" +
    "\002\000\034\004\uffec\023\uffec\024\uffec\025\uffec\026\uffec" +
    "\030\uffec\042\uffec\044\uffec\046\uffec\050\uffec\051\uffec\054" +
    "\uffec\055\uffec\001\002\000\034\004\uffe0\023\uffe0\024\uffe0" +
    "\025\uffe0\026\uffe0\030\uffe0\042\uffe0\044\uffe0\046\uffe0\050" +
    "\uffe0\051\uffe0\054\uffe0\055\uffe0\001\002\000\010\003\044" +
    "\013\043\014\046\001\002\000\004\004\107\001\002\000" +
    "\004\041\106\001\002\000\012\004\057\005\053\016\055" +
    "\017\061\001\002\000\004\004\047\001\002\000\004\020" +
    "\050\001\002\000\004\005\051\001\002\000\004\041\052" +
    "\001\002\000\012\004\uffef\005\uffef\016\uffef\017\uffef\001" +
    "\002\000\012\033\uff9f\034\uff9f\037\uff9f\041\uff9f\001\002" +
    "\000\010\033\uffa3\037\uffa3\041\uffa3\001\002\000\012\033" +
    "\uff9d\034\uff9d\037\uff9d\041\uff9d\001\002\000\006\033\064" +
    "\041\065\001\002\000\012\033\uffa0\034\uffa0\037\uffa0\041" +
    "\uffa0\001\002\000\012\033\uffa1\034\062\037\uffa1\041\uffa1" +
    "\001\002\000\012\033\uff9e\034\uff9e\037\uff9e\041\uff9e\001" +
    "\002\000\012\004\057\005\053\016\055\017\061\001\002" +
    "\000\010\033\uffa2\037\uffa2\041\uffa2\001\002\000\012\004" +
    "\057\005\053\016\055\017\061\001\002\000\004\004\066" +
    "\001\002\000\004\035\067\001\002\000\004\035\070\001" +
    "\002\000\004\037\071\001\002\000\004\022\072\001\002" +
    "\000\032\003\032\004\033\023\024\024\026\025\016\026" +
    "\020\030\023\042\037\046\030\050\031\051\022\055\015" +
    "\001\002\000\032\004\033\023\024\024\026\025\016\026" +
    "\020\030\023\042\037\044\077\046\030\050\031\051\022" +
    "\055\015\001\002\000\034\004\uffeb\023\uffeb\024\uffeb\025" +
    "\uffeb\026\uffeb\030\uffeb\042\uffeb\044\uffeb\046\uffeb\050\uffeb" +
    "\051\uffeb\054\uffeb\055\uffeb\001\002\000\034\004\uffe9\023" +
    "\uffe9\024\uffe9\025\uffe9\026\uffe9\030\uffe9\042\uffe9\044\uffe9" +
    "\046\uffe9\050\uffe9\051\uffe9\054\uffe9\055\uffe9\001\002\000" +
    "\034\004\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5\030\uffe5" +
    "\042\uffe5\044\uffe5\046\uffe5\050\uffe5\051\uffe5\054\uffe5\055" +
    "\uffe5\001\002\000\034\004\uffb1\023\uffb1\024\uffb1\025\uffb1" +
    "\026\uffb1\030\uffb1\042\uffb1\044\uffb1\046\uffb1\050\uffb1\051" +
    "\uffb1\054\uffb1\055\uffb1\001\002\000\034\004\uffe7\023\uffe7" +
    "\024\uffe7\025\uffe7\026\uffe7\030\uffe7\042\uffe7\044\uffe7\046" +
    "\uffe7\050\uffe7\051\uffe7\054\uffe7\055\uffe7\001\002\000\034" +
    "\004\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\030\uffdf\042" +
    "\uffdf\044\uffdf\046\uffdf\050\uffdf\051\uffdf\054\uffdf\055\uffdf" +
    "\001\002\000\034\004\uffe3\023\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\030\uffe3\042\uffe3\044\uffe3\046\uffe3\050\uffe3\051\uffe3" +
    "\054\uffe3\055\uffe3\001\002\000\034\004\uffed\023\uffed\024" +
    "\uffed\025\uffed\026\uffed\030\uffed\042\uffed\044\uffed\046\uffed" +
    "\050\uffed\051\uffed\054\uffed\055\uffed\001\002\000\034\004" +
    "\uffe1\023\uffe1\024\uffe1\025\uffe1\026\uffe1\030\uffe1\042\uffe1" +
    "\044\uffe1\046\uffe1\050\uffe1\051\uffe1\054\uffe1\055\uffe1\001" +
    "\002\000\010\033\uffa4\037\uffa4\041\uffa4\001\002\000\012" +
    "\004\uffee\005\uffee\016\uffee\017\uffee\001\002\000\004\020" +
    "\110\001\002\000\004\005\111\001\002\000\004\041\112" +
    "\001\002\000\012\004\ufff0\005\ufff0\016\ufff0\017\ufff0\001" +
    "\002\000\016\004\124\005\120\006\123\007\116\010\117" +
    "\040\114\001\002\000\014\004\124\005\120\006\123\007" +
    "\116\010\117\001\002\000\010\035\131\036\130\041\uffad" +
    "\001\002\000\014\032\uffa6\035\uffa6\036\uffa6\037\uffa6\041" +
    "\uffa6\001\002\000\014\032\uffa5\035\uffa5\036\uffa5\037\uffa5" +
    "\041\uffa5\001\002\000\014\032\uffa8\035\uffa8\036\uffa8\037" +
    "\uffa8\041\uffa8\001\002\000\004\041\127\001\002\000\012" +
    "\032\125\035\uffab\036\uffab\041\uffab\001\002\000\014\032" +
    "\uffa7\035\uffa7\036\uffa7\037\uffa7\041\uffa7\001\002\000\014" +
    "\032\uffa9\035\uffa9\036\uffa9\037\uffa9\041\uffa9\001\002\000" +
    "\014\004\124\005\120\006\123\007\116\010\117\001\002" +
    "\000\010\035\uffac\036\uffac\041\uffac\001\002\000\034\004" +
    "\uffb0\023\uffb0\024\uffb0\025\uffb0\026\uffb0\030\uffb0\042\uffb0" +
    "\044\uffb0\046\uffb0\050\uffb0\051\uffb0\054\uffb0\055\uffb0\001" +
    "\002\000\016\004\124\005\120\006\123\007\116\010\117" +
    "\040\114\001\002\000\016\004\124\005\120\006\123\007" +
    "\116\010\117\040\114\001\002\000\004\041\uffaf\001\002" +
    "\000\004\041\uffae\001\002\000\004\037\135\001\002\000" +
    "\010\035\uffaa\036\uffaa\041\uffaa\001\002\000\034\004\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\026\uffdb\030\uffdb\042\uffdb\044" +
    "\uffdb\046\uffdb\050\uffdb\051\uffdb\054\uffdb\055\uffdb\001\002" +
    "\000\034\004\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\030" +
    "\uffdc\042\uffdc\044\uffdc\046\uffdc\050\uffdc\051\uffdc\054\uffdc" +
    "\055\uffdc\001\002\000\034\004\uffdd\023\uffdd\024\uffdd\025" +
    "\uffdd\026\uffdd\030\uffdd\042\uffdd\044\uffdd\046\uffdd\050\uffdd" +
    "\051\uffdd\054\uffdd\055\uffdd\001\002\000\004\041\142\001" +
    "\002\000\034\004\uffc1\023\uffc1\024\uffc1\025\uffc1\026\uffc1" +
    "\030\uffc1\042\uffc1\044\uffc1\046\uffc1\050\uffc1\051\uffc1\054" +
    "\uffc1\055\uffc1\001\002\000\032\003\032\004\033\023\024" +
    "\024\026\025\016\026\020\030\023\042\037\046\030\050" +
    "\031\051\022\055\015\001\002\000\030\004\033\023\024" +
    "\024\026\025\016\026\020\030\023\042\037\046\030\050" +
    "\031\051\145\055\015\001\002\000\004\040\146\001\002" +
    "\000\012\004\057\005\053\016\055\017\061\001\002\000" +
    "\006\033\064\037\150\001\002\000\006\022\152\041\151" +
    "\001\002\000\004\044\155\001\002\000\032\003\032\004" +
    "\033\023\024\024\026\025\016\026\020\030\023\042\037" +
    "\046\030\050\031\051\022\055\015\001\002\000\032\004" +
    "\033\023\024\024\026\025\016\026\020\030\023\042\037" +
    "\044\154\046\030\050\031\051\022\055\015\001\002\000" +
    "\034\004\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\030\uffb5" +
    "\042\uffb5\044\uffb5\046\uffb5\050\uffb5\051\uffb5\054\uffb5\055" +
    "\uffb5\001\002\000\034\004\uffb4\023\uffb4\024\uffb4\025\uffb4" +
    "\026\uffb4\030\uffb4\042\uffb4\044\uffb4\046\uffb4\050\uffb4\051" +
    "\uffb4\054\uffb4\055\uffb4\001\002\000\004\045\160\001\002" +
    "\000\006\044\252\045\251\001\002\000\004\004\161\001" +
    "\002\000\004\040\162\001\002\000\016\011\164\012\170" +
    "\013\163\014\171\015\165\037\167\001\002\000\004\004" +
    "\250\001\002\000\004\004\247\001\002\000\004\004\246" +
    "\001\002\000\016\011\220\012\224\013\217\014\223\015" +
    "\221\037\222\001\002\000\014\011\176\012\201\013\175" +
    "\014\200\015\177\001\002\000\004\004\173\001\002\000" +
    "\004\004\172\001\002\000\016\011\uffd6\012\uffd6\013\uffd6" +
    "\014\uffd6\015\uffd6\037\uffd6\001\002\000\016\011\uffd2\012" +
    "\uffd2\013\uffd2\014\uffd2\015\uffd2\037\uffd2\001\002\000\004" +
    "\022\202\001\002\000\004\022\uffcb\001\002\000\004\022" +
    "\uffc9\001\002\000\004\022\uffca\001\002\000\004\022\uffcc" +
    "\001\002\000\004\022\uffcd\001\002\000\032\003\032\004" +
    "\033\023\024\024\026\025\016\026\020\030\023\042\037" +
    "\046\030\050\031\051\022\055\015\001\002\000\032\004" +
    "\033\023\024\024\026\025\016\026\020\030\023\042\037" +
    "\046\030\050\031\051\022\054\204\055\015\001\002\000" +
    "\020\004\211\005\206\006\210\007\214\010\205\016\207" +
    "\017\212\001\002\000\004\041\uffc7\001\002\000\004\041" +
    "\uffc6\001\002\000\004\041\uffc3\001\002\000\004\041\uffc5" +
    "\001\002\000\004\041\uffc8\001\002\000\004\041\uffc2\001" +
    "\002\000\004\041\215\001\002\000\004\041\uffc4\001\002" +
    "\000\004\044\216\001\002\000\006\044\uffd8\045\uffd8\001" +
    "\002\000\004\004\244\001\002\000\004\004\242\001\002" +
    "\000\004\004\240\001\002\000\014\011\176\012\201\013" +
    "\175\014\200\015\177\001\002\000\004\004\227\001\002" +
    "\000\004\004\225\001\002\000\004\021\226\001\002\000" +
    "\016\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\037\uffd3" +
    "\001\002\000\004\021\230\001\002\000\016\011\uffd7\012" +
    "\uffd7\013\uffd7\014\uffd7\015\uffd7\037\uffd7\001\002\000\004" +
    "\022\232\001\002\000\032\003\032\004\033\023\024\024" +
    "\026\025\016\026\020\030\023\042\037\046\030\050\031" +
    "\051\022\055\015\001\002\000\032\004\033\023\024\024" +
    "\026\025\016\026\020\030\023\042\037\046\030\050\031" +
    "\051\022\054\234\055\015\001\002\000\020\004\211\005" +
    "\206\006\210\007\214\010\205\016\207\017\212\001\002" +
    "\000\004\041\236\001\002\000\004\044\237\001\002\000" +
    "\006\044\uffd9\045\uffd9\001\002\000\004\021\241\001\002" +
    "\000\016\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\037" +
    "\uffd1\001\002\000\004\021\243\001\002\000\016\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\037\uffd5\001\002\000" +
    "\004\021\245\001\002\000\016\011\uffcf\012\uffcf\013\uffcf" +
    "\014\uffcf\015\uffcf\037\uffcf\001\002\000\016\011\uffd0\012" +
    "\uffd0\013\uffd0\014\uffd0\015\uffd0\037\uffd0\001\002\000\016" +
    "\011\uffd4\012\uffd4\013\uffd4\014\uffd4\015\uffd4\037\uffd4\001" +
    "\002\000\016\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce" +
    "\037\uffce\001\002\000\004\004\253\001\002\000\004\002" +
    "\uffff\001\002\000\004\040\254\001\002\000\014\011\164" +
    "\012\170\013\163\014\171\015\165\001\002\000\016\011" +
    "\220\012\224\013\217\014\223\015\221\037\256\001\002" +
    "\000\014\011\176\012\201\013\175\014\200\015\177\001" +
    "\002\000\004\022\260\001\002\000\032\003\032\004\033" +
    "\023\024\024\026\025\016\026\020\030\023\042\037\046" +
    "\030\050\031\051\022\055\015\001\002\000\032\004\033" +
    "\023\024\024\026\025\016\026\020\030\023\042\037\046" +
    "\030\050\031\051\022\054\262\055\015\001\002\000\020" +
    "\004\211\005\206\006\210\007\214\010\205\016\207\017" +
    "\212\001\002\000\004\041\264\001\002\000\004\044\265" +
    "\001\002\000\006\044\uffda\045\uffda\001\002\000\004\041" +
    "\271\001\002\000\004\041\270\001\002\000\034\004\uffbd" +
    "\023\uffbd\024\uffbd\025\uffbd\026\uffbd\030\uffbd\042\uffbd\044" +
    "\uffbd\046\uffbd\050\uffbd\051\uffbd\054\uffbd\055\uffbd\001\002" +
    "\000\034\004\uffbc\023\uffbc\024\uffbc\025\uffbc\026\uffbc\030" +
    "\uffbc\042\uffbc\044\uffbc\046\uffbc\050\uffbc\051\uffbc\054\uffbc" +
    "\055\uffbc\001\002\000\034\004\uffc0\023\uffc0\024\uffc0\025" +
    "\uffc0\026\uffc0\030\uffc0\042\uffc0\044\uffc0\046\uffc0\050\uffc0" +
    "\051\uffc0\054\uffc0\055\uffc0\001\002\000\004\005\274\001" +
    "\002\000\004\021\275\001\002\000\004\005\276\001\002" +
    "\000\006\021\277\037\300\001\002\000\004\005\302\001" +
    "\002\000\004\041\301\001\002\000\034\004\uffb8\023\uffb8" +
    "\024\uffb8\025\uffb8\026\uffb8\030\uffb8\042\uffb8\044\uffb8\046" +
    "\uffb8\050\uffb8\051\uffb8\054\uffb8\055\uffb8\001\002\000\004" +
    "\021\303\001\002\000\004\005\304\001\002\000\006\021" +
    "\305\037\306\001\002\000\004\005\310\001\002\000\004" +
    "\041\307\001\002\000\034\004\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\026\uffb7\030\uffb7\042\uffb7\044\uffb7\046\uffb7\050\uffb7" +
    "\051\uffb7\054\uffb7\055\uffb7\001\002\000\004\021\311\001" +
    "\002\000\004\005\312\001\002\000\004\037\313\001\002" +
    "\000\004\041\314\001\002\000\034\004\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\026\uffb6\030\uffb6\042\uffb6\044\uffb6\046\uffb6" +
    "\050\uffb6\051\uffb6\054\uffb6\055\uffb6\001\002\000\012\004" +
    "\057\005\053\016\055\017\061\001\002\000\006\033\064" +
    "\037\317\001\002\000\004\022\152\001\002\000\010\004" +
    "\322\005\321\041\323\001\002\000\004\041\325\001\002" +
    "\000\004\041\324\001\002\000\034\004\uffbb\023\uffbb\024" +
    "\uffbb\025\uffbb\026\uffbb\030\uffbb\042\uffbb\044\uffbb\046\uffbb" +
    "\050\uffbb\051\uffbb\054\uffbb\055\uffbb\001\002\000\034\004" +
    "\uffba\023\uffba\024\uffba\025\uffba\026\uffba\030\uffba\042\uffba" +
    "\044\uffba\046\uffba\050\uffba\051\uffba\054\uffba\055\uffba\001" +
    "\002\000\034\004\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9" +
    "\030\uffb9\042\uffb9\044\uffb9\046\uffb9\050\uffb9\051\uffb9\054" +
    "\uffb9\055\uffb9\001\002\000\004\041\331\001\002\000\004" +
    "\041\330\001\002\000\034\004\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\030\uffbe\042\uffbe\044\uffbe\046\uffbe\050\uffbe" +
    "\051\uffbe\054\uffbe\055\uffbe\001\002\000\034\004\uffbf\023" +
    "\uffbf\024\uffbf\025\uffbf\026\uffbf\030\uffbf\042\uffbf\044\uffbf" +
    "\046\uffbf\050\uffbf\051\uffbf\054\uffbf\055\uffbf\001\002\000" +
    "\012\004\057\005\053\016\055\017\061\001\002\000\006" +
    "\033\064\037\334\001\002\000\004\022\335\001\002\000" +
    "\032\003\032\004\033\023\024\024\026\025\016\026\020" +
    "\030\023\042\037\046\030\050\031\051\022\055\015\001" +
    "\002\000\032\004\033\023\024\024\026\025\016\026\020" +
    "\030\023\042\037\044\340\046\030\050\031\051\022\055" +
    "\337\001\002\000\006\040\332\052\341\001\002\000\034" +
    "\004\uffb3\023\uffb3\024\uffb3\025\uffb3\026\uffb3\030\uffb3\042" +
    "\uffb3\044\uffb3\046\uffb3\050\uffb3\051\uffb3\054\uffb3\055\uffb3" +
    "\001\002\000\004\022\342\001\002\000\032\003\032\004" +
    "\033\023\024\024\026\025\016\026\020\030\023\042\037" +
    "\046\030\050\031\051\022\055\015\001\002\000\032\004" +
    "\033\023\024\024\026\025\016\026\020\030\023\042\037" +
    "\044\344\046\030\050\031\051\022\055\015\001\002\000" +
    "\034\004\uffb2\023\uffb2\024\uffb2\025\uffb2\026\uffb2\030\uffb2" +
    "\042\uffb2\044\uffb2\046\uffb2\050\uffb2\051\uffb2\054\uffb2\055" +
    "\uffb2\001\002\000\016\003\350\011\347\012\353\013\346" +
    "\014\354\015\351\001\002\000\004\004\u010e\001\002\000" +
    "\004\004\u0108\001\002\000\006\020\u0106\041\u0107\001\002" +
    "\000\004\004\376\001\002\000\020\003\ufffb\011\ufffb\012" +
    "\ufffb\013\ufffb\014\ufffb\015\ufffb\044\ufffb\001\002\000\004" +
    "\004\372\001\002\000\004\004\366\001\002\000\020\003" +
    "\350\011\347\012\353\013\346\014\354\015\351\044\357" +
    "\001\002\000\020\003\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\044\ufffc\001\002\000\004\053\360\001\002" +
    "\000\004\022\361\001\002\000\032\003\032\004\033\023" +
    "\024\024\026\025\016\026\020\030\023\042\037\046\030" +
    "\050\031\051\022\055\015\001\002\000\032\004\033\023" +
    "\024\024\026\025\016\026\020\030\023\042\037\044\363" +
    "\046\030\050\031\051\022\055\015\001\002\000\004\045" +
    "\160\001\002\000\006\044\365\045\251\001\002\000\004" +
    "\002\000\001\002\000\004\020\367\001\002\000\004\005" +
    "\370\001\002\000\004\041\371\001\002\000\020\003\ufff3" +
    "\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\044\ufff3\001" +
    "\002\000\004\020\373\001\002\000\004\010\374\001\002" +
    "\000\004\041\375\001\002\000\020\003\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\044\ufff8\001\002\000\004" +
    "\020\377\001\002\000\010\005\u0100\006\u0101\007\u0102\001" +
    "\002\000\004\041\u0105\001\002\000\004\041\u0104\001\002" +
    "\000\004\041\u0103\001\002\000\020\003\ufff4\011\ufff4\012" +
    "\ufff4\013\ufff4\014\ufff4\015\ufff4\044\ufff4\001\002\000\020" +
    "\003\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\044" +
    "\ufff5\001\002\000\020\003\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\044\ufff6\001\002\000\020\003\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\044\ufff1\001\002" +
    "\000\020\003\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\044\ufff2\001\002\000\004\020\u0109\001\002\000\006" +
    "\016\u010a\017\u010b\001\002\000\004\041\u010d\001\002\000" +
    "\004\041\u010c\001\002\000\020\003\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\014\ufffa\015\ufffa\044\ufffa\001\002\000\020\003" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\044\ufff9" +
    "\001\002\000\004\020\u010f\001\002\000\004\005\u0110\001" +
    "\002\000\004\041\u0111\001\002\000\020\003\ufff7\011\ufff7" +
    "\012\ufff7\013\ufff7\014\ufff7\015\ufff7\044\ufff7\001\002\000" +
    "\004\002\ufffe\001\002\000\004\002\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0111\000\004\004\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\024\003\034\013\020\014\035\015\040" +
    "\016\033\021\037\022\016\023\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\002\075\003\101\013\074\014\100\015\103\016\077\021" +
    "\102\022\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\044\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\053\024\055" +
    "\033\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\062\001\001\000\002\001\001\000\006\011" +
    "\104\033\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\024\002\024\003\034\013\020\014\035\015\040\016\033" +
    "\021\037\022\016\023\072\001\001\000\022\002\075\003" +
    "\101\013\074\014\100\015\103\016\077\021\102\022\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\010" +
    "\120\012\121\030\114\001\001\000\004\012\133\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\125\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\132\012\121" +
    "\030\114\001\001\000\010\010\131\012\121\030\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\024\003\034\013\020\014\035\015\040\016\033\021" +
    "\037\022\016\023\143\001\001\000\022\002\075\003\101" +
    "\013\074\014\100\015\103\016\077\021\102\022\073\001" +
    "\001\000\002\001\001\000\010\011\053\024\146\033\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\024\003\034\013\020\014\035\015\040" +
    "\016\033\021\037\022\016\023\152\001\001\000\022\002" +
    "\075\003\101\013\074\014\100\015\103\016\077\021\102" +
    "\022\073\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\026\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\025\165\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\031\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\024\002\024\003\034" +
    "\013\020\014\035\015\040\016\033\021\037\022\016\023" +
    "\202\001\001\000\022\002\075\003\101\013\074\014\100" +
    "\015\103\016\077\021\102\022\073\001\001\000\004\032" +
    "\212\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\031\230\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\002\024\003\034\013\020\014\035\015\040\016\033\021" +
    "\037\022\016\023\232\001\001\000\022\002\075\003\101" +
    "\013\074\014\100\015\103\016\077\021\102\022\073\001" +
    "\001\000\004\032\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\254\001\001\000\002\001\001\000" +
    "\004\031\256\001\001\000\002\001\001\000\024\002\024" +
    "\003\034\013\020\014\035\015\040\016\033\021\037\022" +
    "\016\023\260\001\001\000\022\002\075\003\101\013\074" +
    "\014\100\015\103\016\077\021\102\022\073\001\001\000" +
    "\004\032\262\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\011\053\024\315\033\057" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\011\053\024\332\033\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\002\024\003\034\013\020\014\035" +
    "\015\040\016\033\021\037\022\016\023\335\001\001\000" +
    "\022\002\075\003\101\013\074\014\100\015\103\016\077" +
    "\021\102\022\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\002\024\003\034\013\020" +
    "\014\035\015\040\016\033\021\037\022\016\023\342\001" +
    "\001\000\022\002\075\003\101\013\074\014\100\015\103" +
    "\016\077\021\102\022\073\001\001\000\002\001\001\000" +
    "\006\005\351\006\354\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\355" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\002\024\003\034\013\020\014\035\015\040" +
    "\016\033\021\037\022\016\023\361\001\001\000\022\002" +
    "\075\003\101\013\074\014\100\015\103\016\077\021\102" +
    "\022\073\001\001\000\004\026\363\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    static TablaSimbolos tablaSimbolos = new TablaSimbolos();
    static int verificarTipo = 0;
    static Stack <String> listaIdentificadores = new Stack <String>();
	public static void main(String args[]) throws Exception{
		new Sintax(new LexerCup(System.in)).parse();
	}
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
        Editor.erroresSintacticos +=("Error de sintaxis. Linea: " + (s.right + 1) +
		". Texto: \"" + s.value + "\" \n");
    }

    public Symbol getS(){
        return this.s;
    }   

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


        Hashtable table = new Hashtable();
    
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // termino_bool ::= RESERVADA_VERDADERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino_bool",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // termino_bool ::= RESERVADA_FALSO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino_bool",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // termino_bool ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino_bool",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // termino_bool ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        //Buscar variable en la tabla de simbolos
        Simbolo sim = TablaSimbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sim == null) {
            Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador +"' no existe.\n";
            RESULT = 0;
        }
        else{
            RESULT = sim.valor;
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino_bool",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // exp_bol ::= termino_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_bol",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // exp_bol ::= termino_bool OP_RELACIONAL termino_bool 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("exp_bol",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expresion_booleana ::= exp_bol 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expresion_booleana ::= expresion_booleana OP_LOGICO exp_bol 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion_booleana",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // factor ::= CADENA_TEXTO 
            {
              Object RESULT =null;
		int ctleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int ctright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String ct = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = ct; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // factor ::= NUMERO_EXPONENTE 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double ne = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = ne; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // factor ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;
		int dmlleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int dmlright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double dml = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = dml; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // factor ::= NUMERO 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = num; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // factor ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                //Buscar variable en la tabla de simbolos
                Simbolo sim = TablaSimbolos.buscar(identificador);
                //Si es nulo, devuelvo un error
                if (sim == null){
                    Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador 
                    +"' no existe.\n";
                    RESULT = 0;
                }
                else{                    
                    RESULT = sim.valor;
                }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("factor",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // termino ::= PARENTESIS_IZQ factor PARENTESIS_DER 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = f; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // termino ::= factor 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 RESULT = f; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // termino ::= factor OP_ARITMETICO2 factor 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                if(op.toString().equals("*"))
                    tmp = tmp * Double.parseDouble(f2.toString());
                else                    
                    tmp = tmp / Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Integer tmp = Integer.parseInt(f1.toString());
                if(op.toString().equals("*"))
                    tmp = tmp * Integer.parseInt(f2.toString());
                else                   
                if(op.toString().equals("&"))
                    tmp = tmp & Integer.parseInt(f2.toString());
                else                    
                    tmp = tmp /  Integer.parseInt(f2.toString());
                RESULT = tmp;
            }
        }
        if (f1 instanceof String){
            if(f2 instanceof String){
                if(op.toString().equals("*"))
                    Editor.erroresSintacticos += ("Error sintáctico: Dos cadenas no se pueden multiplicar\n");
                else
                    Editor.erroresSintacticos += ("Error sintáctico: Dos cadenas no se pueden dividir\n");                    
            }
            if (f2 instanceof Double){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");             
            }
            if (f2 instanceof Integer){
                Double tmp = Double.parseDouble(f1.toString());
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
        }
        if (f1 instanceof Double){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                if(op.toString().equals("*"))
                    tmp = tmp * Double.parseDouble(f2.toString());
                else                    
                    tmp = tmp / Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Double tmp = Double.parseDouble(f1.toString());
                if(op.toString().equals("*"))
                    tmp = tmp * Double.parseDouble(f2.toString());
                else                    
                    tmp = tmp /  Double.parseDouble(f2.toString());
                RESULT = tmp;
            }
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("termino",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // expresion ::= termino 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = t;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // expresion ::= termino OP_MENOS expresion 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                tmp = tmp - Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Integer tmp = Integer.parseInt(f1.toString());
                tmp = tmp -  Integer.parseInt(f2.toString());
                RESULT = tmp;
            }
        }
        if (f1 instanceof Double){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+" y '"
                +f2.toString()+"' no compatibles\n");
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                tmp = tmp - Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                tmp = tmp - Double.parseDouble(f2.toString());
                RESULT = tmp;
            }
        }
        if (f1 instanceof String | f2 instanceof String) {
            Editor.erroresSintacticos += ("Error sintáctico: las cadenas no se pueden restar\n");     
        }
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // expresion ::= termino OP_MAS expresion 
            {
              Object RESULT =null;
		int f1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int f1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object f1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int f2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int f2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object f2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		     
        if (f1 instanceof Integer){
            if(f2 instanceof String){
                //String s = f2.toString().replace("'","");
                String s = f2.toString();
                s = f1.toString() + s ;
                RESULT = s;
            }
            if (f2 instanceof Double){
                Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                tmp = tmp + Double.parseDouble(f2.toString());
                RESULT = tmp;                
            }
            if (f2 instanceof Integer){
                Integer tmp = Integer.parseInt(f1.toString());
                tmp = tmp +  Integer.parseInt(f2.toString());
                RESULT = tmp;
            }               
        }
        if (f1 instanceof Double){
            if(f2 instanceof String){
                Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+
                " y '"+f2.toString()+"' no compatibles\n");
            }else{
                if (f2 instanceof Double){
                    Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                    tmp = tmp + Double.parseDouble(f2.toString());
                    RESULT = tmp;                
                }else{
                    if (f2 instanceof Integer){
                        Double tmp = Double.parseDouble(f1.toString()) * 1.0;
                        tmp = tmp + Double.parseDouble(f2.toString());
                        RESULT = tmp;
                    }
                }
            }
        }
        if (f1 instanceof String){
            if(f2 instanceof String){
                RESULT = f1.toString() + f2.toString();          
            }else{
                if (f2 instanceof Double){
                    Editor.erroresSintacticos += ("Error sintáctico: '"+f1.toString()+"'"+
                    " y '"+f2.toString()+"' no compatibles\n");             
                }else{
                    if (f2 instanceof Integer)
                        RESULT = f1.toString() + f2.toString(); 
                }    
            }
        }
     
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("expresion",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // asignacion ::= IDENTIFICADOR ASIGNACION expresion PUNTO_COMA 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object exp = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        Simbolo sim = TablaSimbolos.buscar(id);
        String s;
        //Si es nulo, devuelvo un error
        if (sim == null){
            Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+id +"' no existe.\n";
            RESULT = 0;
        }else{
            s = exp.toString().replace("'","");
            TablaSimbolos.insertar(id, s); 
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("asignacion",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ciclo ::= RESERVADA_CICLO PARENTESIS_IZQ declaracion_ciclo expresion_booleana PUNTO_COMA IDENTIFICADOR OP_MAS OP_MAS PARENTESIS_DER DOS_PUNTOS parte_principal RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ciclo",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // si_no ::= RESERVADA_SI PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS parte_principal RESERVADA_SI RESERVADA_NO DOS_PUNTOS parte_principal RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("si_no",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // si ::= RESERVADA_SI PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS parte_principal RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("si",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // haz ::= RESERVADA_HAZ DOS_PUNTOS parte_principal RESERVADA_MIENTRAS PARENTESIS_IZQ expresion_booleana PARENTESIS_DER PUNTO_COMA RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("haz",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // mientras ::= RESERVADA_MIENTRAS PARENTESIS_IZQ expresion_booleana PARENTESIS_DER DOS_PUNTOS parte_principal RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("mientras",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // reservada_esp ::= ESPECIALES_RUTA PARENTESIS_IZQ NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // reservada_esp ::= ESPECIALES_RUTA PARENTESIS_IZQ NUMERO COMA NUMERO COMA NUMERO COMA NUMERO PARENTESIS_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // reservada_esp ::= ESPECIALES_RUTA PARENTESIS_IZQ NUMERO COMA NUMERO PARENTESIS_DER PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // reservada_esp ::= ESPECIALES_DOS ESPECIALES_PARAMETRO NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // reservada_esp ::= ESPECIALES_DOS ESPECIALES_PARAMETRO IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // reservada_esp ::= ESPECIALES_DOS ESPECIALES_PARAMETRO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // reservada_esp ::= ESPECIALES_ID NUMERO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // reservada_esp ::= ESPECIALES_ID IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // reservada_esp ::= ESPECIALES_CT IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        //Buscar variable en la tabla de simbolos
        Simbolo sim = TablaSimbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sim == null){
            Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador 
            +"' no existe.\n";
        }
        else{                    
            RESULT = sim.valor;
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // reservada_esp ::= ESPECIALES_CT CADENA_TEXTO PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // reservada_esp ::= ESPECIALES_SOLAS PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("reservada_esp",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // llamar_funcion ::= RESERVADA_LLAMAR IDENTIFICADOR PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("llamar_funcion",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // retorno ::= RESERVADA_FALSO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("retorno",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // retorno ::= RESERVADA_VERDADERO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("retorno",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // retorno ::= NUMERO_EXPONENTE 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("retorno",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // retorno ::= NUMERO_DECIMAL 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Double r = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("retorno",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // retorno ::= NUMERO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Integer r = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("retorno",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // retorno ::= CADENA_TEXTO 
            {
              Object RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT = r;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("retorno",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // retorno ::= IDENTIFICADOR 
            {
              Object RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        //Buscar variable en la tabla de simbolos
        Simbolo sim = TablaSimbolos.buscar(identificador);
        //Si es nulo, devuelvo un error
        if (sim == null){
            Editor.erroresSintacticos += "Error de sintaxis. Identificador: '"+identificador 
            +"' no existe.\n";
        }
        else{                    
            RESULT = sim.valor;
        }
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("retorno",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // tipo_retorno ::= RESERVADA_BOOLEANO 
            {
              Object RESULT =null;
		 RESULT = "booleano"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // tipo_retorno ::= RESERVADA_DECIMAL 
            {
              Object RESULT =null;
		 RESULT = "decimal"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // tipo_retorno ::= RESERVADA_CORTO 
            {
              Object RESULT =null;
		 RESULT = "corto"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // tipo_retorno ::= RESERVADA_ENTERO 
            {
              Object RESULT =null;
		 RESULT = "entero"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // tipo_retorno ::= RESERVADA_CADENA 
            {
              Object RESULT =null;
		 RESULT = "cadena"; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("tipo_retorno",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // parametros ::= RESERVADA_CORTO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // parametros ::= parametros RESERVADA_CORTO IDENTIFICADOR COMA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // parametros ::= RESERVADA_DECIMAL IDENTIFICADOR 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // parametros ::= parametros RESERVADA_DECIMAL IDENTIFICADOR COMA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // parametros ::= RESERVADA_CADENA IDENTIFICADOR 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // parametros ::= parametros RESERVADA_CADENA IDENTIFICADOR COMA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // parametros ::= RESERVADA_BOOLEANO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // parametros ::= parametros RESERVADA_BOOLEANO IDENTIFICADOR COMA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // parametros ::= RESERVADA_ENTERO IDENTIFICADOR 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // parametros ::= parametros RESERVADA_ENTERO IDENTIFICADOR COMA 
            {
              Object RESULT =null;
		int tdleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tdright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String td = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        TablaSimbolos.crear(id, (String) td,"Variabe en función");
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parametros",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // parte_funciones ::= RESERVADA_FUNCION IDENTIFICADOR PARENTESIS_IZQ PARENTESIS_DER tipo_retorno DOS_PUNTOS parte_principal RESERVADA_RETORNO retorno PUNTO_COMA RESERVADA_FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        try{
            TablaSimbolos.crear(id, (String) tr,"Función");
            TablaSimbolos.insertar(id, String.valueOf(r));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(id);           
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_funciones",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // parte_funciones ::= RESERVADA_FUNCION IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER tipo_retorno DOS_PUNTOS parte_principal RESERVADA_RETORNO retorno PUNTO_COMA RESERVADA_FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        try{
            TablaSimbolos.crear(id, (String) tr,"funcion");
            TablaSimbolos.insertar(id, String.valueOf(r));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(id);       
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_funciones",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // parte_funciones ::= parte_funciones RESERVADA_FUNCION IDENTIFICADOR PARENTESIS_IZQ parametros PARENTESIS_DER tipo_retorno DOS_PUNTOS parte_principal RESERVADA_RETORNO retorno PUNTO_COMA RESERVADA_FIN 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		int trleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int trright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object tr = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
        try{
            TablaSimbolos.crear(id, (String) tr,"Función");
            TablaSimbolos.insertar(id, String.valueOf(r));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(id);       
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_funciones",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // parte_principal ::= error PARENTESIS_DER 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // parte_principal ::= error PARENTESIS_IZQ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // parte_principal ::= error DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // parte_principal ::= llamar_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // parte_principal ::= parte_principal llamar_funcion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // parte_principal ::= haz 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // parte_principal ::= parte_principal haz 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // parte_principal ::= ciclo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // parte_principal ::= parte_principal ciclo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // parte_principal ::= asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // parte_principal ::= parte_principal asignacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // parte_principal ::= reservada_esp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // parte_principal ::= parte_principal reservada_esp 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // parte_principal ::= mientras 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // parte_principal ::= parte_principal mientras 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // parte_principal ::= si_no 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // parte_principal ::= parte_principal si_no 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // parte_principal ::= si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // parte_principal ::= parte_principal si 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_principal",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracion_ciclo ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_ciclo",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracion_ciclo ::= RESERVADA_ENTERO IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable en ciclo");
            TablaSimbolos.insertar(nombre, valor);

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);        
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_ciclo",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracion_ciclo ::= RESERVADA_CORTO IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable en ciclo");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion_ciclo",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracion ::= error ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracion ::= error PUNTO_COMA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // declaracion ::= RESERVADA_ENTERO IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable");
            TablaSimbolos.insertar(nombre, valor);
            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);            
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaracion ::= RESERVADA_DECIMAL IDENTIFICADOR ASIGNACION NUMERO_EXPONENTE PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"variable");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaracion ::= RESERVADA_DECIMAL IDENTIFICADOR ASIGNACION NUMERO_DECIMAL PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Double valor = (Double)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);        
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // declaracion ::= RESERVADA_DECIMAL IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);         
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // declaracion ::= RESERVADA_CORTO IDENTIFICADOR ASIGNACION NUMERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Integer valor = (Integer)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);           
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // declaracion ::= RESERVADA_CADENA IDENTIFICADOR ASIGNACION CADENA_TEXTO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            TablaSimbolos.crear(nombre, tipo,"Variable");
            String cad = String.valueOf(valor);
            String s = cad.replace("'","");
            TablaSimbolos.insertar(nombre, s);

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);           
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaracion ::= RESERVADA_BOOLEANO IDENTIFICADOR ASIGNACION RESERVADA_VERDADERO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
        try{
            if(String.valueOf(valor).equals("verdadero")){
                TablaSimbolos.crear(nombre, tipo,"variable");
                String cad = String.valueOf(valor);
                TablaSimbolos.insertar(nombre, cad);
                //Crear relacion ciclo PARA con su variable asociada
                TablaSimbolos.lista.push(nombre);
            }
            else{                
                TablaSimbolos.logErrores("Valor incompatible con variable 'booleana', linea:"+tipoleft);
            }

        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaracion ::= RESERVADA_BOOLEANO IDENTIFICADOR ASIGNACION RESERVADA_FALSO PUNTO_COMA 
            {
              Object RESULT =null;
		int tipoleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tiporight = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		String tipo = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int comaleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int comaright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object coma = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
       try{
            TablaSimbolos.crear(nombre, tipo,"Variable");
            TablaSimbolos.insertar(nombre, String.valueOf(valor));
            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);        
       
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("declaracion",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // parte_declaracion ::= declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_declaracion",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // parte_declaracion ::= parte_declaracion declaracion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parte_declaracion",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // inicio ::= error DOS_PUNTOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= error RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS RESERVADA_PRINCIPAL DOS_PUNTOS parte_principal RESERVADA_FIN parte_funciones RESERVADA_FIN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // inicio ::= RESERVADA_INICIAR IDENTIFICADOR DOS_PUNTOS RESERVADA_DECLARACION DOS_PUNTOS parte_declaracion RESERVADA_FIN RESERVADA_PRINCIPAL DOS_PUNTOS parte_principal RESERVADA_FIN parte_funciones RESERVADA_FIN 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		String nombre = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		
        try{
            TablaSimbolos.crear(nombre, "--","Nombre");
            TablaSimbolos.insertar(nombre, String.valueOf("--"));

            //Crear relacion ciclo PARA con su variable asociada
            TablaSimbolos.lista.push(nombre);          
        }
        catch(Exception e){                                    
            e.printStackTrace();
            TablaSimbolos.log.log(Level.SEVERE, "Error al agregar la variable::: " + e.getMessage());
        }                           
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("inicio",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

