/* The following code was generated by JFlex 1.4.3 on 24/06/21 8:32 */

package analizador;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/06/21 8:32 from the specification file
 * <tt>C:/analizador/src/analizador/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  9, 11,  0,  0,  9,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     9,  5,  0,  0,  0, 20,  5, 10, 41, 42, 20,  2, 21,  3,  7, 20, 
     1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 39, 40, 19, 17, 18,  0, 
    35,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  5,  6, 
     0, 15, 12, 22, 23,  8, 28, 36, 30, 26, 37,  4, 14, 27, 16, 13, 
    32, 38, 24, 29, 25, 34, 33,  4,  4,  4, 31,  0,  5,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\5\1\7\1\1\3\5\1\10\2\11\1\12\1\13"+
    "\12\5\1\1\1\14\1\15\1\16\1\17\2\0\1\7"+
    "\1\5\1\20\1\5\1\0\1\5\1\0\1\21\2\5"+
    "\1\22\1\11\12\5\1\23\3\5\14\0\1\24\15\5"+
    "\1\25\1\5\1\26\2\5\24\0\21\5\26\0\5\5"+
    "\1\27\1\5\1\30\5\5\1\31\3\5\1\0\1\32"+
    "\12\0\1\33\2\0\1\34\3\0\2\5\1\35\1\5"+
    "\1\36\1\37\10\5\1\0\1\40\12\0\1\41\4\5"+
    "\1\42\1\43\1\44\1\5\1\45\2\5\5\0\2\5"+
    "\1\46\1\5\1\47\2\5\3\0\3\5\1\50\1\51"+
    "\1\0\3\5\1\0\2\5\1\52\1\0\2\5\1\53"+
    "\50\5";

  private static int [] zzUnpackAction() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\53\0\126\0\126\0\201\0\254\0\53\0\327"+
    "\0\u0102\0\u012d\0\u0158\0\u0183\0\u01ae\0\u01d9\0\u0204\0\u0204"+
    "\0\u022f\0\53\0\53\0\u025a\0\u0285\0\u02b0\0\u02db\0\u0306"+
    "\0\u0331\0\u035c\0\u0387\0\u03b2\0\u03dd\0\u0408\0\53\0\53"+
    "\0\53\0\53\0\327\0\u0433\0\u045e\0\u0489\0\u04b4\0\u04df"+
    "\0\u050a\0\u0535\0\u0158\0\53\0\u0560\0\u058b\0\u0489\0\53"+
    "\0\u05b6\0\u05e1\0\u060c\0\u0637\0\u0662\0\u068d\0\u06b8\0\u06e3"+
    "\0\u070e\0\u0739\0\u0489\0\u0764\0\u078f\0\u07ba\0\u07e5\0\u0810"+
    "\0\u083b\0\u0866\0\u0891\0\u08bc\0\u08e7\0\u0912\0\u093d\0\u0968"+
    "\0\u0993\0\u09be\0\u050a\0\u09e9\0\u0a14\0\u0a3f\0\u0a6a\0\u0a95"+
    "\0\u0ac0\0\u0aeb\0\u0b16\0\u0b41\0\u0b6c\0\u0b97\0\u0bc2\0\u0bed"+
    "\0\u09e9\0\u0c18\0\u09e9\0\u0c43\0\u0c6e\0\u0c99\0\u0cc4\0\u0cef"+
    "\0\u0d1a\0\u0d45\0\u0d70\0\u0d9b\0\u0dc6\0\u0df1\0\u0e1c\0\u0e47"+
    "\0\u0e72\0\u0e9d\0\u0ec8\0\u0ef3\0\u0f1e\0\u0f49\0\u0f74\0\u0f9f"+
    "\0\u0fca\0\u0ff5\0\u1020\0\u104b\0\u1076\0\u10a1\0\u10cc\0\u10f7"+
    "\0\u1122\0\u114d\0\u1178\0\u11a3\0\u11ce\0\u11f9\0\u1224\0\u124f"+
    "\0\u127a\0\u12a5\0\u12d0\0\u12fb\0\u1326\0\u1351\0\u137c\0\u13a7"+
    "\0\u13d2\0\u13fd\0\u1428\0\u1453\0\u147e\0\u14a9\0\u14d4\0\u14ff"+
    "\0\u152a\0\u1555\0\u1580\0\u15ab\0\u15d6\0\u1601\0\u162c\0\u1657"+
    "\0\u1682\0\u16ad\0\u16d8\0\u1703\0\u172e\0\u1682\0\u1759\0\u1682"+
    "\0\u1784\0\u17af\0\u17da\0\u1805\0\u1830\0\u1682\0\u185b\0\u1886"+
    "\0\u18b1\0\u18dc\0\53\0\u1907\0\u1932\0\u195d\0\u1988\0\u19b3"+
    "\0\u19de\0\u1a09\0\u1a34\0\u1a5f\0\u1a8a\0\53\0\u1ab5\0\u1ae0"+
    "\0\53\0\u1b0b\0\u1b36\0\u1b61\0\u1b8c\0\u1bb7\0\u1b8c\0\u1be2"+
    "\0\u1b8c\0\u1b8c\0\u1c0d\0\u1c38\0\u1c63\0\u1c8e\0\u1cb9\0\u1ce4"+
    "\0\u1d0f\0\u1d3a\0\u1d65\0\53\0\u1d90\0\u1dbb\0\u1de6\0\u1e11"+
    "\0\u1e3c\0\u1e67\0\u1e92\0\u1ebd\0\u1ee8\0\u1f13\0\53\0\u1f3e"+
    "\0\u1f69\0\u1f94\0\u1fbf\0\u1f3e\0\u1f3e\0\u1f3e\0\u1fea\0\u1f3e"+
    "\0\u2015\0\u2040\0\u206b\0\u2096\0\u20c1\0\u20ec\0\u2117\0\u2142"+
    "\0\u216d\0\u2142\0\u2198\0\u2142\0\u21c3\0\u21ee\0\u2219\0\u2244"+
    "\0\u226f\0\u229a\0\u22c5\0\u22f0\0\u229a\0\u229a\0\u231b\0\u2346"+
    "\0\u2371\0\u239c\0\u23c7\0\u23f2\0\u241d\0\u23f2\0\u2448\0\u2473"+
    "\0\u249e\0\53\0\u24c9\0\u24f4\0\u251f\0\u254a\0\u2575\0\u25a0"+
    "\0\u25cb\0\u25f6\0\u2621\0\u264c\0\u2677\0\u26a2\0\u26cd\0\u26f8"+
    "\0\u2723\0\u274e\0\u2779\0\u27a4\0\u27cf\0\u27fa\0\u2825\0\u2850"+
    "\0\u287b\0\u28a6\0\u28d1\0\u28fc\0\u2927\0\u2952\0\u297d\0\u29a8"+
    "\0\u29d3\0\u29fe\0\u2a29\0\u2a54\0\u2a7f\0\u2aaa\0\u2ad5\0\u2b00"+
    "\0\53\0\u050a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\2\1\10"+
    "\1\11\1\12\1\13\1\12\1\14\1\6\1\15\1\6"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\6\1\27\1\30\1\31\1\32\1\33\1\6"+
    "\1\34\1\35\1\6\1\36\3\6\1\37\1\40\1\41"+
    "\1\42\54\0\1\3\5\0\1\43\1\44\43\0\1\3"+
    "\1\0\1\45\3\0\1\43\1\44\43\0\1\46\2\0"+
    "\1\46\1\0\1\46\1\0\1\46\3\0\5\46\5\0"+
    "\15\46\1\0\3\46\5\0\1\47\52\0\1\50\2\51"+
    "\1\46\1\0\1\46\1\0\1\46\3\0\4\46\1\52"+
    "\5\0\15\46\1\0\3\46\15\0\1\12\1\0\1\12"+
    "\37\0\12\53\1\54\40\53\1\0\1\46\2\0\1\46"+
    "\1\0\1\46\1\0\1\46\3\0\1\46\1\55\3\46"+
    "\5\0\15\46\1\0\3\46\5\0\1\46\2\0\1\46"+
    "\1\0\1\46\1\0\1\46\3\0\2\46\1\56\2\46"+
    "\5\0\15\46\1\0\3\46\5\0\1\46\2\0\1\46"+
    "\1\0\1\46\1\0\1\46\3\0\1\46\1\57\3\46"+
    "\5\0\15\46\1\0\3\46\25\0\1\60\52\0\2\60"+
    "\31\0\1\46\2\0\1\46\1\0\1\46\1\0\1\46"+
    "\3\0\1\46\1\61\1\46\1\62\1\46\5\0\4\46"+
    "\1\63\10\46\1\0\3\46\5\0\1\46\2\0\1\46"+
    "\1\0\1\46\1\0\1\64\3\0\5\46\5\0\15\46"+
    "\1\0\3\46\5\0\1\46\2\0\1\46\1\0\1\46"+
    "\1\0\1\65\3\0\5\46\5\0\15\46\1\0\3\46"+
    "\5\0\1\46\2\0\1\46\1\0\1\46\1\0\1\46"+
    "\3\0\4\46\1\66\5\0\15\46\1\0\3\46\5\0"+
    "\1\46\2\0\1\46\1\0\1\46\1\0\1\46\3\0"+
    "\5\46\5\0\4\46\1\67\10\46\1\0\3\46\5\0"+
    "\1\46\2\0\1\46\1\0\1\46\1\0\1\46\3\0"+
    "\3\46\1\70\1\46\5\0\4\46\1\71\7\46\1\72"+
    "\1\0\3\46\5\0\1\46\2\0\1\46\1\0\1\46"+
    "\1\0\1\46\3\0\5\46\5\0\4\46\1\73\10\46"+
    "\1\0\3\46\5\0\1\46\2\0\1\46\1\0\1\46"+
    "\1\0\1\46\3\0\3\46\1\74\1\46\5\0\15\46"+
    "\1\0\3\46\5\0\1\46\2\0\1\46\1\0\1\46"+
    "\1\0\1\46\3\0\5\46\5\0\2\46\1\75\12\46"+
    "\1\0\3\46\5\0\1\46\2\0\1\46\1\0\1\46"+
    "\1\0\1\76\3\0\5\46\5\0\15\46\1\0\3\46"+
    "\14\0\1\77\5\0\1\100\1\101\6\0\1\102\1\103"+
    "\1\104\1\0\1\105\1\0\1\106\1\107\2\0\1\110"+
    "\1\111\2\0\1\112\7\0\1\113\2\51\47\0\13\45"+
    "\1\0\37\45\1\0\1\114\2\0\1\114\1\0\1\114"+
    "\1\0\1\114\3\0\5\114\5\0\15\114\1\0\3\114"+
    "\5\0\1\47\6\0\1\44\43\0\1\115\2\0\1\114"+
    "\1\0\1\114\1\0\1\114\3\0\5\114\5\0\15\114"+
    "\1\0\3\114\5\0\1\113\52\0\1\114\2\0\1\114"+
    "\1\0\1\114\1\0\1\114\3\0\5\114\5\0\3\114"+
    "\1\116\11\114\1\0\3\114\5\0\1\114\2\0\1\114"+
    "\1\0\1\114\1\0\1\114\3\0\1\114\1\117\3\114"+
    "\5\0\15\114\1\0\3\114\5\0\1\114\2\0\1\114"+
    "\1\0\1\114\1\0\1\114\3\0\3\114\1\120\1\114"+
    "\5\0\15\114\1\0\3\114\5\0\1\114\2\0\1\114"+
    "\1\0\1\114\1\0\1\114\3\0\5\114\5\0\2\114"+
    "\1\121\12\114\1\0\3\114\5\0\1\114\2\0\1\114"+
    "\1\0\1\114\1\0\1\114\3\0\5\114\5\0\1\114"+
    "\1\122\13\114\1\0\3\114\5\0\1\114\2\0\1\114"+
    "\1\0\1\114\1\0\1\114\3\0\5\114\5\0\1\123"+
    "\14\114\1\0\3\114\5\0\1\114\2\0\1\114\1\0"+
    "\1\114\1\0\1\114\3\0\5\114\5\0\1\124\14\114"+
    "\1\0\3\114\5\0\1\114\2\0\1\114\1\0\1\114"+
    "\1\0\1\114\3\0\5\114\5\0\3\114\1\125\11\114"+
    "\1\0\3\114\5\0\1\114\2\0\1\114\1\0\1\114"+
    "\1\0\1\114\3\0\5\114\5\0\4\114\1\126\10\114"+
    "\1\0\3\114\5\0\1\114\2\0\1\114\1\0\1\114"+
    "\1\0\1\127\3\0\5\114\5\0\15\114\1\0\3\114"+
    "\5\0\1\114\2\0\1\114\1\0\1\114\1\0\1\114"+
    "\3\0\2\114\1\130\2\114\5\0\15\114\1\0\3\114"+
    "\5\0\1\114\2\0\1\114\1\0\1\114\1\0\1\114"+
    "\3\0\4\114\1\131\5\0\15\114\1\0\3\114\5\0"+
    "\1\114\2\0\1\114\1\0\1\114\1\0\1\114\3\0"+
    "\4\114\1\132\5\0\15\114\1\0\3\114\5\0\1\114"+
    "\2\0\1\114\1\0\1\114\1\0\1\114\3\0\5\114"+
    "\5\0\11\114\1\133\3\114\1\0\3\114\5\0\1\114"+
    "\2\0\1\114\1\0\1\114\1\0\1\114\3\0\5\114"+
    "\5\0\4\114\1\134\10\114\1\0\3\114\5\0\1\114"+
    "\2\0\1\114\1\0\1\114\1\0\1\114\3\0\5\114"+
    "\5\0\2\114\1\135\12\114\1\0\3\114\24\0\1\136"+
    "\14\0\1\137\25\0\1\140\56\0\1\141\11\0\1\142"+
    "\1\143\1\144\1\145\6\0\1\146\31\0\1\147\43\0"+
    "\1\150\21\0\1\151\62\0\1\152\43\0\1\153\3\0"+
    "\1\154\45\0\1\155\30\0\1\156\61\0\1\157\65\0"+
    "\1\160\52\0\1\161\21\0\1\162\2\0\1\162\1\0"+
    "\1\162\1\0\1\162\3\0\5\162\5\0\15\162\1\0"+
    "\3\162\5\0\1\163\2\0\1\162\1\0\1\162\1\0"+
    "\1\162\3\0\5\162\5\0\15\162\1\0\3\162\5\0"+
    "\1\162\2\0\1\162\1\0\1\162\1\0\1\164\3\0"+
    "\5\162\5\0\15\162\1\0\3\162\5\0\1\162\2\0"+
    "\1\162\1\0\1\162\1\0\1\162\3\0\2\162\1\165"+
    "\2\162\5\0\15\162\1\0\3\162\5\0\1\162\2\0"+
    "\1\162\1\0\1\162\1\0\1\162\3\0\5\162\5\0"+
    "\5\162\1\166\7\162\1\0\3\162\5\0\1\162\2\0"+
    "\1\162\1\0\1\162\1\0\1\162\3\0\5\162\5\0"+
    "\3\162\1\167\11\162\1\0\3\162\5\0\1\162\2\0"+
    "\1\162\1\0\1\162\1\0\1\170\3\0\5\162\5\0"+
    "\15\162\1\0\3\162\5\0\1\162\2\0\1\162\1\0"+
    "\1\162\1\0\1\162\3\0\2\162\1\171\2\162\5\0"+
    "\15\162\1\0\3\162\5\0\1\162\2\0\1\162\1\0"+
    "\1\162\1\0\1\162\3\0\2\162\1\172\2\162\5\0"+
    "\4\162\1\173\10\162\1\0\3\162\5\0\1\162\2\0"+
    "\1\162\1\0\1\162\1\0\1\162\3\0\1\162\1\174"+
    "\3\162\5\0\15\162\1\0\3\162\5\0\1\162\2\0"+
    "\1\162\1\0\1\162\1\0\1\162\3\0\5\162\5\0"+
    "\1\175\14\162\1\0\3\162\5\0\1\162\2\0\1\162"+
    "\1\0\1\162\1\0\1\162\3\0\4\162\1\176\5\0"+
    "\15\162\1\0\3\162\5\0\1\162\2\0\1\162\1\0"+
    "\1\162\1\0\1\162\3\0\5\162\5\0\7\162\1\177"+
    "\5\162\1\0\3\162\5\0\1\162\2\0\1\162\1\0"+
    "\1\162\1\0\1\162\3\0\5\162\5\0\1\200\14\162"+
    "\1\0\3\162\5\0\1\162\2\0\1\162\1\0\1\162"+
    "\1\0\1\162\3\0\4\162\1\201\5\0\15\162\1\0"+
    "\3\162\5\0\1\162\2\0\1\162\1\0\1\162\1\0"+
    "\1\162\3\0\5\162\5\0\1\162\1\202\13\162\1\0"+
    "\3\162\32\0\1\203\64\0\1\204\22\0\1\205\61\0"+
    "\1\206\43\0\1\207\52\0\1\210\72\0\1\211\52\0"+
    "\1\212\41\0\1\213\51\0\1\214\21\0\1\215\42\0"+
    "\1\216\1\217\51\0\1\220\53\0\1\221\61\0\1\222"+
    "\60\0\1\223\51\0\1\224\51\0\1\225\36\0\1\226"+
    "\51\0\1\227\53\0\1\230\23\0\1\231\2\0\1\231"+
    "\1\0\1\231\1\0\1\231\3\0\5\231\5\0\15\231"+
    "\1\0\3\231\5\0\1\232\2\0\1\231\1\0\1\231"+
    "\1\0\1\231\3\0\5\231\5\0\15\231\1\0\3\231"+
    "\5\0\1\231\2\0\1\231\1\0\1\231\1\0\1\231"+
    "\3\0\5\231\5\0\2\231\1\233\12\231\1\0\3\231"+
    "\5\0\1\231\2\0\1\231\1\0\1\231\1\0\1\234"+
    "\3\0\5\231\5\0\15\231\1\0\3\231\5\0\1\231"+
    "\2\0\1\231\1\0\1\231\1\0\1\231\3\0\3\231"+
    "\1\235\1\231\5\0\15\231\1\0\3\231\5\0\1\231"+
    "\2\0\1\231\1\0\1\231\1\0\1\231\3\0\1\231"+
    "\1\236\3\231\5\0\15\231\1\0\3\231\5\0\1\231"+
    "\2\0\1\231\1\0\1\231\1\0\1\231\3\0\4\231"+
    "\1\237\5\0\15\231\1\0\3\231\5\0\1\231\2\0"+
    "\1\231\1\0\1\231\1\0\1\231\3\0\1\231\1\240"+
    "\3\231\5\0\15\231\1\0\3\231\5\0\1\231\2\0"+
    "\1\231\1\0\1\231\1\0\1\231\3\0\3\231\1\241"+
    "\1\231\5\0\15\231\1\0\3\231\5\0\1\231\2\0"+
    "\1\231\1\0\1\231\1\0\1\231\3\0\5\231\5\0"+
    "\5\231\1\242\7\231\1\0\3\231\5\0\1\231\2\0"+
    "\1\231\1\0\1\231\1\0\1\231\3\0\5\231\5\0"+
    "\2\231\1\243\12\231\1\0\3\231\5\0\1\231\2\0"+
    "\1\231\1\0\1\231\1\0\1\231\3\0\5\231\5\0"+
    "\4\231\1\244\10\231\1\0\3\231\5\0\1\231\2\0"+
    "\1\231\1\0\1\231\1\0\1\231\3\0\5\231\5\0"+
    "\3\231\1\245\11\231\1\0\3\231\5\0\1\231\2\0"+
    "\1\231\1\0\1\231\1\0\1\231\3\0\1\231\1\246"+
    "\3\231\5\0\15\231\1\0\3\231\5\0\1\231\2\0"+
    "\1\231\1\0\1\231\1\0\1\231\3\0\5\231\5\0"+
    "\4\231\1\247\10\231\1\0\3\231\5\0\1\231\2\0"+
    "\1\231\1\0\1\231\1\0\1\231\3\0\5\231\5\0"+
    "\1\250\14\231\1\0\3\231\5\0\1\231\2\0\1\231"+
    "\1\0\1\231\1\0\1\231\3\0\3\231\1\251\1\231"+
    "\5\0\15\231\1\0\3\231\14\0\1\252\52\0\1\161"+
    "\72\0\1\253\67\0\1\254\23\0\1\204\52\0\1\255"+
    "\66\0\1\256\37\0\1\257\77\0\1\260\40\0\1\261"+
    "\51\0\1\262\31\0\1\263\52\0\1\264\52\0\1\265"+
    "\61\0\1\266\63\0\1\267\64\0\1\270\25\0\1\271"+
    "\77\0\1\272\27\0\1\273\43\0\1\224\61\0\1\274"+
    "\34\0\1\275\2\0\1\275\1\0\1\275\1\0\1\275"+
    "\3\0\5\275\5\0\15\275\1\0\3\275\5\0\1\276"+
    "\2\0\1\275\1\0\1\275\1\0\1\275\3\0\5\275"+
    "\5\0\15\275\1\0\3\275\5\0\1\275\2\0\1\275"+
    "\1\0\1\275\1\0\1\275\3\0\1\275\1\277\3\275"+
    "\5\0\15\275\1\0\3\275\5\0\1\275\2\0\1\275"+
    "\1\0\1\275\1\0\1\275\3\0\3\275\1\300\1\275"+
    "\5\0\15\275\1\0\3\275\5\0\1\275\2\0\1\275"+
    "\1\0\1\275\1\0\1\275\3\0\5\275\5\0\2\275"+
    "\1\301\12\275\1\0\3\275\5\0\1\275\2\0\1\275"+
    "\1\0\1\275\1\0\1\275\3\0\3\275\1\302\1\275"+
    "\5\0\15\275\1\0\3\275\5\0\1\275\2\0\1\275"+
    "\1\0\1\275\1\0\1\275\3\0\5\275\5\0\2\275"+
    "\1\303\12\275\1\0\3\275\5\0\1\275\2\0\1\275"+
    "\1\0\1\275\1\0\1\275\3\0\3\275\1\304\1\275"+
    "\5\0\15\275\1\0\3\275\5\0\1\275\2\0\1\275"+
    "\1\0\1\275\1\0\1\275\3\0\4\275\1\305\5\0"+
    "\15\275\1\0\3\275\5\0\1\275\2\0\1\275\1\0"+
    "\1\275\1\0\1\275\3\0\3\275\1\306\1\275\5\0"+
    "\15\275\1\0\3\275\5\0\1\275\2\0\1\275\1\0"+
    "\1\275\1\0\1\275\3\0\5\275\5\0\2\275\1\307"+
    "\12\275\1\0\3\275\5\0\1\275\2\0\1\275\1\0"+
    "\1\275\1\0\1\275\3\0\1\275\1\310\3\275\5\0"+
    "\15\275\1\0\3\275\5\0\1\275\2\0\1\275\1\0"+
    "\1\275\1\0\1\275\3\0\5\275\5\0\4\275\1\311"+
    "\10\275\1\0\3\275\5\0\1\275\2\0\1\275\1\0"+
    "\1\275\1\0\1\275\3\0\5\275\5\0\1\275\1\312"+
    "\13\275\1\0\3\275\24\0\1\313\47\0\1\314\54\0"+
    "\1\315\47\0\1\316\73\0\1\314\34\0\1\317\47\0"+
    "\1\320\100\0\1\321\36\0\1\322\44\0\1\323\60\0"+
    "\1\324\56\0\1\325\52\0\1\326\52\0\1\274\61\0"+
    "\1\271\41\0\1\327\23\0\1\330\2\0\1\330\1\0"+
    "\1\330\1\0\1\330\3\0\5\330\5\0\15\330\1\0"+
    "\3\330\5\0\1\331\2\0\1\330\1\0\1\330\1\0"+
    "\1\330\3\0\5\330\5\0\15\330\1\0\3\330\5\0"+
    "\1\330\2\0\1\330\1\0\1\330\1\0\1\330\3\0"+
    "\4\330\1\332\5\0\15\330\1\0\3\330\5\0\1\330"+
    "\2\0\1\330\1\0\1\330\1\0\1\330\3\0\3\330"+
    "\1\333\1\330\5\0\15\330\1\0\3\330\5\0\1\330"+
    "\2\0\1\330\1\0\1\330\1\0\1\330\3\0\2\330"+
    "\1\334\2\330\5\0\15\330\1\0\3\330\5\0\1\330"+
    "\2\0\1\330\1\0\1\330\1\0\1\330\3\0\1\330"+
    "\1\335\3\330\5\0\15\330\1\0\3\330\5\0\1\330"+
    "\2\0\1\330\1\0\1\330\1\0\1\330\3\0\5\330"+
    "\5\0\2\330\1\336\12\330\1\0\3\330\5\0\1\330"+
    "\2\0\1\330\1\0\1\330\1\0\1\330\3\0\3\330"+
    "\1\337\1\330\5\0\15\330\1\0\3\330\5\0\1\330"+
    "\2\0\1\330\1\0\1\330\1\0\1\330\3\0\4\330"+
    "\1\340\5\0\15\330\1\0\3\330\5\0\1\330\2\0"+
    "\1\330\1\0\1\330\1\0\1\330\3\0\5\330\5\0"+
    "\12\330\1\341\2\330\1\0\3\330\5\0\1\330\2\0"+
    "\1\330\1\0\1\330\1\0\1\342\3\0\5\330\5\0"+
    "\15\330\1\0\3\330\33\0\1\323\43\0\1\343\51\0"+
    "\1\314\63\0\1\271\52\0\1\260\52\0\1\344\60\0"+
    "\1\316\24\0\1\317\70\0\1\345\57\0\1\346\27\0"+
    "\1\347\43\0\1\350\2\0\1\350\1\0\1\350\1\0"+
    "\1\350\3\0\5\350\5\0\15\350\1\0\3\350\5\0"+
    "\1\351\2\0\1\350\1\0\1\350\1\0\1\350\3\0"+
    "\5\350\5\0\15\350\1\0\3\350\5\0\1\350\2\0"+
    "\1\350\1\0\1\350\1\0\1\350\3\0\1\350\1\352"+
    "\3\350\5\0\15\350\1\0\3\350\5\0\1\350\2\0"+
    "\1\350\1\0\1\350\1\0\1\350\3\0\5\350\5\0"+
    "\1\353\14\350\1\0\3\350\5\0\1\350\2\0\1\350"+
    "\1\0\1\350\1\0\1\350\3\0\5\350\5\0\7\350"+
    "\1\354\5\350\1\0\3\350\5\0\1\350\2\0\1\350"+
    "\1\0\1\350\1\0\1\350\3\0\3\350\1\355\1\350"+
    "\5\0\15\350\1\0\3\350\5\0\1\350\2\0\1\350"+
    "\1\0\1\350\1\0\1\350\3\0\5\350\5\0\2\350"+
    "\1\356\12\350\1\0\3\350\35\0\1\357\40\0\1\271"+
    "\65\0\1\360\52\0\1\205\50\0\1\361\23\0\1\362"+
    "\2\0\1\362\1\0\1\362\1\0\1\362\3\0\5\362"+
    "\5\0\15\362\1\0\3\362\5\0\1\363\2\0\1\362"+
    "\1\0\1\362\1\0\1\362\3\0\5\362\5\0\15\362"+
    "\1\0\3\362\5\0\1\362\2\0\1\362\1\0\1\362"+
    "\1\0\1\362\3\0\5\362\5\0\4\362\1\364\10\362"+
    "\1\0\3\362\5\0\1\362\2\0\1\362\1\0\1\362"+
    "\1\0\1\362\3\0\2\362\1\365\2\362\5\0\15\362"+
    "\1\0\3\362\5\0\1\362\2\0\1\362\1\0\1\362"+
    "\1\0\1\362\3\0\1\362\1\366\3\362\5\0\15\362"+
    "\1\0\3\362\14\0\1\314\57\0\1\367\64\0\1\316"+
    "\24\0\1\370\2\0\1\370\1\0\1\370\1\0\1\370"+
    "\3\0\5\370\5\0\15\370\1\0\3\370\5\0\1\371"+
    "\2\0\1\370\1\0\1\370\1\0\1\370\3\0\5\370"+
    "\5\0\15\370\1\0\3\370\5\0\1\370\2\0\1\370"+
    "\1\0\1\370\1\0\1\370\3\0\1\370\1\372\3\370"+
    "\5\0\15\370\1\0\3\370\24\0\1\373\33\0\1\374"+
    "\2\0\1\374\1\0\1\374\1\0\1\374\3\0\5\374"+
    "\5\0\15\374\1\0\3\374\5\0\1\375\2\0\1\374"+
    "\1\0\1\374\1\0\1\374\3\0\5\374\5\0\15\374"+
    "\1\0\3\374\5\0\1\374\2\0\1\374\1\0\1\374"+
    "\1\0\1\374\3\0\4\374\1\376\5\0\15\374\1\0"+
    "\3\374\23\0\1\377\34\0\1\u0100\2\0\1\u0100\1\0"+
    "\1\u0100\1\0\1\u0100\3\0\5\u0100\5\0\15\u0100\1\0"+
    "\3\u0100\5\0\1\u0101\2\0\1\u0100\1\0\1\u0100\1\0"+
    "\1\u0100\3\0\5\u0100\5\0\15\u0100\1\0\3\u0100\34\0"+
    "\1\u0102\23\0\1\u0103\2\0\1\u0103\1\0\1\u0103\1\0"+
    "\1\u0103\3\0\5\u0103\5\0\15\u0103\1\0\3\u0103\5\0"+
    "\1\u0104\2\0\1\u0103\1\0\1\u0103\1\0\1\u0103\3\0"+
    "\5\u0103\5\0\15\u0103\1\0\3\u0103\5\0\1\u0105\2\0"+
    "\1\u0105\1\0\1\u0105\1\0\1\u0105\3\0\5\u0105\5\0"+
    "\15\u0105\1\0\3\u0105\5\0\1\u0106\2\0\1\u0105\1\0"+
    "\1\u0105\1\0\1\u0105\3\0\5\u0105\5\0\15\u0105\1\0"+
    "\3\u0105\5\0\1\u0107\2\0\1\u0107\1\0\1\u0107\1\0"+
    "\1\u0107\3\0\5\u0107\5\0\15\u0107\1\0\3\u0107\5\0"+
    "\1\u0108\2\0\1\u0107\1\0\1\u0107\1\0\1\u0107\3\0"+
    "\5\u0107\5\0\15\u0107\1\0\3\u0107\5\0\1\u0109\2\0"+
    "\1\u0109\1\0\1\u0109\1\0\1\u0109\3\0\5\u0109\5\0"+
    "\15\u0109\1\0\3\u0109\5\0\1\u010a\2\0\1\u0109\1\0"+
    "\1\u0109\1\0\1\u0109\3\0\5\u0109\5\0\15\u0109\1\0"+
    "\3\u0109\5\0\1\u010b\2\0\1\u010b\1\0\1\u010b\1\0"+
    "\1\u010b\3\0\5\u010b\5\0\15\u010b\1\0\3\u010b\5\0"+
    "\1\u010c\2\0\1\u010b\1\0\1\u010b\1\0\1\u010b\3\0"+
    "\5\u010b\5\0\15\u010b\1\0\3\u010b\5\0\1\u010d\2\0"+
    "\1\u010d\1\0\1\u010d\1\0\1\u010d\3\0\5\u010d\5\0"+
    "\15\u010d\1\0\3\u010d\5\0\1\u010e\2\0\1\u010d\1\0"+
    "\1\u010d\1\0\1\u010d\3\0\5\u010d\5\0\15\u010d\1\0"+
    "\3\u010d\5\0\1\u010f\2\0\1\u010f\1\0\1\u010f\1\0"+
    "\1\u010f\3\0\5\u010f\5\0\15\u010f\1\0\3\u010f\5\0"+
    "\1\u0110\2\0\1\u010f\1\0\1\u010f\1\0\1\u010f\3\0"+
    "\5\u010f\5\0\15\u010f\1\0\3\u010f\5\0\1\u0111\2\0"+
    "\1\u0111\1\0\1\u0111\1\0\1\u0111\3\0\5\u0111\5\0"+
    "\15\u0111\1\0\3\u0111\5\0\1\u0112\2\0\1\u0111\1\0"+
    "\1\u0111\1\0\1\u0111\3\0\5\u0111\5\0\15\u0111\1\0"+
    "\3\u0111\5\0\1\u0113\2\0\1\u0113\1\0\1\u0113\1\0"+
    "\1\u0113\3\0\5\u0113\5\0\15\u0113\1\0\3\u0113\5\0"+
    "\1\u0114\2\0\1\u0113\1\0\1\u0113\1\0\1\u0113\3\0"+
    "\5\u0113\5\0\15\u0113\1\0\3\u0113\5\0\1\u0115\2\0"+
    "\1\u0115\1\0\1\u0115\1\0\1\u0115\3\0\5\u0115\5\0"+
    "\15\u0115\1\0\3\u0115\5\0\1\u0116\2\0\1\u0115\1\0"+
    "\1\u0115\1\0\1\u0115\3\0\5\u0115\5\0\15\u0115\1\0"+
    "\3\u0115\5\0\1\u0117\2\0\1\u0117\1\0\1\u0117\1\0"+
    "\1\u0117\3\0\5\u0117\5\0\15\u0117\1\0\3\u0117\5\0"+
    "\1\u0118\2\0\1\u0117\1\0\1\u0117\1\0\1\u0117\3\0"+
    "\5\u0117\5\0\15\u0117\1\0\3\u0117\5\0\1\u0119\2\0"+
    "\1\u0119\1\0\1\u0119\1\0\1\u0119\3\0\5\u0119\5\0"+
    "\15\u0119\1\0\3\u0119\5\0\1\u011a\2\0\1\u0119\1\0"+
    "\1\u0119\1\0\1\u0119\3\0\5\u0119\5\0\15\u0119\1\0"+
    "\3\u0119\5\0\1\u011b\2\0\1\u011b\1\0\1\u011b\1\0"+
    "\1\u011b\3\0\5\u011b\5\0\15\u011b\1\0\3\u011b\5\0"+
    "\1\u011c\2\0\1\u011b\1\0\1\u011b\1\0\1\u011b\3\0"+
    "\5\u011b\5\0\15\u011b\1\0\3\u011b\5\0\1\u011d\2\0"+
    "\1\u011d\1\0\1\u011d\1\0\1\u011d\3\0\5\u011d\5\0"+
    "\15\u011d\1\0\3\u011d\5\0\1\u011e\2\0\1\u011d\1\0"+
    "\1\u011d\1\0\1\u011d\3\0\5\u011d\5\0\15\u011d\1\0"+
    "\3\u011d\5\0\1\u011f\2\0\1\u011f\1\0\1\u011f\1\0"+
    "\1\u011f\3\0\5\u011f\5\0\15\u011f\1\0\3\u011f\5\0"+
    "\1\u0120\2\0\1\u011f\1\0\1\u011f\1\0\1\u011f\3\0"+
    "\5\u011f\5\0\15\u011f\1\0\3\u011f\5\0\1\u0121\2\0"+
    "\1\u0121\1\0\1\u0121\1\0\1\u0121\3\0\5\u0121\5\0"+
    "\15\u0121\1\0\3\u0121\5\0\1\u0122\2\0\1\u0121\1\0"+
    "\1\u0121\1\0\1\u0121\3\0\5\u0121\5\0\15\u0121\1\0"+
    "\3\u0121\5\0\1\u0123\2\0\1\u0123\1\0\1\u0123\1\0"+
    "\1\u0123\3\0\5\u0123\5\0\15\u0123\1\0\3\u0123\5\0"+
    "\1\u0124\2\0\1\u0123\1\0\1\u0123\1\0\1\u0123\3\0"+
    "\5\u0123\5\0\15\u0123\1\0\3\u0123\5\0\1\u0125\2\0"+
    "\1\u0125\1\0\1\u0125\1\0\1\u0125\3\0\5\u0125\5\0"+
    "\15\u0125\1\0\3\u0125\5\0\1\u0126\2\0\1\u0125\1\0"+
    "\1\u0125\1\0\1\u0125\3\0\5\u0125\5\0\15\u0125\1\0"+
    "\3\u0125\5\0\1\u0127\2\0\1\u0127\1\0\1\u0127\1\0"+
    "\1\u0127\3\0\5\u0127\5\0\15\u0127\1\0\3\u0127\5\0"+
    "\1\u0128\2\0\1\u0127\1\0\1\u0127\1\0\1\u0127\3\0"+
    "\5\u0127\5\0\15\u0127\1\0\3\u0127\5\0\1\u0129\2\0"+
    "\1\u0129\1\0\1\u0129\1\0\1\u0129\3\0\5\u0129\5\0"+
    "\15\u0129\1\0\3\u0129\5\0\1\u012a\2\0\1\u0129\1\0"+
    "\1\u0129\1\0\1\u0129\3\0\5\u0129\5\0\15\u0129\1\0"+
    "\3\u0129\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11051];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\4\1\1\11\12\1\2\11\13\1\4\11"+
    "\2\0\4\1\1\0\1\1\1\0\1\11\3\1\1\11"+
    "\16\1\14\0\23\1\24\0\21\1\26\0\21\1\1\0"+
    "\1\11\12\0\1\11\2\0\1\11\3\0\16\1\1\0"+
    "\1\11\12\0\1\11\13\1\5\0\7\1\3\0\5\1"+
    "\1\0\3\1\1\0\3\1\1\0\2\1\1\11\46\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[298];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }
    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }
    modelos.InformacionLexemaS c = new modelos.InformacionLexemaS();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          zzR = false;
          break;
        case '\r':
          yyline++;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
          }
          break;
        default:
          zzR = false;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 18: 
          { return new Symbol(sym.RESERVADA_NO, yychar, yyline, yytext());
          }
        case 44: break;
        case 17: 
          { return new Symbol(sym.CADENA_TEXTO,      yychar, yyline, yytext());
          }
        case 45: break;
        case 32: 
          { return new Symbol(sym.ESPECIALES_PARAMETRO , yychar, yyline, yytext());
          }
        case 46: break;
        case 12: 
          { return new Symbol(sym.DOS_PUNTOS,        yychar, yyline, yytext());
          }
        case 47: break;
        case 35: 
          { return new Symbol(sym.RESERVADA_RETORNO, yychar, yyline, yytext());
          }
        case 48: break;
        case 13: 
          { return new Symbol(sym.PUNTO_COMA,        yychar, yyline, yytext());
          }
        case 49: break;
        case 14: 
          { return new Symbol(sym.PARENTESIS_IZQ, yychar, yyline, yytext());
          }
        case 50: break;
        case 2: 
          { return new Symbol(sym.NUMERO,            yychar, yyline, new Integer(yytext()));
          }
        case 51: break;
        case 24: 
          { return new Symbol(sym.RESERVADA_CICLO, yychar, yyline, yytext());
          }
        case 52: break;
        case 16: 
          { return new Symbol(sym.NUMERO_DECIMAL, yychar, yyline, new Double(yytext()));
          }
        case 53: break;
        case 6: 
          { return new Symbol(sym.OP_LOGICO,         yychar, yyline, yytext());
          }
        case 54: break;
        case 3: 
          { return new Symbol(sym.OP_MAS,  yychar, yyline, yytext());
          }
        case 55: break;
        case 42: 
          { return new Symbol(sym.RESERVADA_DECLARACION, yychar, yyline, yytext());
          }
        case 56: break;
        case 9: 
          { return new Symbol(sym.OP_RELACIONAL,     yychar, yyline, yytext());
          }
        case 57: break;
        case 40: 
          { return new Symbol(sym.RESERVADA_PRINCIPAL, yychar, yyline, yytext());
          }
        case 58: break;
        case 4: 
          { return new Symbol(sym.OP_MENOS,  yychar, yyline, yytext());
          }
        case 59: break;
        case 22: 
          { return new Symbol(sym.RESERVADA_HAZ, yychar, yyline, yytext());
          }
        case 60: break;
        case 31: 
          { return new Symbol(sym.RESERVADA_CADENA,  yychar, yyline, yytext());
          }
        case 61: break;
        case 26: 
          { return new Symbol(sym.ESPECIALES_CT , yychar, yyline, yytext());
          }
        case 62: break;
        case 23: 
          { return new Symbol(sym.RESERVADA_CORTO,   yychar, yyline, yytext());
          }
        case 63: break;
        case 10: 
          { return new Symbol(sym.OP_ARITMETICO2,  yychar, yyline, yytext());
          }
        case 64: break;
        case 11: 
          { return new Symbol(sym.COMA, yychar, yyline, yytext());
          }
        case 65: break;
        case 39: 
          { return new Symbol(sym.RESERVADA_MIENTRAS,     yychar, yyline, yytext());
          }
        case 66: break;
        case 25: 
          { return new Symbol(sym.RESERVADA_FALSO, yychar, yyline, yytext());
          }
        case 67: break;
        case 36: 
          { return new Symbol(sym.RESERVADA_INICIAR, yychar, yyline, yytext());
          }
        case 68: break;
        case 28: 
          { return new Symbol(sym.ESPECIALES_SOLAS , yychar, yyline, yytext());
          }
        case 69: break;
        case 34: 
          { return new Symbol(sym.RESERVADA_DECIMAL, yychar, yyline, yytext());
          }
        case 70: break;
        case 27: 
          { return new Symbol(sym.ESPECIALES_RUTA , yychar, yyline, yytext());
          }
        case 71: break;
        case 19: 
          { return new Symbol(sym.RESERVADA_SI,     yychar, yyline, yytext());
          }
        case 72: break;
        case 37: 
          { return new Symbol(sym.RESERVADA_FUNCION, yychar, yyline, yytext());
          }
        case 73: break;
        case 30: 
          { return new Symbol(sym.RESERVADA_LLAMAR,     yychar, yyline, yytext());
          }
        case 74: break;
        case 20: 
          { return new Symbol(sym.NUMERO_EXPONENTE, yychar, yyline, new Double(yytext()));
          }
        case 75: break;
        case 29: 
          { return new Symbol(sym.RESERVADA_ENTERO,  yychar, yyline, yytext());
          }
        case 76: break;
        case 43: 
          { return new Symbol(sym.ESPECIALES_DOS , yychar, yyline, yytext());
          }
        case 77: break;
        case 21: 
          { return new Symbol(sym.RESERVADA_FIN,     yychar, yyline, yytext());
          }
        case 78: break;
        case 41: 
          { return new Symbol(sym.RESERVADA_VERDADERO, yychar, yyline, yytext());
          }
        case 79: break;
        case 1: 
          { return new Symbol(sym.ERROR, yychar, yyline, yytext());
          }
        case 80: break;
        case 38: 
          { return new Symbol(sym.RESERVADA_BOOLEANO, yychar, yyline, yytext());
          }
        case 81: break;
        case 7: 
          { /*Ignore*/
          }
        case 82: break;
        case 8: 
          { return new Symbol(sym.ASIGNACION,         yychar, yyline, yytext());
          }
        case 83: break;
        case 5: 
          { return new Symbol(sym.IDENTIFICADOR,     yychar, yyline, new String(yytext()));
          }
        case 84: break;
        case 15: 
          { return new Symbol(sym.PARENTESIS_DER, yychar, yyline, yytext());
          }
        case 85: break;
        case 33: 
          { return new Symbol(sym.ESPECIALES_ID , yychar, yyline, yytext());
          }
        case 86: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
